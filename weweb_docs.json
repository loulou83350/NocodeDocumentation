[
    {
        "url": "https://developer.weweb.io/",
        "page_title": "Introduction | WeWeb Developer Docs",
        "sections": {
            "https://developer.weweb.io/#what-is-weweb": {
                "title": "What is WeWeb ? ​",
                "content": "weweb.io is a no-code web-app builder where you can drag-and-drop different customizable blocks.\nEvery time you hit publish, we build a JavaScript (Vue.js) application.\nThen, we prerender each page from it that we host on a content delivery network. Search engines can load them fast and read them easily, improving SEO and overall user-experience.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/#core-concepts": {
                "title": "Core concepts ​",
                "content": "When you build a WeWeb web-app, you use two type of blocks: Sections and Elements (see below for difference).\nUnder the hood, these two types of blocks are standard Vue components that have special props so that the WeWeb Editor can communicate with them.\nWe provide a lot of base elements (like editable text or image), but you can also develop your own. They are fully customizable and, when you import them in a WeWeb project, they will be usable by builders inside the WeWeb Editor in the same way as our core components (i.e. you will be able to drag-and-drop them on a page and edit their style with no-code).\nEach element or section have what we call a content : it's a data object that holds your custom properties. There are two contexts when your element or section can be loaded: inside the editor (Editor mode) or inside the published web-app (Front mode). In Editor mode the content is editable by the user, and saved on our database on each change. In Front mode the content can only change if it is bound to a dynamic value.\nYou can use the configuration file to use our build in logic to edit your section/element content, or handle yourself the edition interface . We have a strip logic available, so even if your element/section has a heavy editing logic, this will have no impact on the published web-app. You can learn more about stripping here\nYour custom components will inherit the base edition interface , like size, background color or border. Remember that a WeWeb user expects to edit them. You'll want to write your style and javascript with this in mind.\nIf you want to provide values for these WeWeb properties (padding for example), we advise you to drop an instance of your component inside the Editor, change the needed values with the Editor interface, and then save them inside the Design System. The Component source code is responsible for handling content/custom logic, and the Design system is the way to save style/preset of your components.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/#section-vs-element": {
                "title": "Section vs Element ​",
                "content": "A Section is a large block inside WeWeb. Sections are standalone, and cannot be used inside other components. They offer less edition option, but are easier to design because you have more control on the layout they will appear in (they will be a direct child of your page)\nAn Element is a smaller block. Elements can be used by Sections or other Elements and can be repeated.\nTIP Use a Section if you need to master the layout of your Component or if you will not use it inside other Components. Otherwise go for an Element.\nYou can learn how to create a custom component here .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Use a Section if you need to master the layout of your Component or if you will not use it inside other Components. Otherwise go for an Element."
                ]
            }
        }
    },
    {
        "url": "https://developer.weweb.io/add-element-property.html",
        "page_title": "Add another element as property | WeWeb Developer Docs",
        "sections": {
            "https://developer.weweb.io/add-element-property.html#why": {
                "title": "Why? ​",
                "content": "Sometimes we will need to have other element as children, and have more control on it than a dropzone.\nFor example, to add an icon inside a button or to display a text where you forced the text value, but want to allow users to change its style.\nThis is also a common pattern to initialize a dropzone content.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/add-element-property.html#add-an-element-on-creation": {
                "title": "Add an element on creation ​",
                "content": "See the Development process to load a base section in dev mod.\nWe will replace the title by a ww-text component.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/add-element-property.html#ww-config-js": {
                "title": "ww-config.js ​",
                "content": "The first step is to declare this property on the properties field of the configuration:\njs properties : { // [...] title : { hidden : true , defaultValue : { isWwObject : true , type : 'ww-text' }, }, }\nTIP We use the special isWwObject property inside defaultValue . We also hide the property from the panel as there is no good way to edit from the sidepanel.",
                "code_snippets": [
                    {
                        "code": "properties: {\n    // [...]\n    title: {\n      hidden: true,\n      defaultValue: { isWwObject: true, type: 'ww-text' },\n    },\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": [
                    "TIP We use the special isWwObject property inside defaultValue . We also hide the property from the panel as there is no good way to edit from the sidepanel."
                ]
            },
            "https://developer.weweb.io/add-element-property.html#use-the-value-inside-the-template": {
                "title": "Use the value inside the template ​",
                "content": "html < div class = \"my-section\" > < wwElement v-bind = \"content.title\" /> < p > Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. </ p > </ div >\nTIP Here we use the special object wwElement . See here to learn about all the options available.\nAnd it's done!",
                "code_snippets": [
                    {
                        "code": "<div class=\"my-section\">\n    <wwElement v-bind=\"content.title\" />\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\n        dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex\n        ea commodo consequat.\n    </p>\n</div>",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": [
                    "TIP Here we use the special object wwElement . See here to learn about all the options available."
                ]
            },
            "https://developer.weweb.io/add-element-property.html#add-a-forced-props": {
                "title": "Add a forced props ​",
                "content": "Some elements can take special props when they are used inside another one.\nThis is the case for ww-text : you can force the text content. In that case, users will no longer be able to edit the text content but can still customize the style of the element.\nThis is very useful when your text is computed by internal logic. This is what we use for the Paginator element for example.\njs // inside ww-config.js properties : { // [...] priceElement : { hidden : true , defaultValue : { isWwObject : true , type : 'ww-text' }, }, }\nhtml < div class = \"my-section\" > < wwElement v-bind = \"content.priceElement\" :ww-props = \"{ text: computedPrice }\" ></ wwElement > </ div >",
                "code_snippets": [
                    {
                        "code": "// inside ww-config.js\nproperties: {\n    // [...]\n    priceElement: {\n      hidden: true,\n      defaultValue: { isWwObject: true, type: 'ww-text' },\n    },\n}",
                        "language": "unknown"
                    },
                    {
                        "code": "<div class=\"my-section\">\n    <wwElement v-bind=\"content.priceElement\" :ww-props=\"{ text: computedPrice }\"></wwElement>\n</div>",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/add-element-property.html#add-an-element-dynamically": {
                "title": "Add an element dynamically ​",
                "content": "Sometimes, you will need to create an element after your component has been mounted, in response to a property change for example.\nBe aware that element creation is only available in the Editor context, so your code needs to be stripped from the production build. (See stripping here )\nExample: you have a toggle to indicate if an icon is present or not. You create the icon element only when this option is active.\nYou can use wwLib.createElement for that or wwLib.createElementFromTemplate , and the update:content event:\njs export default { // [...] methods: { createIcon () { const icon = wwLib. createElement ({ type: \"ww-icon\" }) this . $emit ( 'update' , { icon }) } } // [...] }\nWARNING Elements created this way but not saved anywhere inside an element or a component content will be garbage collected at some point, and will not appear in the published web-app. If you use this method, please store the object in a content after.",
                "code_snippets": [
                    {
                        "code": "export default {\n    // [...]\n    methods: {\n        createIcon() {\n            const icon = wwLib.createElement({ type: \"ww-icon\" })\n            this.$emit('update', { icon })\n        }\n    }\n    // [...]\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://developer.weweb.io/api/component-interface.html",
        "page_title": "Component interface | WeWeb Developer Docs",
        "sections": {
            "https://developer.weweb.io/api/component-interface.html#props": {
                "title": "Props ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/component-interface.html#content": {
                "title": "content ​",
                "content": "Type : Object Available for Section and Element Available in Editor and Front context",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/component-interface.html#uid": {
                "title": "uid ​",
                "content": "Type : String ID Available for Section and Element Available in Editor and Front context",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/component-interface.html#wweditorstate": {
                "title": "wwEditorState ​",
                "content": "Type : Object Available for Section and Element Available in Editor context only\njs const wwEditorState = { editMode: wwLib.wwEditorHelper. EDIT_MODES . EDITION , isSelected: false , isDoubleSelected: false , isHovered: false , sidepanelContent: {}, isACopy: false , boundProps: { data: true , fontSize: false , }, };",
                "code_snippets": [
                    {
                        "code": "const wwEditorState = {\n  editMode: wwLib.wwEditorHelper.EDIT_MODES.EDITION,\n  isSelected: false,\n  isDoubleSelected: false,\n  isHovered: false,\n  sidepanelContent: {},\n  isACopy: false,\n  boundProps: {\n    data: true,\n    fontSize: false,\n  },\n};",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/component-interface.html#wwfrontstate": {
                "title": "wwFrontState ​",
                "content": "Type : Object Available for Section and Element Available in Editor and Front context\njs const wwFrontState = { lang: \"en\" , pageId: \"123544\" , sectionId: \"123456\" , screenSize: \"desktop\" , screnSizes: [ \"desktop\" , \"tablet\" , \"mobile\" ], };\nWARNING You will probably never use this property, as weweb.io already handle responsive and translation logic for you",
                "code_snippets": [
                    {
                        "code": "const wwFrontState = {\n  lang: \"en\",\n  pageId: \"123544\",\n  sectionId: \"123456\",\n  screenSize: \"desktop\",\n  screnSizes: [\"desktop\", \"tablet\", \"mobile\"],\n};",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/component-interface.html#wwelementstate": {
                "title": "wwElementState ​",
                "content": "Type : Object Available for Element only Available in Editor and Front context\nIts a special property for advanced usage, basically to pass custom props to your component.\njs const wwElementState = { props: {}, isInsideLink: false , name: \"My element\" , };",
                "code_snippets": [
                    {
                        "code": "const wwElementState = {\n  props: {},\n  isInsideLink: false,\n  name: \"My element\",\n};",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/component-interface.html#event": {
                "title": "Event ​",
                "content": "js // Inside your component methods you can do this . $emit ( \"update:content\" , { /*... */ });",
                "code_snippets": [
                    {
                        "code": "// Inside your component methods you can do\nthis.$emit(\"update:content\", {\n  /*... */\n});",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/component-interface.html#update-content": {
                "title": "update:content ​",
                "content": "Type : Object Available for Section and Element Available in Editor only See also Update content",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/component-interface.html#update-content-effect": {
                "title": "update:content:effect ​",
                "content": "Type : Object Available for Section and Element Available in Editor only See also Update content",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/component-interface.html#trigger-event": {
                "title": "trigger-event ​",
                "content": "Type : \"{name: String, payload: any}\" Available in Editor and Front context Description : Trigger workflow event",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/component-interface.html#element-event": {
                "title": "element-event ​",
                "content": "Type : any Available in Editor and Front context Description : Trigger event that will be available for the parent element",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/component-interface.html#update-sidepanel-content": {
                "title": "update:sidepanel-content ​",
                "content": "Type : { value: any, path: string } Available for Section and Element Available in Editor only See also Custom editor interface",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/component-interface.html#change-menu-visibility": {
                "title": "change-menu-visibility ​",
                "content": "Type : `Boolean Available for Element only Available in Editor only Toogle menu visibility. Use by certain element to hide the menu",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://developer.weweb.io/custom-editor-interface.html",
        "page_title": "Custom editor interface | WeWeb Developer Docs",
        "sections": {}
    },
    {
        "url": "https://developer.weweb.io/add-responsive-property.html",
        "page_title": "Add a responsive content property | WeWeb Developer Docs",
        "sections": {
            "https://developer.weweb.io/add-responsive-property.html#ww-config-js": {
                "title": "ww-config.js ​",
                "content": "The first step is to add the default content value:\njs properties : { // [...] titleFontSize : { label : { en : \"Title font size\" , }, type : \"Length\" , options : { unitChoices : [{ \"value\" : \"px\" , \"label\" : \"px\" , \"min\" : 1 , \"max\" : 100 }] }, responsive : true , defaultValue : \"16px\" }, }",
                "code_snippets": [
                    {
                        "code": "properties: {\n    // [...]\n    titleFontSize: {\n        label: {\n            en: \"Title font size\",\n        },\n        type: \"Length\",\n        options: {\n            unitChoices: [{ \"value\": \"px\", \"label\": \"px\", \"min\": 1, \"max\": 100 }]\n        },\n        responsive: true,\n        defaultValue: \"16px\"\n    },\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/add-responsive-property.html#use-the-value-inside-the-template": {
                "title": "Use the value inside the template ​",
                "content": "js export default { props: { content: { type: \"Object\" , required: true }, }, computed: { textStyle () { return { color: this .content.textColor, fontSize: this .content.titleFontSize, }; }, }, };\nTIP Note here that we don't need anything to handle responsive. WeWeb resolves the inheritance of the different breakpoints for you.\nWe also comment the css style:\ncss .my-section { display : flex ; flex-direction : column ; align-items : center ; min-height : 200 px ; // h 1 { // font-size : 32 px ; // } p { margin-top : 12 px ; } }",
                "code_snippets": [
                    {
                        "code": "export default {\n    props: {\n        content: { type: \"Object\", required: true },\n    },\n    computed: {\n        textStyle() {\n            return {\n                color: this.content.textColor,\n                fontSize: this.content.titleFontSize,\n            };\n        },\n    },\n};",
                        "language": "unknown"
                    },
                    {
                        "code": ".my-section {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    min-height: 200px;\n    // h1 {\n    //     font-size: 32px;\n    // }\n    p {\n        margin-top: 12px;\n    }\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": [
                    "TIP Note here that we don't need anything to handle responsive. WeWeb resolves the inheritance of the different breakpoints for you."
                ]
            },
            "https://developer.weweb.io/add-responsive-property.html#change-the-ww-config-json": {
                "title": "Change the ww-config.json ​",
                "content": "We will add a property inside ww-config.json to add a fontSize length input in the Style panel.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/add-responsive-property.html#test-it": {
                "title": "Test it ​",
                "content": "Change the breakpoint in the top right of the Editor navbar, and change the values of the different breakpoints.\nTIP In this use case, it can be better to use a WeWeb text so that users can edit the text style. See Add a element property",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP In this use case, it can be better to use a WeWeb text so that users can edit the text style. See Add a element property"
                ]
            }
        }
    },
    {
        "url": "https://developer.weweb.io/update-content.html",
        "page_title": "Update yourself the content | WeWeb Developer Docs",
        "sections": {}
    },
    {
        "url": "https://developer.weweb.io/stripping.html",
        "page_title": "Stripping editor code | WeWeb Developer Docs",
        "sections": {}
    },
    {
        "url": "https://developer.weweb.io/add-dropzone.html",
        "page_title": "Add a dropzone | WeWeb Developer Docs",
        "sections": {
            "https://developer.weweb.io/add-dropzone.html#ww-config-js": {
                "title": "ww-config.js ​",
                "content": "The first step is to declare a new property which will hold the references to all the elements dropped.\nWe declare this property on the properties field of the configuration:\njs properties : { // [...] header : { hidden : true , defaultValue : [] }, }\nTIP A dropzone needs an array of elements, this is why we initialize it with an empty array.\nTIP We use hidden: true because there is no way to edit this list on the side panel.",
                "code_snippets": [
                    {
                        "code": "properties: {\n    // [...]\n    header: {\n      hidden: true,\n      defaultValue: []\n    },\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": [
                    "TIP A dropzone needs an array of elements, this is why we initialize it with an empty array.",
                    "TIP We use hidden: true because there is no way to edit this list on the side panel."
                ]
            },
            "https://developer.weweb.io/add-dropzone.html#use-the-value-inside-the-template": {
                "title": "Use the value inside the template ​",
                "content": "We will use a special component: wwLayout .\nFull documentation for wwLayout possibilities here\nhtml < div class = \"my-section\" > < wwLayout path = \"header\" direction = \"column\" class = \"header\" /> < p > Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. </ p > </ div >\nWe also need to add some style\ncss .my-section { // [...] . header { min-height : 20 px ; display : flex ; flex-direction : column ; } }\nWARNING Be sure to give your wwLayout a minimal width and height or the user will not be able to drop elements inside.\nThis is the simpliest way to use wwLayout .\nWe just need to provide the path property which is the path inside the content to access our previously created array.\nWe also give a direction so that the drop zone appears in the right way.",
                "code_snippets": [
                    {
                        "code": "<div class=\"my-section\">\n    <wwLayout path=\"header\" direction=\"column\" class=\"header\"/>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\n        dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex\n        ea commodo consequat.\n    </p>\n</div>",
                        "language": "unknown"
                    },
                    {
                        "code": ".my-section {\n    // [...]\n    .header {\n        min-height: 20px;\n        display: flex;\n        flex-direction: column;\n    }\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/add-dropzone.html#customize-the-item": {
                "title": "Customize the item ​",
                "content": "wwLayout by default just repeats the elements. But it also has a scoped slot you can customize to add extra style or property. This is useful to create a card for example or for the editing experience.\nTIP ww-container for example heavily uses this pattern to add handles for defining the grid.\nHere is an example:\njs // ww-config.js properties : { // [...] cards : { hidden : true , defaultValue : [] }, }\nhtml < div class = \"my-section\" > < wwLayout path = \"cards\" direction = \"row\" class = \"cards\" > < template v-slot = \"{ item }\" > < wwLayoutItem class = \"card\" > < wwObject v-bind = \"item\" > </ wwLayoutItem > </ template > </ wwLayout > </ div >\ncss .my-section { . cards { display : flex ; justify-content : space-around ; } .card { border : 1 px solid dashed ; padding : 4 px ; border-radius : 8 px ; min-width : 100 px ; } }\nYou can see more options of wwLayout here",
                "code_snippets": [
                    {
                        "code": "// ww-config.js\nproperties: {\n    // [...]\n    cards: {\n      hidden: true,\n      defaultValue: []\n    },\n}",
                        "language": "unknown"
                    },
                    {
                        "code": "<div class=\"my-section\">\n    <wwLayout path=\"cards\" direction=\"row\" class=\"cards\">\n        <template v-slot=\"{ item }\">\n            <wwLayoutItem class=\"card\">\n                <wwObject v-bind=\"item\">\n            </wwLayoutItem>\n        </template>\n    </wwLayout>\n</div>",
                        "language": "unknown"
                    },
                    {
                        "code": ".my-section {\n    .cards {\n        display: flex;\n        justify-content: space-around;\n    }\n    .card {\n        border: 1px solid dashed;\n        padding: 4px;\n        border-radius: 8px;\n        min-width: 100px;\n    }\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": [
                    "TIP ww-container for example heavily uses this pattern to add handles for defining the grid."
                ]
            },
            "https://developer.weweb.io/add-dropzone.html#bind-the-content": {
                "title": "Bind the content ​",
                "content": "If you want, you can mark your content property linked to your dropzone as bindable, with a special binding: repeatable\nWhen you do that, wwLayout will repeat its first child element for each item in the collection list bound to it, and it will set a binding context for each item.\njs // ww-config.js properties : { // [...] cards : { hidden : true , bindable : 'repeatable' , defaultValue : [] }, }\nYou can learn more about binding here",
                "code_snippets": [
                    {
                        "code": "// ww-config.js\nproperties: {\n    // [...]\n    cards: {\n      hidden: true,\n      bindable: 'repeatable',\n      defaultValue: []\n    },\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://developer.weweb.io/add-bindable-property.html",
        "page_title": "Add a bindable content property | WeWeb Developer Docs",
        "sections": {
            "https://developer.weweb.io/add-bindable-property.html#ww-config-js": {
                "title": "ww-config.js ​",
                "content": "The first step is to declare this property on the properties field of the configuration:\njs properties : { // [...] title : { label : { en : \"Title\" , }, type : \"Text\" , defaultValue : \"My title\" , bindable : true , }, }",
                "code_snippets": [
                    {
                        "code": "properties: {\n    // [...]\n    title: {\n      label: {\n        en: \"Title\",\n      },\n      type: \"Text\",\n      defaultValue: \"My title\",\n      bindable: true,\n    },\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/add-bindable-property.html#use-the-value-inside-the-template": {
                "title": "Use the value inside the template ​",
                "content": "html < div class = \"my-element\" > < h1 >{{ content.title }}</ h1 > < p :style = \"textStyle\" >I am a custom element!</ p > </ div >\nAnd that's all!\nWARNING Now that this property is bindable, the user can potentially send you any type of data. Your code needs to be defensive, and check the type of this property.\nSee also : Add a dropzone for binding repeatable content",
                "code_snippets": [
                    {
                        "code": "<div class=\"my-element\">\n    <h1>{{ content.title }}</h1>\n    <p :style=\"textStyle\">I am a custom element!</p>\n  </div>",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://developer.weweb.io/use-element-state.html",
        "page_title": "Use element state | WeWeb Developer Docs",
        "sections": {}
    },
    {
        "url": "https://developer.weweb.io/api/ww-config-js.html",
        "page_title": "ww-config.js | WeWeb Developer Docs",
        "sections": {
            "https://developer.weweb.io/api/ww-config-js.html#options-autobycontent": {
                "title": "options.autoByContent ​",
                "content": "Type : boolean (default false ) Available for Element only Description : If true, width = auto will use your element size instead of the parent available space.\nFor an example see the behavior of ww-button",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/ww-config-js.html#options-sizable": {
                "title": "options.sizable ​",
                "content": "Type : boolean (default false ) Available for Element only Description : If true, the editor will display handle to resize your element visually.\nFor an example see the behavior of ww-image",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/ww-config-js.html#options-hyperlink": {
                "title": "options.hyperlink ​",
                "content": "Type : boolean (default false ) Available for Element only Description : If true, the editor will allow your component to be wrap inside an a tag.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/ww-config-js.html#editor-label": {
                "title": "editor.label ​",
                "content": "Type : translated text Available for Section and Element Mandatory Description : This is the text use by the editor to label your component through the interface (menu, navigator, ...)",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/ww-config-js.html#editor-nohover": {
                "title": "editor.noHover ​",
                "content": "Type : boolean (default false ) Available for Element only Description : If true, the editor will not display an hover effect. Use this property if you want to handle yourself what you display on hover",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/ww-config-js.html#editor-infotag": {
                "title": "editor.infoTag ​",
                "content": "Type : InfoTag or InfoTag[] or Function returning InfoTag or InfoTag[] Available for Section and Element Description : Let you add small tags info on your component floating menu.",
                "code_snippets": [
                    {
                        "code": "infoTag: content => ({\n    color: 'var(--ww-color-blue-500)',\n    backgroundColor: 'var(--ww-color-blue-100)',\n    text: content.tag === 'button' ? 'BTN' : content.tag && content.tag.toUpperCase()\n    action: () => {\n        // anything you want to do on click\n    }\n}),",
                        "language": "unknown"
                    },
                    {
                        "code": "jsinfoTag: content => ({\n    color: 'var(--ww-color-blue-500)',\n    backgroundColor: 'var(--ww-color-blue-100)',\n    text: content.tag === 'button' ? 'BTN' : content.tag && content.tag.toUpperCase()\n    action: () => {\n        // anything you want to do on click\n    }\n}),",
                        "language": "js"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/ww-config-js.html#editor-bubble": {
                "title": "editor.bubble ​",
                "content": "Type : Boolean or {icon?: String; color?: String;} Available for Element only Description : Let you add a small bubble in the left top corner. Usefull for selection of container when children take all the content space.\nts type InfoTag = { color : string ; backgroundColor : string ; text ?: string ; icon ?: string ; action : function ; };",
                "code_snippets": [
                    {
                        "code": "type InfoTag = {\n  color: string;\n  backgroundColor: string;\n  text?: string;\n  icon?: string;\n  action: function;\n};",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/ww-config-js.html#properties": {
                "title": "properties ​",
                "content": "Type : An object with property name as key, and a property as value Available for Section and Element Description : Let you describe all your content properties",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/ww-config-js.html#triggerevents": {
                "title": "triggerEvents ​",
                "content": "Type : Array<{ name: String, label: translated text }> Available for Element only Description : Let you describe all the custom event your component can emit. Useful for custom workflows",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://developer.weweb.io/api/",
        "page_title": "ww-config.js | WeWeb Developer Docs",
        "sections": {
            "https://developer.weweb.io/api/#options-autobycontent": {
                "title": "options.autoByContent ​",
                "content": "Type : boolean (default false ) Available for Element only Description : If true, width = auto will use your element size instead of the parent available space.\nFor an example see the behavior of ww-button",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/#options-sizable": {
                "title": "options.sizable ​",
                "content": "Type : boolean (default false ) Available for Element only Description : If true, the editor will display handle to resize your element visually.\nFor an example see the behavior of ww-image",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/#options-hyperlink": {
                "title": "options.hyperlink ​",
                "content": "Type : boolean (default false ) Available for Element only Description : If true, the editor will allow your component to be wrap inside an a tag.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/#editor-label": {
                "title": "editor.label ​",
                "content": "Type : translated text Available for Section and Element Mandatory Description : This is the text use by the editor to label your component through the interface (menu, navigator, ...)",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/#editor-nohover": {
                "title": "editor.noHover ​",
                "content": "Type : boolean (default false ) Available for Element only Description : If true, the editor will not display an hover effect. Use this property if you want to handle yourself what you display on hover",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/#editor-infotag": {
                "title": "editor.infoTag ​",
                "content": "Type : InfoTag or InfoTag[] or Function returning InfoTag or InfoTag[] Available for Section and Element Description : Let you add small tags info on your component floating menu.",
                "code_snippets": [
                    {
                        "code": "infoTag: content => ({\n    color: 'var(--ww-color-blue-500)',\n    backgroundColor: 'var(--ww-color-blue-100)',\n    text: content.tag === 'button' ? 'BTN' : content.tag && content.tag.toUpperCase()\n    action: () => {\n        // anything you want to do on click\n    }\n}),",
                        "language": "unknown"
                    },
                    {
                        "code": "jsinfoTag: content => ({\n    color: 'var(--ww-color-blue-500)',\n    backgroundColor: 'var(--ww-color-blue-100)',\n    text: content.tag === 'button' ? 'BTN' : content.tag && content.tag.toUpperCase()\n    action: () => {\n        // anything you want to do on click\n    }\n}),",
                        "language": "js"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/#editor-bubble": {
                "title": "editor.bubble ​",
                "content": "Type : Boolean or {icon?: String; color?: String;} Available for Element only Description : Let you add a small bubble in the left top corner. Usefull for selection of container when children take all the content space.\nts type InfoTag = { color : string ; backgroundColor : string ; text ?: string ; icon ?: string ; action : function ; };",
                "code_snippets": [
                    {
                        "code": "type InfoTag = {\n  color: string;\n  backgroundColor: string;\n  text?: string;\n  icon?: string;\n  action: function;\n};",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/#properties": {
                "title": "properties ​",
                "content": "Type : An object with property name as key, and a property as value Available for Section and Element Description : Let you describe all your content properties",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/#triggerevents": {
                "title": "triggerEvents ​",
                "content": "Type : Array<{ name: String, label: translated text }> Available for Element only Description : Let you describe all the custom event your component can emit. Useful for custom workflows",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://developer.weweb.io/add-translated-property.html",
        "page_title": "Add translated content property | WeWeb Developer Docs",
        "sections": {
            "https://developer.weweb.io/add-translated-property.html#ww-config-js": {
                "title": "ww-config.js ​",
                "content": "The first step is to declare this property on the properties field of the configuration:\njs properties : { // [...] title : { label : { en : \"Title\" , }, type : \"Text\" , defaultValue : \"My title\" , multiLang : true , }, }",
                "code_snippets": [
                    {
                        "code": "properties: {\n    // [...]\n    title: {\n      label: {\n        en: \"Title\",\n      },\n      type: \"Text\",\n      defaultValue: \"My title\",\n      multiLang: true,\n    },\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/add-translated-property.html#use-the-value-inside-the-template": {
                "title": "Use the value inside the template ​",
                "content": "html < div class = \"my-element\" > < h1 >{{ wwLib.wwLang.getText(content.title) }}</ h1 > < p :style = \"textStyle\" >I am a custom element!</ p > </ div >\nTIP Note here that we need to use wwLib.wwLang\nTIP In this use case, it might be better to use a WeWeb text so users can edit the text style. See Add a element property",
                "code_snippets": [
                    {
                        "code": "<div class=\"my-element\">\n    <h1>{{ wwLib.wwLang.getText(content.title) }}</h1>\n    <p :style=\"textStyle\">I am a custom element!</p>\n  </div>",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": [
                    "TIP Note here that we need to use wwLib.wwLang",
                    "TIP In this use case, it might be better to use a WeWeb text so users can edit the text style. See Add a element property"
                ]
            }
        }
    },
    {
        "url": "https://developer.weweb.io/component-anatomy.html",
        "page_title": "Anatomy of a component | WeWeb Developer Docs",
        "sections": {
            "https://developer.weweb.io/component-anatomy.html#pre-requisites": {
                "title": "Pre-requisites ​",
                "content": "We consider that you are familiar with Vue development.\nYou can see the excellent Vue documentation here .\nTIP WeWeb relies on version 3 of Vue.\nThere are two files you will edit:\nsrc/wwElement.vue or src/wwSection.vue which is the Vue component displayed in the Editor and the published web-app. ww-config.js which describes the different properties of your component so that WeWeb knows how to interact with your component",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP WeWeb relies on version 3 of Vue."
                ]
            },
            "https://developer.weweb.io/component-anatomy.html#vue-component": {
                "title": "Vue component ​",
                "content": "See the Development process to load a base component in dev mod.\nFor now your Vue component is simple. It received the content props from the Editor, and uses it to add some style on text:\njs export default { // [...] props: { content: { type: \"Object\" , required: true }, }, computed: { textStyle () { return { color: this .content.textColor, }; }, }, // [...] };\nhtml < h1 :style = \"textStyle\" >My Title</ h1 >\nThe content props is where your component's editable data lives. Each time this content changes via the Editor, the component will receive a new updated content object and, thanks to Vue's reactivity, your component will refresh its template.\nTIP WeWeb handles a lot of things for you like translation , responsive or binding so that you will always receive a simple content object without having to think about it.\ncontent can have any shape you want, but we encourage you the keep it as flat as possible, because it interacts better with a lof of WeWeb features. You can put any style and html you want to your component. Just keep in mind that your root element will be editable via WeWeb's default editor.\nIt is also required that your template has a root element, and is not a fragment.\nWARNING Avoid using link or defining styles like padding which are handled by the Editor. See a complete list here",
                "code_snippets": [
                    {
                        "code": "export default {\n  // [...]\n  props: {\n    content: { type: \"Object\", required: true },\n  },\n  computed: {\n    textStyle() {\n      return {\n        color: this.content.textColor,\n      };\n    },\n  },\n  // [...]\n};",
                        "language": "unknown"
                    },
                    {
                        "code": "<h1 :style=\"textStyle\">My Title</h1>",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": [
                    "TIP WeWeb handles a lot of things for you like translation , responsive or binding so that you will always receive a simple content object without having to think about it."
                ]
            },
            "https://developer.weweb.io/component-anatomy.html#ww-config-js": {
                "title": "ww-config.js ​",
                "content": "This file describes the metadata of your component. All the desired properties of your content need to be listed here. You also have a lot of options to customize the Editor's side panel, the different menus and interactions inside WeWeb's Editor:\njs export default { editor: { label: { en: \"My Element\" , }, }, properties: { textColor: { label: { en: \"Text color\" , }, type: \"Color\" , defaultValue: \"#F23636\" , }, }, };\neditor describes the interaction of your component inside the WeWeb Editor label is a translated text used by the Editor for the menu, side panel titles, or navigator A lot of other options are available, there are listed here properties is an object which describes all your content properties Each content property will describe the corresponding property inside content (if your property name is textColor , it will be available in this.content.textColor ) type lets WeWeb's Editor display the correct user interface to edit your property. A list of all available types and their options are available here\nTIP Defining all your properties inside ww-config.js is mandatory. You can decide to handle yourself the edition update by using a custom editor interface. For that, you can use the hidden option to hide it from the edition panel. Using the configuration file is still the quickest way to make your content editable by users and offer a uniform edition experience for users across all the components.",
                "code_snippets": [
                    {
                        "code": "export default {\n  editor: {\n    label: {\n      en: \"My Element\",\n    },\n  },\n  properties: {\n    textColor: {\n      label: {\n        en: \"Text color\",\n      },\n      type: \"Color\",\n      defaultValue: \"#F23636\",\n    },\n  },\n};",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": [
                    "TIP Defining all your properties inside ww-config.js is mandatory. You can decide to handle yourself the edition update by using a custom editor interface. For that, you can use the hidden option to hide it from the edition panel. Using the configuration file is still the quickest way to make your content editable by users and offer a uniform edition experience for users across all the components."
                ]
            },
            "https://developer.weweb.io/component-anatomy.html#your-turn": {
                "title": "Your turn! ​",
                "content": "If you want to add more properties take a look at our cookbook.\nAdd a property Add a dropzone Add a responsive property Add a bindable property Add a translated text property",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://developer.weweb.io/development-process.html",
        "page_title": "Development process | WeWeb Developer Docs",
        "sections": {
            "https://developer.weweb.io/development-process.html#initiate-your-directory": {
                "title": "Initiate your directory ​",
                "content": "Compatibility note weweb-cli requires Node.js version >=18.0.0. weweb.io use Vue 3\nWe provide a npm template to quickly start development.\nFor npm\nshell npm init @weweb/component\nFor yarn\nshell yarn create @weweb/component\nThen you have to follow the different prompt questions.\nIf you already know what you want, you can pass the component name and the type of component you want via additional command line options.\nFor example, if you want to create an element named my-element or a section named hero-section:\nshell # npm 6.x (use npm -v to know your version) npm init @weweb/component my-element --type element npm init @weweb/component hero-section --type section # npm 7+, extra double-dash is needed (use npm -v to know your version) npm init @weweb/component my-element -- --type element npm init @weweb/component hero-section -- --type section # yarn yarn create @weweb/component my-element --type element yarn create @weweb/component hero-section --type section\nThe directory will contain:\na src directory with a file for your component ( wwSection.vue or wwElement.vue ). Available props and events are listed here a package.json with two scripts for dev and build, and weweb/cli as dependencies a basic README.md a ww-config.js describing all the properties of your component. Learn more about it here\nWARNING You can add other dependencies if you need to. Be aware that all package.json will be merged in the final web-app and, if two components need the same dependencies, only the more recent one will be installed. This can lead to conflicts.\nDANGER You do not need vue as a dependency, as it will be already provided by the Editor or the application.",
                "code_snippets": [
                    {
                        "code": "npm init @weweb/component",
                        "language": "unknown"
                    },
                    {
                        "code": "yarn create @weweb/component",
                        "language": "unknown"
                    },
                    {
                        "code": "# npm 6.x (use npm -v to know your version)\nnpm init @weweb/component my-element --type element\nnpm init @weweb/component hero-section --type section\n\n# npm 7+, extra double-dash is needed (use npm -v to know your version)\nnpm init @weweb/component my-element -- --type element\nnpm init @weweb/component hero-section -- --type section\n\n# yarn\nyarn create @weweb/component my-element --type element\nyarn create @weweb/component hero-section --type section",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": [
                    "Compatibility note weweb-cli requires Node.js version >=18.0.0. weweb.io use Vue 3"
                ]
            },
            "https://developer.weweb.io/development-process.html#install-dependencies-and-start-dev-server": {
                "title": "Install dependencies and start dev server ​",
                "content": "Go to the directory you just created, install dependencies and start a dev server.\nFor npm:\nshell # Install dependencies npm install # Start with default 8080 port npm run serve # Or give a port (usefull if you are developing several components) npm run serve -- port= 4040\nFor yarn:\nshell # Install dependencies yarn # Start with default 8080 port yarn serve # Or give a port (usefull if you are developing several components) yarn serve -- port= 4040\nWe use https to serve components. Your browser needs to authorize this.\nGo to https://localhost:8080 (or the port you choose).\nClick on Advanced Settings then on Continue to localhost\nChrome settings If you do not see Advanced settings, type chrome://flags as a URL in your browser. Search for Allow invalid certificates for resources loaded from localhost and click Enable",
                "code_snippets": [
                    {
                        "code": "# Install dependencies\nnpm install\n\n# Start with default 8080 port\nnpm run serve\n\n# Or give a port (usefull if you are developing several components)\nnpm run serve -- port=4040",
                        "language": "unknown"
                    },
                    {
                        "code": "# Install dependencies\nyarn\n\n# Start with default 8080 port\nyarn serve\n\n# Or give a port (usefull if you are developing several components)\nyarn serve -- port=4040",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/development-process.html#load-your-component-inside-weweb-io-in-dev-mode": {
                "title": "Load your component inside weweb.io in dev mode ​",
                "content": "Go to your dashboard and open the Editor of one of your projects.\nClick on the Dev tab, and then on \"Open Dev Editor\"\nEditor dev We use another version of the Editor to display your component while you are working on it. Because it requires a specific build of the Editor, you need to use this special version.\nOpen the dev tab again.\nSelect Element, Section or Plugin depending on your need.\nThen click on Add local Element .\nGive it a name and put the port where you start you dev server ( 8080 by default). If you did not do it before, you have a quick access to authorize the SSL certificate.\nDANGER Because during development you can broke the integrity of your component content, or use non existing yet components the autosave is disabled . This means that you can safely try things, but also that everything will be reloaded when refreshing the page.\nEach time you change the code, the component will be refreshed inside the Editor.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/development-process.html#display-and-develop-your-component": {
                "title": "Display and develop your component ​",
                "content": "You just have to drag-and-drop your component from the dev panel where you want to test it.\nYou can see the next section for more information about what you can do with your component",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/development-process.html#push-in-production": {
                "title": "Push in production ​",
                "content": "When you are satisfied with your version, you can publish it. WeWeb relies on Github to version components.\nWe advise you to also clear the Local Development before moving to the next step (same panel as for adding one).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/development-process.html#new-component": {
                "title": "New component ​",
                "content": "If you are creating a new component, create a repository on Github and push your code.\nThen go to your dashboard, and add a source code pointing to your Github repository.\nOpen the Editor (in normal mode, not dev), click on the Dev tab, and search on the bottom of the panel the source code of your component. Drag-and-drop it on the page.\nIf you'd like, you can also add some base style (padding, background color, some children, etc) and add it to your Design System.\nTIP This last step is not mandatory because you can always load your component from source code. But it offers a better user experience.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP This last step is not mandatory because you can always load your component from source code. But it offers a better user experience."
                ]
            },
            "https://developer.weweb.io/development-process.html#updating-existing-component": {
                "title": "Updating existing component ​",
                "content": "If you are updating an existing component, update the version field in package.json and push to Github.\nThen go to your Dashboard source code, search your component, and change the version (we have a hook on Github that will trigger a build each time you push to the pointed branch).\nCheck that everything is working as excepted.\nTIP Your component will not be updated inside your web-app until you change the active version in the dashboard.\nAnd voilà!",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Your component will not be updated inside your web-app until you change the active version in the dashboard."
                ]
            }
        }
    },
    {
        "url": "https://developer.weweb.io/add-property.html",
        "page_title": "Add content property | WeWeb Developer Docs",
        "sections": {
            "https://developer.weweb.io/add-property.html#ww-config-js": {
                "title": "ww-config.js ​",
                "content": "The first step is to declare this property on the properties field of the configuration:\njs properties : { // [...] title : { label : { en : \"Title\" , }, type : \"Text\" , defaultValue : \"My title\" , }, }",
                "code_snippets": [
                    {
                        "code": "properties: {\n    // [...]\n    title: {\n      label: {\n        en: \"Title\",\n      },\n      type: \"Text\",\n      defaultValue: \"My title\",\n    },\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/add-property.html#use-the-value-inside-the-template": {
                "title": "Use the value inside the template ​",
                "content": "html < div class = \"my-element\" > < h1 >{{ content.title }}</ h1 > < p :style = \"textStyle\" >I am a custom element !</ p > </ div >\nAnd that's all!\nTIP In this use case, it might be better to use a WeWeb text so the user can edit all the text style. See Add a element property",
                "code_snippets": [
                    {
                        "code": "<div class=\"my-element\">\n    <h1>{{ content.title }}</h1>\n    <p :style=\"textStyle\">I am a custom element !</p>\n  </div>",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": [
                    "TIP In this use case, it might be better to use a WeWeb text so the user can edit all the text style. See Add a element property"
                ]
            }
        }
    },
    {
        "url": "https://developer.weweb.io/api/weweb-io-objects.html",
        "page_title": "weweb.io objects | WeWeb Developer Docs",
        "sections": {
            "https://developer.weweb.io/api/weweb-io-objects.html#editor-properties": {
                "title": "Editor properties ​",
                "content": "weweb.io Editor handle by default some properties of your component listed below. Do not handle them yourself",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/weweb-io-objects.html#section": {
                "title": "Section ​",
                "content": "Height of the root html element Max width of the root html element Positioning of the root html element content Padding and margin of the root html element Background of the root html element Borders and Shadow of the root html element Tag of the root element",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/weweb-io-objects.html#element": {
                "title": "Element ​",
                "content": "Width, max-width, height of the root html element Positioning of the root html element content Padding and margin of the root html element Background of the root html element Borders and Shadow of the root html element Id and class of the root element Link wrapping your whole element",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/weweb-io-objects.html#translated-text": {
                "title": "Translated text ​",
                "content": "weweb.io use a custom way to handle translation. We use object with lang as key to store the different variants. Value can be anything (usefull for handle any kind of content which need to change depending on the locale)\nTo \"translate\", use wwLib.wwLang .\nSee also Add a translated text property",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/weweb-io-objects.html#wwlib-global-variable": {
                "title": "wwLib global variable ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/weweb-io-objects.html#wwlib-wwlang": {
                "title": "wwLib.wwLang ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/weweb-io-objects.html#wwlib-createelement": {
                "title": "wwLib.createElement ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/weweb-io-objects.html#wwlib-createelementfromtemplate": {
                "title": "wwLib.createElementFromTemplate ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/weweb-io-objects.html#wwlib-getfrontwindow": {
                "title": "wwLib.getFrontWindow ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/weweb-io-objects.html#global-components-and-directive": {
                "title": "Global components and directive ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/weweb-io-objects.html#wwlayout-component": {
                "title": "wwLayout component ​",
                "content": "This is a Vue component which allow to have a dropzone. See more here .\nIt just repeat children elements, and handle drag and drop for you. You still need to handle the css yourself.\nAvailable props:\ntag: String : change the tag root element direction: 'column' | 'row' (default column): Change the ux of the dropzone. You are still responsible of the css to display children disableDragDrop: Boolean (default false): Disable the drag and drop if you are handling child add/remove yourself\nEvents:\nupdate:list : Emit each time a child element is added or removed",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/weweb-io-objects.html#wwelement-component": {
                "title": "wwElement component ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/weweb-io-objects.html#wweditabletext-component": {
                "title": "wwEditableText component ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://developer.weweb.io/api/weweb-io-objects.html#ww-responsive-directive": {
                "title": "ww-responsive directive ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/components/intro-to-components.html",
        "page_title": "Intro to components | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/components/intro-to-components.html#working-with-components": {
                "title": "Working with components ​",
                "content": "You can find components in the Libraries section of the Add panel:\nSections and elements without an icon refer to the section and element Templates available in your Libraries .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/intro-to-components.html#templates-vs-components": {
                "title": "Templates vs components ​",
                "content": "When you drag-and-drop a template on a page, it will create a copy of the template. If you later make a change to the template, those changes will not be reflected in the copies you created before.\nWhen you drag-and-drop a component on a page, it will create a new instance of the component. If you make a change to the component, those changes will be reflected in all the instances of the component you created before.\nTIP If you are starting from a blank project in a new workspace, you may not have any assets available in your libraries at first:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/components-none.uxt8fE5i.png"
                ],
                "tips": [
                    "TIP If you are starting from a blank project in a new workspace, you may not have any assets available in your libraries at first:"
                ]
            },
            "https://docs.weweb.io/components/intro-to-components.html#create-a-new-component": {
                "title": "Create a new component ​",
                "content": "In WeWeb, there are two ways you can create a new component.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/intro-to-components.html#option-1": {
                "title": "Option 1 ​",
                "content": "You can select an element in the HTML tree on the left of the editor and click on New component in the right panel:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/intro-to-components.html#option-2": {
                "title": "Option 2 ​",
                "content": "You can select an element on the canvas and click on the component icon to transform it into a new component:\nTIP If you choose option 2, make sure to check in the HTML tree that you selected the correct element before creating the component.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP If you choose option 2, make sure to check in the HTML tree that you selected the correct element before creating the component."
                ]
            },
            "https://docs.weweb.io/components/intro-to-components.html#rename-or-delete-components": {
                "title": "Rename or delete components ​",
                "content": "When you create a new component in a project, it will be added to that project's library.\nTo view, rename, or delete a project component, you can navigate to Libraries :\nTIP In Libraries , you can view components from external libraries: However, you won't be able to rename or delete them. To rename or delete a component from an external library, you will need to open that project and update the component in that project's library.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/components-shared-library.BXy4gs1E.gif"
                ],
                "tips": [
                    "TIP In Libraries , you can view components from external libraries: However, you won't be able to rename or delete them. To rename or delete a component from an external library, you will need to open that project and update the component in that project's library."
                ]
            },
            "https://docs.weweb.io/components/intro-to-components.html#edit-a-component": {
                "title": "Edit a component ​",
                "content": "Once you have created a component, you will be able to:\nchange the style of that instance of the component, or edit the component itself so that changes are reflected on all the instances of that component",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/intro-to-components.html#updating-an-instance-vs-updating-a-component": {
                "title": "Updating an instance vs updating a component ​",
                "content": "To customize one instance of a component, simply make the changes you want in the right panel as you would with any other element.\nTo edit a component (and have those changes reflected on all instances of that component), select the component and click on the Edit button at the top of the right panel:\nWARNING The changes you make on an instance of a component will override the component settings. For example, let's say you are using one component three times in your project. If your component has a max-width of auto but change it to 100% on instance B of the component: instance A will have a max-width of auto , instance B of the component will have a max-width of 100% instance C of the component will have a max-width of auto",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/intro-to-components.html#updating-a-component": {
                "title": "Updating a component ​",
                "content": "Once you have selected a component and clicked on Edit , you will be able to update the component itself:\nIn the screenshot above, you can see a few things:\nthe Back to instance button in the top right confirms that you are currently editing the component itself, not an instance of the component the Component tab allows you to create properties, variables, workflows, formulas, and triggers associated with the component the Styles , Settings , and Workflow tabs allow you to customize the component as you would any other element. The changes you make here will be applied to all the instances of that component.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/intro-to-components.html#component-properties": {
                "title": "Component properties ​",
                "content": "When you create a component in WeWeb, you can also associate that component with properties (often referred to as \"props\").\nThese properties can be texts, numbers, booleans, selects, collections, and more:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/intro-to-components.html#benefit-of-using-props": {
                "title": "Benefit of using props ​",
                "content": "When you use a component in multiple places, you can use its props to differentiate the behavior of one instance compared to another.\nIn the example below, we have a button components with 2 properties ( style and usage ):\nOne the page, we have 4 instances of the same component, but each instance is styled differently and display a different text.\nThis is because each instance of the component has different usage and style property values.\nFor example, the text of instance 3 is Login because its usage property value is For app :\nBut we could change the text and colors of the button by changing the usage and style values of the instance.\nIn the example below, we change the property values of instance 3 to the same values as instance 2:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/intro-to-components.html#create-component-property": {
                "title": "Create component property ​",
                "content": "In the Components tab, click on New to create a new component property:\nYou will be invited to:\nname it, select a property type, provide a default value.\nTIP If you create a Select property, you will be invited to add options and select a default value:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/components-properties-select-type.DOStkaZr.png"
                ],
                "tips": [
                    "TIP If you create a Select property, you will be invited to add options and select a default value:"
                ]
            },
            "https://docs.weweb.io/components/intro-to-components.html#advanced-options": {
                "title": "Advanced options ​",
                "content": "In this section, you can decide if the component property:\nshould be displayed in the Styles or Settings tab of the instance, should be bindable, should include states, should include classes.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/intro-to-components.html#component-variables": {
                "title": "Component variables ​",
                "content": "Component variables are variables that are scoped to the component, i.e. they can only be seen and referred to inside the component as opposed to global variables – in the Data tab of the left panel – which can be seen and accessed throughout the project:\nIn the example above, there are no global variables used on the page. However, there is a component variable ( selectedItem ) which is used to display data about the selected item on the page.\nTIP Component variables are especially helpful to keep your project clean and maintainable while it grows in complexity.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Component variables are especially helpful to keep your project clean and maintainable while it grows in complexity."
                ]
            },
            "https://docs.weweb.io/components/intro-to-components.html#component-workflows": {
                "title": "Component workflows ​",
                "content": "Component workflows are workflows that are scoped to the component, i.e. they can only be executed inside the component as opposed to global workflows – in the Action tab of the left panel – which can be executed throughout the project:\nIn the example above, there are no global workflows used on the page. However, there is a component workflow ( Count coins ) which can be executed anywhere inside the component.\nIn the example below, you can see:\nour component workflow expects a parameter, we select the down arrow icon, and execute the global workflow on click of that icon, with the parameter down to reflect the fact the user just clicked on the down arrow\nTIP Component workflows are especially helpful to keep your project clean and maintainable while it grows in complexity.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Component workflows are especially helpful to keep your project clean and maintainable while it grows in complexity."
                ]
            },
            "https://docs.weweb.io/components/intro-to-components.html#component-formulas": {
                "title": "Component formulas ​",
                "content": "When building a component, you can create formulas that are local to that component. These formula will not exist outside of the component:\nIn the example above, you can see:\ninside our component, we created a CTA text formula, with two parameters that refer to the two properties of the component: style and usage , the combination of these two parameters will decide what text is displayed in our component, the Current value is \"Login\" because the property values of the current instance of the component are primary and product\nTIP Using component formulas is very helpful for scaling and debugging when you're building complex web-applications because they don't crowd the global formulas tab in your project:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/components-formulas-local.B-sYKu1e.png"
                ],
                "tips": [
                    "TIP Using component formulas is very helpful for scaling and debugging when you're building complex web-applications because they don't crowd the global formulas tab in your project:"
                ]
            },
            "https://docs.weweb.io/components/intro-to-components.html#component-events": {
                "title": "Component events ​",
                "content": "When working with components, it can be helpful to emit a component event that you can then react to outside the component.\nFor example, you could have a login form component that authenticates the user and emits a login success event.\nThen, depending on where you use the login form component, you could react to the login success event to decide if you need to close a modal or change page.\nLearn how to emit and react to component events .",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/websockets/xano-realtime/presence.html",
        "page_title": "Presence information | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/websockets/xano-realtime/presence.html#what-is-presence": {
                "title": "What is presence? ​",
                "content": "When working with realtime, it's often useful to receive and display information about online users. Enter \"presence\".\nPresence is what allows you to see who is present in a realtime channel.\nIf you’re building a collaborative tool, for instance, presence allows you to see who is actively editing or viewing a document:\nIf you are building a message board or a game, it allows users to see who is available to join a game or who is actively participating.\nUltimately, the choice of using presence depends on your specific use case.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/presence.html#pre-requisites": {
                "title": "Pre-requisites ​",
                "content": "Before users of your WeWeb app can see who is connected in realtime, you need to:\nEnable and connect Xano realtime to your WeWeb project (as explained here ). Open a channel in WeWeb with Listen to presence enabled (as explained here ).\nOnce that's done, you can think of working with realtime presence information.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/presence.html#presence-workflow-actions": {
                "title": "Presence workflow actions ​",
                "content": "To work with presence in WeWeb, you have access to:\nThe Get presence workflow action. The Presence full workflow trigger. The Presence update workflow trigger.\nWARNING You will only be able to access a channel's presence information if you enabled the option when opening said channel:\nThe Get presence action and Presence full trigger both return the same presence array: a list of currently connected users or clients to a particular channel.\nThe Presence update trigger returns an object with information about the event, including but not limited to:\nThe user's action , i.e. if they joined or left the channel. The user's socketId .",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/xano-realtime-listen-presence.DS3CtvoH.png"
                ],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/formulas/array.html",
        "page_title": "Array Formulas | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/formulas/array.html#💡-good-to-know-💡": {
                "title": "💡 Good to know 💡 ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#add": {
                "title": "add ​",
                "content": "This formula will add one or multiple values at the end of an existing array. It's the JavaScript equivalent of push .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example": {
                "title": "Example ​",
                "content": "In this example, we have a variable countries which equals to [\"France\", \"USA\"] , so an array of strings containing the countries where WeWeb employees live. But we're missing some countries! To solve this, we'll use the add formula to add two new countries.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#contains": {
                "title": "contains ​",
                "content": "This formula will check if a value exist in a given array. It always returns a boolean , meaning it will either return true or false .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-1": {
                "title": "Example ​",
                "content": "Let's get back to our countries array variable, which now equals [\"France\", \"USA\", \"Belgium\", \"Croatia\"] . If we use the contains formula with this array and \"France\" , it will return true . With \"Canada\" , it returns false , as Canada isn't in the list of countries.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#createarray": {
                "title": "createArray ​",
                "content": "The createArray formula is useful to create a whole array from scratch, without any code. It's the equivalent of writing the whole array in JavaScript.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-2": {
                "title": "Example ​",
                "content": "Let's say we want to create the countries array (containing the places where WeWeb employees live, meaning [\"France\", \"USA\", \"Belgium\", \"Croatia\"] ) in a workflow, without needing to type any JavaScript. To do this, we would write this formula:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#compare": {
                "title": "compare ​",
                "content": "This formula will compare that two arrays are equals. Meaning they both have the same values and that their values are in the same order (same index for each). This formula always returns a boolean , which means true or false .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-3": {
                "title": "Example ​",
                "content": "If we take our countries array which contain [\"France\", \"USA\", \"Belgium\", \"Croatia\"] , compare will return true or false in these use-cases:\nsame values, same order -> true\nsame values, different order -> false\ndifferent values -> false",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#distinct": {
                "title": "distinct ​",
                "content": "distinct iterates over the values in an array, and will return a new array with only unique values. Meaning that if a value is present twice or more in the array, it will be returned only once.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-4": {
                "title": "Example ​",
                "content": "Let's say we have an array with WeWeb employees names, but we wrote one of them twice by mistake. By using the distinct formula, we're able to correct this mistake.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#filterbykey": {
                "title": "filterByKey ​",
                "content": "This formula will iterate over an array of objects, and return an array where only the object's with a certain key have a certain value.\nIt seems hard to understand like that, I know... But check the example and it'll become super clear 😉",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-5": {
                "title": "Example ​",
                "content": "Let's say we have an array of users with objects containing their names and role in the web app:\njson [ { \"name\" : \"Quentin\" , \"role\" : \"admin\" }, { \"name\" : \"Joyce\" , \"role\" : \"normal\" }, { \"name\" : \"Aurélie\" , \"role\" : \"admin\" }, { \"name\" : \"Kévin\" , \"role\" : \"normal\" } ]\nWe want to filter this array to only have users who are admins. We can do this easily with the filterByKey formula:\nLearn more about the filterByKey formula in this video tutorial .",
                "code_snippets": [
                    {
                        "code": "[\n    {\"name\": \"Quentin\", \"role\": \"admin\"},\n    {\"name\": \"Joyce\", \"role\": \"normal\"},\n    {\"name\": \"Aurélie\", \"role\": \"admin\"},\n    {\"name\": \"Kévin\", \"role\": \"normal\"}\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#findindex": {
                "title": "findIndex ​",
                "content": "findIndex , when given and array and a value, will find the index in the array of the first element which equals the given value. If the value isn't found, it will return -1 . It's equivalent to JavaScript's indexOf .\n🔥 Pro tip 🔥",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-6": {
                "title": "Example ​",
                "content": "If we take the countries array, which includes [\"France\", \"USA\", \"Belgium\", \"Croatia\"] , it will return 2 when we use findIndex for \"Belgium\" , -1 for \"Germany\" as it's not in the array.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#findindexbykey": {
                "title": "findIndexByKey ​",
                "content": "This formula is equivalent to the findIndex formula but for arrays of objects. It'll return the index of the first object in the array whose key is equal to value.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-7": {
                "title": "Example ​",
                "content": "Let's get back to our array of users with objects containing their names and role in the web app:\njson [ { \"name\" : \"Quentin\" , \"role\" : \"admin\" }, { \"name\" : \"Joyce\" , \"role\" : \"normal\" }, { \"name\" : \"Aurélie\" , \"role\" : \"admin\" }, { \"name\" : \"Kévin\" , \"role\" : \"normal\" } ]\nIf we try to find the first object whose \"role\" equals to \"normal\" , we'll get the index 1 (the second object). We'll get the index 2 to match on \"name\" equals \"Aurélie\" and -1 when matching on \"John\" as this name doesn't exist in the array.",
                "code_snippets": [
                    {
                        "code": "[\n    {\"name\": \"Quentin\", \"role\": \"admin\"},\n    {\"name\": \"Joyce\", \"role\": \"normal\"},\n    {\"name\": \"Aurélie\", \"role\": \"admin\"},\n    {\"name\": \"Kévin\", \"role\": \"normal\"}\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#getbyindex": {
                "title": "getByIndex ​",
                "content": "This formula will return an element in a array at a specific index.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-8": {
                "title": "Example ​",
                "content": "Let's get back to our array of users with objects containing their names and role in the web app:\njson [ { \"name\" : \"Quentin\" , \"role\" : \"admin\" }, { \"name\" : \"Joyce\" , \"role\" : \"normal\" }, { \"name\" : \"Aurélie\" , \"role\" : \"admin\" }, { \"name\" : \"Kévin\" , \"role\" : \"normal\" } ]\nIf we use getByIndex on the second index, we'll get back Aurélie's object.",
                "code_snippets": [
                    {
                        "code": "[\n    {\"name\": \"Quentin\", \"role\": \"admin\"},\n    {\"name\": \"Joyce\", \"role\": \"normal\"},\n    {\"name\": \"Aurélie\", \"role\": \"admin\"},\n    {\"name\": \"Kévin\", \"role\": \"normal\"}\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#groupby": {
                "title": "groupBy ​",
                "content": "groupBy , when given an array of objects, will return a new array where objects are grouped by their value for a given key.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-9": {
                "title": "Example ​",
                "content": "Again, we go back to our array of users with objects containing their names and role in the web app:\njson [ { \"name\" : \"Quentin\" , \"role\" : \"admin\" }, { \"name\" : \"Joyce\" , \"role\" : \"normal\" }, { \"name\" : \"Aurélie\" , \"role\" : \"admin\" }, { \"name\" : \"Kévin\" , \"role\" : \"normal\" } ]\nLet's say we want to regroup them by role type (admins together and normal users together). We can use the groupBy formula applied on the \"role\" key for this.",
                "code_snippets": [
                    {
                        "code": "[\n    {\"name\": \"Quentin\", \"role\": \"admin\"},\n    {\"name\": \"Joyce\", \"role\": \"normal\"},\n    {\"name\": \"Aurélie\", \"role\": \"admin\"},\n    {\"name\": \"Kévin\", \"role\": \"normal\"}\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#join": {
                "title": "join ​",
                "content": "This formula will join all the elements of an array into a string, separating them by a separator (optional, , by default). It's equivalent to JavaScript's join .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-10": {
                "title": "Example ​",
                "content": "Say we want to write a string telling people where WeWeb employees live, using the countries array which equals to [\"France\", \"USA\", \"Belgium\", \"Croatia\"] . We can easily do this with string concatenation and join .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#length": {
                "title": "length ​",
                "content": "It will return the length of an array, meaning the number of items inside it. Same as JavaScript's length .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-11": {
                "title": "Example ​",
                "content": "Using it again on countries which is [\"France\", \"USA\", \"Belgium\", \"Croatia\"] , length will return 4 as there's four countries in this array.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#lookup": {
                "title": "lookup ​",
                "content": "Given an array of objects, this formula will return the first object where the key equals to a value. The key is optional, and equals \"id\" by default. It's equivalent of using getByIndex and findByIndex together.\n💡 Good to know 💡",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-12": {
                "title": "Example ​",
                "content": "Let's say, that in our users array, we want to find back the one for Aurélie. We can do this using the lookup formula.\nAs a reminder, here the array:\njson [ { \"name\" : \"Quentin\" , \"role\" : \"admin\" }, { \"name\" : \"Joyce\" , \"role\" : \"normal\" }, { \"name\" : \"Aurélie\" , \"role\" : \"admin\" }, { \"name\" : \"Kévin\" , \"role\" : \"normal\" } ]\nAlso, small example with getByIndex used with findByIndex .",
                "code_snippets": [
                    {
                        "code": "[\n    {\"name\": \"Quentin\", \"role\": \"admin\"},\n    {\"name\": \"Joyce\", \"role\": \"normal\"},\n    {\"name\": \"Aurélie\", \"role\": \"admin\"},\n    {\"name\": \"Kévin\", \"role\": \"normal\"}\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#lookuparray": {
                "title": "lookupArray ​",
                "content": "Same as lookup , but will match an array of values and return all the objects where the value is in the array of values for a given key.\n🔥 Pro tip 🔥",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-13": {
                "title": "Example ​",
                "content": "Let's say we improve our users array with a new member, Raphael, who's a \"superAdmin\" :\njson [ { \"name\" : \"Quentin\" , \"role\" : \"admin\" }, { \"name\" : \"Joyce\" , \"role\" : \"normal\" }, { \"name\" : \"Aurélie\" , \"role\" : \"admin\" }, { \"name\" : \"Kévin\" , \"role\" : \"normal\" }, { \"name\" : \"Raphael\" , \"role\" : \"superAdmin\" } ]\nIf we wanted to get only users that are either admins or super admins, we would use the lookupArray formula.",
                "code_snippets": [
                    {
                        "code": "[\n    { \"name\": \"Quentin\", \"role\": \"admin\" },\n    { \"name\": \"Joyce\", \"role\": \"normal\" },\n    { \"name\": \"Aurélie\", \"role\": \"admin\" },\n    { \"name\": \"Kévin\", \"role\": \"normal\" },\n    { \"name\": \"Raphael\", \"role\": \"superAdmin\" }\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#map": {
                "title": "map ​",
                "content": "Given an array of objects, this formula will return an array with only the selected key(s) from each object.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-14": {
                "title": "Example ​",
                "content": "Again, we take our users array of objects:\njson [ { \"name\" : \"Quentin\" , \"role\" : \"admin\" }, { \"name\" : \"Joyce\" , \"role\" : \"normal\" }, { \"name\" : \"Aurélie\" , \"role\" : \"admin\" }, { \"name\" : \"Kévin\" , \"role\" : \"normal\" }, { \"name\" : \"Raphael\" , \"role\" : \"superAdmin\" } ]\nIf we wanted to get an array of the users' names only, we would use the map formula like so:",
                "code_snippets": [
                    {
                        "code": "[\n    { \"name\": \"Quentin\", \"role\": \"admin\" },\n    { \"name\": \"Joyce\", \"role\": \"normal\" },\n    { \"name\": \"Aurélie\", \"role\": \"admin\" },\n    { \"name\": \"Kévin\", \"role\": \"normal\" },\n    { \"name\": \"Raphael\", \"role\": \"superAdmin\" }\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#merge": {
                "title": "merge ​",
                "content": "Given two or more arrays, the merge formula will return a single array containing all the former arrays.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-15": {
                "title": "Example ​",
                "content": "Let's say we have two arrays with these values:\njs // countries array [ \"France\" , \"USA\" , \"Belgium\" , \"Croatia\" ] // countries2 array [ \"Germany\" , \"India\" , \"Japan\" ]\nThe result of merging those two arrays will give a bigger array containing all the countries:",
                "code_snippets": [
                    {
                        "code": "// countries array\n[\n    \"France\",\n    \"USA\",\n    \"Belgium\",\n    \"Croatia\"\n]\n\n// countries2 array\n[\n    \"Germany\",\n    \"India\",\n    \"Japan\"\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#prepend": {
                "title": "prepend ​",
                "content": "The prepend formula adds one or more values at the beginning of a given array.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-16": {
                "title": "Example ​",
                "content": "Let's say we have a countries array with the following values:\njs // countries array [ \"France\" , \"USA\" , \"Belgium\" , \"Croatia\" ]\nBy prepending \"Germany\" to it, we'll get this result:",
                "code_snippets": [
                    {
                        "code": "// countries array\n[\n    \"France\",\n    \"USA\",\n    \"Belgium\",\n    \"Croatia\"\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#remove": {
                "title": "remove ​",
                "content": "This formula will remove a given value from an array.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-17": {
                "title": "Example ​",
                "content": "Still with our countries array as an example:\njs // countries array [ \"France\" , \"USA\" , \"Belgium\" , \"Croatia\" ]\nHere's what happens when removing \"USA\" from it:",
                "code_snippets": [
                    {
                        "code": "// countries array\n[\n    \"France\",\n    \"USA\",\n    \"Belgium\",\n    \"Croatia\"\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#removebyindex": {
                "title": "removeByIndex ​",
                "content": "removeByIndex does the same thing as the remove formula , except it does it by removing the element at a certain index in an array, rather than a value.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-18": {
                "title": "Example ​",
                "content": "Same example and return as the example for remove , but with the index:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#removebykey": {
                "title": "removeByKey ​",
                "content": "Given an array of objects, this formula will remove all the objects from the array where the given key is equal to a given value.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-19": {
                "title": "Example ​",
                "content": "Here's an array called users with the following value:\njson [ { \"name\" : \"Quentin\" , \"role\" : \"admin\" }, { \"name\" : \"Joyce\" , \"role\" : \"normal\" }, { \"name\" : \"Aurélie\" , \"role\" : \"admin\" }, { \"name\" : \"Kévin\" , \"role\" : \"normal\" }, { \"name\" : \"Raphael\" , \"role\" : \"superAdmin\" } ]\nIf we were to remove all the admin users, we would do it like so:",
                "code_snippets": [
                    {
                        "code": "[\n    { \"name\": \"Quentin\", \"role\": \"admin\" },\n    { \"name\": \"Joyce\", \"role\": \"normal\" },\n    { \"name\": \"Aurélie\", \"role\": \"admin\" },\n    { \"name\": \"Kévin\", \"role\": \"normal\" },\n    { \"name\": \"Raphael\", \"role\": \"superAdmin\" }\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#reverse": {
                "title": "reverse ​",
                "content": "Given an array, this formula will reverse its values order.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-20": {
                "title": "Example ​",
                "content": "Given back our countries array:\njson [ \"France\" , \"USA\" , \"Belgium\" , \"Croatia\" ]\nReversing it will return this value:",
                "code_snippets": [
                    {
                        "code": "[\n    \"France\",\n    \"USA\",\n    \"Belgium\",\n    \"Croatia\"\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#rollup": {
                "title": "rollup ​",
                "content": "Given an array of objects, this formula will return all the values for a given key. If the distinct parameter is set to true , it'll return unique values only ( false by default).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-21": {
                "title": "Example ​",
                "content": "Here's an array called users which equals to:\njson [ { \"name\" : \"Quentin\" , \"role\" : \"admin\" }, { \"name\" : \"Joyce\" , \"role\" : \"normal\" }, { \"name\" : \"Aurélie\" , \"role\" : \"admin\" }, { \"name\" : \"Kévin\" , \"role\" : \"normal\" }, { \"name\" : \"Raphael\" , \"role\" : \"superAdmin\" } ]\nIf we were to get the possible roles, we would use the rollup formula like this:",
                "code_snippets": [
                    {
                        "code": "[\n    { \"name\": \"Quentin\", \"role\": \"admin\" },\n    { \"name\": \"Joyce\", \"role\": \"normal\" },\n    { \"name\": \"Aurélie\", \"role\": \"admin\" },\n    { \"name\": \"Kévin\", \"role\": \"normal\" },\n    { \"name\": \"Raphael\", \"role\": \"superAdmin\" }\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#slice": {
                "title": "slice ​",
                "content": "This formula will return the values from an array from the startIndex up to the endIndex ( endIndex not included). It's the exact same function as the JavaScript's slice .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-22": {
                "title": "Example ​",
                "content": "Given a countries array:\njson [ \"France\" , \"USA\" , \"Belgium\" , \"Croatia\" ]\nSlicing it to get back only [\"USA\", \"Belgium\"] would it be possible by using the slice formula:",
                "code_snippets": [
                    {
                        "code": "[\n    \"France\",\n    \"USA\",\n    \"Belgium\",\n    \"Croatia\"\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#sort": {
                "title": "sort ​",
                "content": "Given an array, this formula will sort it in ascending ( \"asc\" ) or descending ( \"desc\" ) mode. It can be applied on a given key for arrays of objects.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/array.html#example-23": {
                "title": "Example ​",
                "content": "Taking back our array called users which equals to:\njson [ { \"name\" : \"Quentin\" , \"role\" : \"admin\" }, { \"name\" : \"Joyce\" , \"role\" : \"normal\" }, { \"name\" : \"Aurélie\" , \"role\" : \"admin\" }, { \"name\" : \"Kévin\" , \"role\" : \"normal\" }, { \"name\" : \"Raphael\" , \"role\" : \"superAdmin\" } ]\nTo sort it by user's names in ascending order (alphabetically), we would use the sort formula this way:",
                "code_snippets": [
                    {
                        "code": "[\n    { \"name\": \"Quentin\", \"role\": \"admin\" },\n    { \"name\": \"Joyce\", \"role\": \"normal\" },\n    { \"name\": \"Aurélie\", \"role\": \"admin\" },\n    { \"name\": \"Kévin\", \"role\": \"normal\" },\n    { \"name\": \"Raphael\", \"role\": \"superAdmin\" }\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-legal-terms.html",
        "page_title": "Referral Legal Terms | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-legal-terms.html#relationship": {
                "title": "Relationship ​",
                "content": "The Referrer shall not be considered an agent or legal representative of the Company for any reason, nor possess any authority to represent, bind, or make commitments on the Company's behalf.\nThe Referrer is not empowered to make any promises or determinations on behalf of the Company concerning product quantities, delivery schedules, software modifications, compatibility, software aptness, or its suitability for specific tasks. Furthermore, the Referrer does not have the jurisdiction to alter any warranties associated with the Company's products.\nUnder no circumstances shall the Referrer portray itself in a manner suggesting it acts as an agent or extension of the Company. Should the Company determine any of the Referrer's representations or business practices to be misleading or deceptive, the Referrer must promptly amend or cease such practices upon receiving a notification from the Company.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-legal-terms.html#lead-referral-and-acceptance": {
                "title": "Lead Referral and Acceptance ​",
                "content": "The Referrer hereby acknowledges that, for a Lead to be recognized as a Commissionable Lead (\" Commissionable Lead \"), the subsequent conditions must be satisfied:\nThe Referrer has shared their unique referral link, accessible through the Platform's dashboard, to a prospective customer. The prospective customer has subsequently established an account on the Platform, utilizing the Referrer's referral link, which includes the unique referral code. The prospective customer has procured a subscription via the Platform's dashboard. The Company has conducted a review and validated the Lead as eligible for commission (specifically, the Lead has not been declined for reasons delineated in the forthcoming Exclusions section or for any other pertinent reasons).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-legal-terms.html#exclusions": {
                "title": "Exclusions ​",
                "content": "The Referrer acknowledges and agrees that no commission will be accrued by the Referrer for the referral of a Lead:\nThat was an existing customer of the Company at the time of the referral or With whom the Company was already involved in preliminary or advanced discussions leading to the sale of a license\nThe Referrer acknowledges that it shall be solely responsible for and shall bear all costs associated with the Referrer's development of any Leads for referral to the Company.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-legal-terms.html#mutual-obligations-regarding-lead-development": {
                "title": "Mutual Obligations Regarding Lead Development ​",
                "content": "Each Party will cooperate with the other to develop and execute a strategy to best serve the needs of the Commissionable Lead, including how the Parties will work separately or together, if at all, regarding the Lead.\nEach Party will, upon request of the other Party, provide the other with non-confidential information it has regarding a Lead to assist the other Party in (i) verifying the eligibility of the Lead as commissionable and/or (ii) successfully soliciting the Lead to purchase the Company's products. This can be relayed via email, Slack or by phone. It does not apply if the referral has already completed an order using the Platform's dashboard.\nEach Party will, upon request of the other Party, in its reasonable discretion, provide the other Party with information regarding its services and/or products. Such information shall include sales and marketing materials and informal training. Any training provided under this Section shall be conducted at mutually agreed times and places and shall be conducted in accordance with the training Party's discretion.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-legal-terms.html#commissions": {
                "title": "Commissions ​",
                "content": "Subject to the terms and conditions of this Agreement, the Referrer will accrue commission for each Commissionable Lead referred to the Company.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-legal-terms.html#commission-accruals": {
                "title": "Commission Accruals ​",
                "content": "For all users - 10% of the monthly or yearly contract value over the first year, after deduction of the company’s payment system fees of 4%.\nFor users who have at least one agency partner seat in one of the workspaces they own - 20% of the monthly or yearly contract value for the customer referred to the Company, as long as the customer has a valid, paid subscription to the Platform, and after deduction of the company’s payment system fees of 4%.\nThe accrued commission is displayed in the Referrers Dashboard on the Platform.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-legal-terms.html#commission-payouts": {
                "title": "Commission Payouts ​",
                "content": "Commissions under this Section shall be processed within 15 business days from the moment the Referrer makes a payout request.\nThe payment of commissions will be made in U.S. Dollars to the Referrer's bank account on record.\nCommissions are paid in United States dollars and are subject to all applicable governmental regulations and rulings, including the withholding of any taxes required by law.\nThe Referrer is solely responsible for payment of any and all taxes imposed or incurred in connection with any commissions described above.\nThe Referrer agrees to complete and provide any and all tax documentation reasonably requested by the Company to comply with any tax reporting obligations of any jurisdiction.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-legal-terms.html#term-termination-and-references": {
                "title": "Term, Termination, and References ​",
                "content": "This Agreement is subject to and shall be read in conjunction with the Company's Terms Of Use and the Privacy Policy.\nBy entering into this Agreement, the Referrer acknowledges and agrees that they have read, understood, and accepted the terms and conditions set out in both the Terms Of Use and the Privacy Policy.\nIn the event of any inconsistency or conflict between this Agreement and the Terms Of Use or the Privacy Policy, the terms of this Agreement shall prevail.\nThis Agreement is accepted and becomes valid when the Referrer clicks the \"Retrieve pending payout\" button on the Platform.\nThis Agreement shall automatically terminate in the event that the Referrer downgrades their account to a Free plan or deletes their account from the Platform.\nThe Company may terminate this Agreement upon written notice to the other at any time, for any reason or no reason.\nThe Company may, from time to time, issue amendments to this Agreement and notify the Referrers of such fact by email or a message in the UI of the Platform.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/intro-to-workflows.html",
        "page_title": "Intro to workflows | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/intro-to-workflows.html#global-vs-local-workflows": {
                "title": "Global vs local workflows ​",
                "content": "In WeWeb, you can create workflows in two ways:\nGlobal workflows located in the Actions tab that you can reuse across your application\nLocal workflows that are tied to a specific trigger or element\nTIP While you can create local workflows for any trigger (app load, page load, button clicks, etc.), we recommend using global workflows whenever you find yourself repeating the same series of actions in different places, or when a workflow becomes too complex to manage. Make sure your workflows are maintainable and easy to understand. Learn more about how to create and reuse global workflows",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP While you can create local workflows for any trigger (app load, page load, button clicks, etc.), we recommend using global workflows whenever you find yourself repeating the same series of actions in different places, or when a workflow becomes too complex to manage. Make sure your workflows are maintainable and easy to understand. Learn more about how to create and reuse global workflows"
                ]
            },
            "https://docs.weweb.io/workflows/intro-to-workflows.html#filter-on-current-page": {
                "title": "Filter on current page ​",
                "content": "To see if a global workflow is used on a page, you can toggle the All pages switch:\nIn the example above, you can see we are currently on the Home page and only the Calculate shipping cost workflow is being used on that page.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/intro-to-workflows.html#page-workflows": {
                "title": "Page workflows ​",
                "content": "Page workflows are specifically tied to individual pages and only execute when a user visits that particular page.\nTo create page workflows, go to page settings > Trigger page workflows",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/intro-to-workflows.html#app-workflows": {
                "title": "App workflows ​",
                "content": "App workflows run across your entire website. If you create an app workflow that triggers when a page loads, it will run every time any page in your website loads. For example, if your website has a home page, about page, and contact page, the same workflow will run when someone visits any of these pages.\nTo add a workflow at app level, go to More > Trigger app workflows .\nThis will open a panel where you can create a new workflow:\nWhen you trigger a new workflow at app level, you can can choose to build the workflow from scratch or execute a global workflow.\nIn the example below, on page scroll, throughout our app, we execute a global workflow to change the navbar color:\nTIP Always give your workflows clear, descriptive names. This makes debugging easier and helps team collaboration. ✅ Good: \"Validate User Input\", \"Send Welcome Email\" ❌ Bad: \"New Workflow\", \"Workflow 1\" You can use any naming format – just be consistent throughout your project.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Always give your workflows clear, descriptive names. This makes debugging easier and helps team collaboration. ✅ Good: \"Validate User Input\", \"Send Welcome Email\" ❌ Bad: \"New Workflow\", \"Workflow 1\" You can use any naming format – just be consistent throughout your project."
                ]
            },
            "https://docs.weweb.io/workflows/intro-to-workflows.html#recurring-tasks": {
                "title": "Recurring tasks ​",
                "content": "WeWeb is a frontend builder. It follows that WeWeb's workflows allow you to build frontend logic, to display popup alerts, send an email when a user clicks on a button, or filter data for example.\nIf you are looking to program recurring tasks, i.e. CronJobs, to perform regular scheduled actions, then this should be created in the logic of your backend - not your frontend.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/weweb-ai/generating-custom-coded-components.html",
        "page_title": "Generating Custom Coded Components | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/weweb-ai/generating-custom-coded-components.html#features": {
                "title": "Features ​",
                "content": "AI-Powered Generation : Create complex components by describing what you need in natural language External Library Support : Incorporate libraries not natively available in WeWeb (e.g., Highcharts, specific UI frameworks) Complete Customization : Control every aspect of your component through editable properties Interactive Elements : Add custom triggers, actions, and exposed variables Component Forking : Clone and modify existing components to extend their functionality",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/generating-custom-coded-components.html#using-ai-to-generate-components": {
                "title": "Using AI to Generate Components ​",
                "content": "The easiest way to create a custom component is by describing what you need to the AI:\nOpen the AI chat panel\nDescribe the component you want to create, including: Desired functionality Required libraries Properties you want to control Interactions you need\nAI will generate the component and add it to your available components. To place the generated component onto your page, drag it onto the page directly from the chat interface:\nOr, alternatively, drag it from the Coded components menu of the Add panel.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/generating-custom-coded-components.html#example-prompts": {
                "title": "Example Prompts ​",
                "content": "Here are examples of effective prompts for creating custom components:\nCreate a line chart component using Highcharts that shows customer satisfaction data over time. Include properties for line color, chart title, and animation speed.\nCreate a skeleton loader component with properties for base color, wave color, animation speed, and shape (rectangle or circle). Make sure it has a background fill to cover content beneath it.",
                "code_snippets": [
                    {
                        "code": "Create a line chart component using Highcharts that shows customer satisfaction data over time. Include properties for line color, chart title, and animation speed.",
                        "language": "unknown"
                    },
                    {
                        "code": "Create a skeleton loader component with properties for base color, wave color, animation speed, and shape (rectangle or circle). Make sure it has a background fill to cover content beneath it.",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/generating-custom-coded-components.html#understanding-component-architecture": {
                "title": "Understanding Component Architecture ​",
                "content": "Custom coded components in WeWeb have four key elements that can be fully customized:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/generating-custom-coded-components.html#_1-properties": {
                "title": "1. Properties ​",
                "content": "Properties allow you to control your component's appearance and behavior directly from the WeWeb editor:\nSettings Properties : Control functional aspects (data sources, behavior) Style Properties : Adjust visual aspects (colors, sizes, animations)\nWhen generating a component, specify the properties you want to control:\nCreate a custom progress bar with properties for: - Progress value (0-100) - Bar color - Background color - Border radius - Animation speed",
                "code_snippets": [
                    {
                        "code": "Create a custom progress bar with properties for:\n- Progress value (0-100)\n- Bar color\n- Background color\n- Border radius\n- Animation speed",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/generating-custom-coded-components.html#_2-workflow-triggers": {
                "title": "2. Workflow Triggers ​",
                "content": "Triggers allow your component to initiate workflows when specific events occur:\nUser Interactions : Clicks, hovers, selections Data Changes : Value updates, selections State Changes : Loading states, error conditions\nExample of requesting specific triggers:\nCreate a custom image carousel with workflow triggers for: - On image change - On image click - When carousel reaches the end",
                "code_snippets": [
                    {
                        "code": "Create a custom image carousel with workflow triggers for:\n- On image change\n- On image click\n- When carousel reaches the end",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/generating-custom-coded-components.html#_3-component-actions": {
                "title": "3. Component Actions ​",
                "content": "Actions let you execute functionality in the component from other elements on your page via workflows. An action could be something such as:\nWorkflow Execution : Trigger workflows of the component State Changes : Updating internal states of the component Data Manipulation : Modify data displayed inside the component\nExample of requesting specific actions:\nCreate a custom map component with actions for: - Center on specific coordinates - Change zoom level - Toggle point of interest visibility",
                "code_snippets": [
                    {
                        "code": "Create a custom map component with actions for:\n- Center on specific coordinates\n- Change zoom level\n- Toggle point of interest visibility",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/generating-custom-coded-components.html#_4-exposed-variables": {
                "title": "4. Exposed Variables ​",
                "content": "Variables expose component data to be used elsewhere in your app:\nSelected Values : Currently selected items Component States : Loading states, current positions Processed Data : Calculated results\nExample of requesting specific variables:\nCreate a date range picker that exposes variables for: - Selected start date - Selected end date - Number of days in selection",
                "code_snippets": [
                    {
                        "code": "Create a date range picker that exposes variables for:\n- Selected start date\n- Selected end date\n- Number of days in selection",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/generating-custom-coded-components.html#forking-components": {
                "title": "Forking Components ​",
                "content": "Forking allows you to create a clone of an existing component, which you can then modify the functionality of while maintaining the core behavior.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/generating-custom-coded-components.html#when-to-fork-components": {
                "title": "When to Fork Components ​",
                "content": "Fork a component when you need to:\nAdd features not available in the original component Modify the core behavior of a component Create specialized versions of standard components",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/generating-custom-coded-components.html#how-to-fork-a-component": {
                "title": "How to Fork a Component ​",
                "content": "There are two ways to fork components:\nWith the component selected on the page, via the settings in the top right of the editor\nFrom the settings of the component in the Coded components menu of the Add panel",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/generating-custom-coded-components.html#example-fork-scenario": {
                "title": "Example Fork Scenario ​",
                "content": "Enhanced Reorder List\nImagine you are using the native Reorder List component and you want to apply a custom border color to the dragged item. This is not possible via the native component, however, you could fork the Reorder List and ask AI to add this ability.\nHere is a short demo:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/settings-billing-code-export/workspace-settings/members-tab.html",
        "page_title": "The Members Tabs | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/settings-billing-code-export/workspace-settings/members-tab.html#members-vs-guests": {
                "title": "Members vs guests ​",
                "content": "You can invite:\nteam members, and up to 10 free guests\nPeople who accept your invitation will get access to all the workspace:\nprojects, components, and design systems.\nTIP When inviting agency or freelancer guests, make sure to use the email address they used to subscribe to the WeWeb agency partner plan. The invitation will not go through otherwise.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP When inviting agency or freelancer guests, make sure to use the email address they used to subscribe to the WeWeb agency partner plan. The invitation will not go through otherwise."
                ]
            },
            "https://docs.weweb.io/settings-billing-code-export/workspace-settings/members-tab.html#member-roles": {
                "title": "Member roles ​",
                "content": "The workspace Owner is the only one who can purchase a project plan and delete the workspace.\nTeam members with the Admin role can manage members, edit the name of a project or workspace, and delete projects.\nTeam members who are a Member can access and edit all projects in the workspace.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/workspace-settings/members-tab.html#invite-members-guests": {
                "title": "Invite members & guests ​",
                "content": "To invite people, click on the Invite members or Invite guests button:\nYou will be invited to fill out the popup with the new user(s) name(s) and email(s) to send them an email invitation to join your workspace:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/workspace-settings/members-tab.html#troubleshooting": {
                "title": "Troubleshooting ​",
                "content": "A few things to keep in mind:\n1- Guests will not receive an invitation if the invite was sent to an email address without a WeWeb agency partner program\n2- If you close the popup before clicking the Invite button, the invitation(s) will not go through.\n3- To join your workspace, new members and guests should validate the invitation by clicking the link they receive by email.\nWhen someone has received but not activated their invitation, you'll see a Pending label next to their name on the right. You can resend or revoke the invitation by clicking on the three dots on the left of their name:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/pages/dynamic-page-metadata.html",
        "page_title": "Dynamic page metadata | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/pages/dynamic-page-metadata.html#use-case": {
                "title": "Use case ​",
                "content": "When creating dynamic pages in WeWeb, such as www.myapp.com/article/1 , all pages share the same metadata configured in the Editor:\nHowever, depending on your use case, you may need different metadata (title, description, keywords, and thumbnails) for each page based on the URL parameter (e.g. for example a unique blog article slug, product id, or event id).\nIn the videos below, we'll show you how to deploy dynamic metadata for your dynamic collection pages in a way that follows best-in-class SEO standards.\nWARNING This is an advanced technical workaround for cases where you don't want to use static collections. Since this isn't WeWeb's primary use case, we don't provide official support for this implementation.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/dynamic-page-metadata.html#benefits-and-pre-requisites": {
                "title": "Benefits and pre-requisites ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/dynamic-page-metadata.html#weweb-setup": {
                "title": "WeWeb setup ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/dynamic-page-metadata.html#backend-setup": {
                "title": "Backend setup ​",
                "content": "TIP In the video above, we are using Xano as an example but similar logic applies no matter what backend you are working with. What's important is that you have an API endpoint that returns page metadata in the following format: json { \"title\" : \"Festival\" , \"description\" : \"Test Our annual festival is back, promising an array of activities for every age and interest. From thrilling amusement rides and live performances to a marketplace brimming with handcrafted goods, there's joy and discovery around every corner. Learn from artisans during workshops, indulge in diverse culinary delights, and immerse yourself in the festive atmosphere that celebrates our community's spirit.\" , \"image\" : \"https://xeo6-2sgh-ehgj.n7.xano.io/vault/UUJkO96O/eQbZuT4a7I7Iks60ScIyEXlKZ-s/u16buw../hanny-naibaho-aWXVxy8BSzc-unsplash.jpg\" , \"keywords\" : \"festival music live\" }",
                "code_snippets": [
                    {
                        "code": "{\n  \"title\": \"Festival\",\n  \"description\": \"Test Our annual festival is back, promising an array of activities for every age and interest. From thrilling amusement rides and live performances to a marketplace brimming with handcrafted goods, there's joy and discovery around every corner. Learn from artisans during workshops, indulge in diverse culinary delights, and immerse yourself in the festive atmosphere that celebrates our community's spirit.\",\n  \"image\": \"https://xeo6-2sgh-ehgj.n7.xano.io/vault/UUJkO96O/eQbZuT4a7I7Iks60ScIyEXlKZ-s/u16buw../hanny-naibaho-aWXVxy8BSzc-unsplash.jpg\",\n  \"keywords\": \"festival music live\"\n}",
                        "language": "unknown"
                    },
                    {
                        "code": "json{\n  \"title\": \"Festival\",\n  \"description\": \"Test Our annual festival is back, promising an array of activities for every age and interest. From thrilling amusement rides and live performances to a marketplace brimming with handcrafted goods, there's joy and discovery around every corner. Learn from artisans during workshops, indulge in diverse culinary delights, and immerse yourself in the festive atmosphere that celebrates our community's spirit.\",\n  \"image\": \"https://xeo6-2sgh-ehgj.n7.xano.io/vault/UUJkO96O/eQbZuT4a7I7Iks60ScIyEXlKZ-s/u16buw../hanny-naibaho-aWXVxy8BSzc-unsplash.jpg\",\n  \"keywords\": \"festival music live\"\n}",
                        "language": "json"
                    }
                ],
                "images": [],
                "tips": [
                    "TIP In the video above, we are using Xano as an example but similar logic applies no matter what backend you are working with. What's important is that you have an API endpoint that returns page metadata in the following format: json { \"title\" : \"Festival\" , \"description\" : \"Test Our annual festival is back, promising an array of activities for every age and interest. From thrilling amusement rides and live performances to a marketplace brimming with handcrafted goods, there's joy and discovery around every corner. Learn from artisans during workshops, indulge in diverse culinary delights, and immerse yourself in the festive atmosphere that celebrates our community's spirit.\" , \"image\" : \"https://xeo6-2sgh-ehgj.n7.xano.io/vault/UUJkO96O/eQbZuT4a7I7Iks60ScIyEXlKZ-s/u16buw../hanny-naibaho-aWXVxy8BSzc-unsplash.jpg\" , \"keywords\" : \"festival music live\" }"
                ]
            },
            "https://docs.weweb.io/pages/dynamic-page-metadata.html#cloudflare-setup": {
                "title": "Cloudflare setup ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/dynamic-page-metadata.html#github-setup": {
                "title": "GitHub setup ​",
                "content": "Here's the link to the GitHub repository you'll need to fork as described in the video below:\nWARNING Since we first recorded the video above, we updated the worker to support dynamic metadata on multiple pages, not just one. This changes how you work with the config file of the worker . In the first version of the worker shown in the video above, the patterns variable of the worker expected an object. Now, it expects an array of objects. In the example below, we are configuring dynamic metadata for an event page and a team profile page: js export const config = { domainSource: \"https://f69a71f6-9fd8-443b-a040-78beb5d404d4.weweb-preview.io\" , // Your WeWeb app preview link patterns: [ { pattern: \"/event/[^/]+\" , metaDataEndpoint: \"https://xeo6-2sgh-ehgj.n7.xano.io/api:8wD10mRd/event/{id}/meta\" }, { pattern: \"/team/profile/[^/]+\" , metaDataEndpoint: \"https://xeo6-2sgh-ehgj.n7.xano.io/api:LjwxezTv/team/profile/{profile_id}/meta\" } // Remove or add more patterns and their metadata endpoints as needed ] }; This means that, even if you are only setting up dynamic metadata on one page, the patterns variable should be an array with one object inside. In the example below, we are configuring dynamic metadata for only one page: js export const config = { domainSource: \"https://f69a71f6-9fd8-443b-a040-78beb5d404d4.weweb-preview.io\" , // Your WeWeb app preview link patterns: [ { pattern: \"/event/[^/]+\" , metaDataEndpoint: \"https://xeo6-2sgh-ehgj.n7.xano.io/api:8wD10mRd/event/{id}/meta\" } // Add more patterns and their metadata endpoints as needed ] };",
                "code_snippets": [
                    {
                        "code": "export const config = {\n  domainSource: \"https://f69a71f6-9fd8-443b-a040-78beb5d404d4.weweb-preview.io\", // Your WeWeb app preview link\n  patterns: [\n      {\n          pattern: \"/event/[^/]+\",\n          metaDataEndpoint: \"https://xeo6-2sgh-ehgj.n7.xano.io/api:8wD10mRd/event/{id}/meta\"\n      },\n      {\n          pattern: \"/team/profile/[^/]+\",\n          metaDataEndpoint: \"https://xeo6-2sgh-ehgj.n7.xano.io/api:LjwxezTv/team/profile/{profile_id}/meta\"\n      }\n      // Remove or add more patterns and their metadata endpoints as needed\n  ]\n};",
                        "language": "unknown"
                    },
                    {
                        "code": "export const config = {\n  domainSource: \"https://f69a71f6-9fd8-443b-a040-78beb5d404d4.weweb-preview.io\", // Your WeWeb app preview link\n  patterns: [\n      {\n          pattern: \"/event/[^/]+\",\n          metaDataEndpoint: \"https://xeo6-2sgh-ehgj.n7.xano.io/api:8wD10mRd/event/{id}/meta\"\n      }\n      // Add more patterns and their metadata endpoints as needed\n  ]\n};",
                        "language": "unknown"
                    },
                    {
                        "code": "jsexport const config = {\n  domainSource: \"https://f69a71f6-9fd8-443b-a040-78beb5d404d4.weweb-preview.io\", // Your WeWeb app preview link\n  patterns: [\n      {\n          pattern: \"/event/[^/]+\",\n          metaDataEndpoint: \"https://xeo6-2sgh-ehgj.n7.xano.io/api:8wD10mRd/event/{id}/meta\"\n      },\n      {\n          pattern: \"/team/profile/[^/]+\",\n          metaDataEndpoint: \"https://xeo6-2sgh-ehgj.n7.xano.io/api:LjwxezTv/team/profile/{profile_id}/meta\"\n      }\n      // Remove or add more patterns and their metadata endpoints as needed\n  ]\n};",
                        "language": "js"
                    },
                    {
                        "code": "jsexport const config = {\n  domainSource: \"https://f69a71f6-9fd8-443b-a040-78beb5d404d4.weweb-preview.io\", // Your WeWeb app preview link\n  patterns: [\n      {\n          pattern: \"/event/[^/]+\",\n          metaDataEndpoint: \"https://xeo6-2sgh-ehgj.n7.xano.io/api:8wD10mRd/event/{id}/meta\"\n      }\n      // Add more patterns and their metadata endpoints as needed\n  ]\n};",
                        "language": "js"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/dynamic-page-metadata.html#deploy-redirect": {
                "title": "Deploy & redirect ​",
                "content": "We're now ready to deploy our Cloudflare worker and redirect it to our custom domain name:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/dynamic-page-metadata.html#final-checks": {
                "title": "Final checks ​",
                "content": "Alright, your app should be ready to go now. This tutorial being on the more technical side, don't hesitate to reach out in the WeWeb Community if you get stuck. We'll do our best to help out.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/websockets/supabase-realtime/subscribe-channel.html",
        "page_title": "Subscribe & Unsubscribe to Supabase channels | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/websockets/supabase-realtime/subscribe-channel.html#why-subscribing-matters": {
                "title": "Why subscribing matters ​",
                "content": "If you want users of your app to be able to listen and react to events in a realtime channel, you first need to make them subscribe to the channel.\n✈️ Realtime events are like flying objects ☄️ You can picture a user subscribing to a realtime channel as someone who is entering a room where a bunch of objects (events) are flying around. If the user is in the room, they can see and intercept these objects. If the user is outside the room (unsubscribed), they can't see or react to anything.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "✈️ Realtime events are like flying objects ☄️ You can picture a user subscribing to a realtime channel as someone who is entering a room where a bunch of objects (events) are flying around. If the user is in the room, they can see and intercept these objects. If the user is outside the room (unsubscribed), they can't see or react to anything."
                ]
            },
            "https://docs.weweb.io/websockets/supabase-realtime/subscribe-channel.html#use-cases": {
                "title": "Use cases ​",
                "content": "A few use cases:\nWhen user clicks on help icon , they subscribe to the chat channel where instant messages come and go. When user signs up to the app, they subscribe to the releases channel where new events are created every time a new product update is inserted in the database. When user opens a tab , they subscribe to the cursor channel where new events are created with their mouse position every time their mouse moves.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/supabase-realtime/subscribe-channel.html#two-types-of-channels": {
                "title": "Two types of channels ​",
                "content": "There are two types of Supabase realtime channels users can subscribe to:\nBroadcast : Send ephemeral messages from client to clients with low latency. For example, to track users' cursors in a collaborative tool. Postgres Changes : Listen to Postgres database changes and send them to authorized clients. For example, to notify users of a new comment in one of their projects.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/supabase-realtime/subscribe-channel.html#subscribe-to-broadcast": {
                "title": "Subscribe to broadcast ​",
                "content": "There are use cases where you don't need to store realtime events in a database. For example, live collaboration tools or online games that track every active user's cursor position.\nFor users to send and receive realtime cursor positions, they first need to subscribe to a realtime Broadcast channel:\nThe Channel name can be anything you want. Here we named it canvas . It's the name we will need to reference later when we want to send and receive messages in this channel.\nThe Type is Broadcast because we are working with ephemereal events that don't need to be stored in our database.\nWe chose to subscribe to only the cursor events because we only want to listen to this specific event type but we could leave the input empty or type in * to subscribe to all the events that go through this channel. What you choose will depend on your use case.\nThe Listen self and Listen presence can be toggled on or off depending on your preferences and use case.\nLearn more about these options here in the Supabase user docs.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/supabase-realtime/subscribe-channel.html#next-steps": {
                "title": "Next steps ​",
                "content": "Once we have subscribed to a Broadcast channel, we can send, receive and react to realtime events from that channel .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/supabase-realtime/subscribe-channel.html#subscribe-to-db-changes": {
                "title": "Subscribe to db changes ​",
                "content": "WARNING Users can only subscribe to a channel that listens to database changes if you have enabled realtime on the table that you want to monitor:\nIn many cases, you want users to be able to receive and react to realtime changes in a database. For example, when someone at your company adds a record in the releases table of your database, you want to let users know there's a new product update.\nFor users to send and receive realtime database events, they first need to subscribe to a Database changes channel:\nIn the example above, you can see the user is subscribing to:\nAll events in the releases table that can be found in the public schema of my Supabase db\nThe Channel name can be anything you want. Here we named it releases . It's the name we will need to reference later when we want to send and receive events in this channel.\nTIP We chose to subscribe to All events but we could have decided to subscribe only to INSERT events for example. What you choose will depend on your use case. We could also use the Filter input to refine the subscription further. Learn more about filtering for specific changes here .\nThe Listen presence can be toggled on or off depending on your preferences and use case.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/supabase-realtime-enable-table.1MRW6cwi.png"
                ],
                "tips": [
                    "TIP We chose to subscribe to All events but we could have decided to subscribe only to INSERT events for example. What you choose will depend on your use case. We could also use the Filter input to refine the subscription further. Learn more about filtering for specific changes here ."
                ]
            },
            "https://docs.weweb.io/websockets/supabase-realtime/subscribe-channel.html#next-steps-1": {
                "title": "Next steps ​",
                "content": "Once we have subscribed to a Database changes channel, we can receive and react to realtime events from that channel .",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/stop-click-propagation.html",
        "page_title": "Stop click propagation | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/stop-click-propagation.html#what-is-event-bubbling": {
                "title": "What is event bubbling? ​",
                "content": "Imagine you have a button inside a clickable card. When you click the button, by default in JavaScript, the click event \"bubbles up\" - meaning it triggers the button's click event, then the card's click event too. This bubbling is a core JavaScript behavior, like a ripple in water that spreads outward affecting larger and larger areas.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/stop-click-propagation.html#the-problem": {
                "title": "The problem ​",
                "content": "This natural JavaScript bubbling behavior can cause unintended effects. For example:\nYou click a \"Delete\" button inside a clickable card The button click deletes an item But then the click also bubbles up to the card, which might navigate to a different page Now you have unwanted navigation happening after your delete action",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/stop-click-propagation.html#the-solution": {
                "title": "The solution ​",
                "content": "The Stop propagation action stops this default JavaScript event bubbling. It tells the event \"stop right here, don't spread any further.\" So in our example:\nUser clicks the Delete button Delete action happens Stop propagation prevents the click from reaching the card No unwanted navigation occurs\nTIP This action executes both: Event.stopPropagation() : stops the event from bubbling up Event.preventDefault() : prevents the default browser behavior Set this action as the first action in your workflow for best results .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP This action executes both: Event.stopPropagation() : stops the event from bubbling up Event.preventDefault() : prevents the default browser behavior Set this action as the first action in your workflow for best results ."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/data-sources/airtable-data.html",
        "page_title": "Airtable data source | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/data-sources/airtable-data.html#add-the-airtable-plugin": {
                "title": "Add the Airtable plugin ​",
                "content": "In order to get data from Airtable, you first need to add Airtable as a data source in WeWeb:\nGo to Plugins Browse through Data sources Select Airtable Add your personal access token Make sure to click Continue to add the plugin Then Add a collection of Airtable data",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/airtable-data.html#access-token-vs-api-key": {
                "title": "Access token vs API key ​",
                "content": "WARNING In 2022, Airtable shut down API keys. You now have to enter your Personal Access Token to connect your Airtable account to WeWeb.\nYou can create Airtable access tokens here.\nMake sure to set it up with the access to the base you want to use in WeWeb, and the proper scopes:\ndata.records:read so that your app can read data from Airtable data.records:write so that your app can write data to Airtable schema.bases:read so that your app can read the schema of your Airtable base and know which types to use in workflows' actions",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/airtable-data.html#access-token-vs-token-id": {
                "title": "Access token vs token ID ​",
                "content": "WARNING When configuring the plugin in WeWeb, make sure you are adding the Airtable access token itself and not the token id of the access token.\nWhen configuring the Airtable plugin in WeWeb, a common mistake is to add the TOKEN ID of an Airtable access token:\nThat won’t work.\nYou need to make sure you copy the access token itself when you first create it:\nYou won’t be able to see it again so if you didn’t copy the Personal Access Token when you first created a token, you might need to create a new one.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/airtable-data.html#create-a-collection": {
                "title": "Create a collection ​",
                "content": "Once you’ve connected an Airtable account to WeWeb, you will be able to create Airtable data collections in WeWeb:\nTIP To build dynamic web applications, we highly recommend creating Dynamic collections. However, if you run into Airtable rate API limits, you may want to consider working with a Cached collection instead. Learn more about WeWeb collection modes .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP To build dynamic web applications, we highly recommend creating Dynamic collections. However, if you run into Airtable rate API limits, you may want to consider working with a Cached collection instead. Learn more about WeWeb collection modes ."
                ]
            },
            "https://docs.weweb.io/plugins/data-sources/airtable-data.html#select-data-to-fetch": {
                "title": "Select data to fetch ​",
                "content": "Once you've selected a source for your collection, you will get access to the Configuration tab, you can select very precisely what data you want to fetch from Airtable.\nRequired fields include the base, table, view, and fields you want to fetch:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/airtable-data.html#filters-by-formula": {
                "title": "Filters by formula ​",
                "content": "SECURITY WARNING Filters by formula are a performance tool, NOT a security or privacy tool. Indeed, filters by formula can help you optimize the performance of your web app by optimizing the data you load on the page. However, keep in mind that the query parameters are visible in the API call that is made to Airtable by the frontend. This is not specific to WeWeb. It is how Airtable's API currently works. If you need security: make sure to use a backend with the capacity to enable authentication and access control checks on API endpoints (e.g. Xano) or RLS on the database (e.g. Supabase). Learn more about adding security to the web-apps you build with no-code tools .\nWith filters by formula, you can query data with filters so that Airtable only sends specific data to your WeWeb frontend.\nThe filters available are documented in Airtable's own API documentation .\nFor example, you can user a filter by formula to search a text through a list of items: SEARCH(stringToFind, whereToSearch)\nIn WeWeb, it would look something like this: 'SEARCH(\" ' + variable + ' \", Car_name)'\nThe tricky part here will be getting the quotes right because the Airtable API expects the search term to be in between quotes like it is here:\nIndeed, in the Current value displayed in WeWeb, you can see the entire formula is in between quotes and so is the search term \"Volk\". That is the data format expected by Airtable's API. Make sure to stick to it.\nWARNING Filters by formula are a performance tool, not a security or privacy tool. Indeed, filters by formula can help you optimize the performance of your web app by optimizing the data you load on the page. However, keep in mind that the query parameters are visible in the API call that is made to Airtable by the frontend. This is not specific to WeWeb. It is how Airtable's API currently works. If you need security: make sure to use a backend with the capacity to enable authentication and access control checks on API endpoints (e.g. Xano) or RLS on the database (e.g. Supabase). Learn more about adding security to the web-apps you build with no-code tools .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/airtable-data.html#fetch-data": {
                "title": "Fetch data ​",
                "content": "Once you've configured the data you want to fetch from Airtable, you can decide if you want to fetch this collection automatically and if you want to preserve it on navigation:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/airtable-data.html#fetch-automatically": {
                "title": "Fetch automatically ​",
                "content": "When Fetch this collection automatically is enabled, the collection will automatically be fetched when a page that contains the collection is loaded in the user's navigator.\nSometimes, you want to disable this option to have finer control of where and when the data is fetched.\nFor example, you might want to fetch a collection when a user clicks on a specific button in your app.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/airtable-data.html#preserve-on-navigation": {
                "title": "Preserve on navigation ​",
                "content": "When Preserve on navigation is enabled, the collection is only fetched the first time a user loads a page with that collection.\nSometimes, you want to disable this option to have finer control of where and when the data is preserved in the user's navigator.\nFor example, you might want to make sure that a user's data is not preserved on navigation so that, if two users login from the same computer, user A can't see user B's data after they've logged out.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/airtable-data.html#sort-filter-and-paginate-the-data-in-weweb": {
                "title": "Sort, filter, and paginate the data in WeWeb ​",
                "content": "At this stage, you have fetched the data from Airtable. It is available for use in WeWeb.\nAny sort, filter, or pagination you add here is done in the frontend. This means that, even if the data is not displayed on the page, it is accessible in the user's browser. Learn when to use frontend vs backend filters .\nLearn how to display Airtable collection data in WeWeb",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/airtable-data.html#update-airtable-data": {
                "title": "Update Airtable data ​",
                "content": "Use case: when a customer returns a rental car, you want employees at the rental location to update the mileage of that car.\nIn order to do this, you will have to create a workflow that allows users to create, update, or delete a record in Airtable:\nOnce you have chosen the type of action you want to trigger, you will be invited to send information to Airtable:\nIn the example above, you can see:\nwe will update the record in the Fleet - Dynamic collection that has the same id as the id in our selectedLine variable we will update the Mileage column with the the 506 value\nWARNING If the field in Airtable is a number, make sure to send a number. If you try sending a text to a number field, you will get an error. If you try sending a number to a multi-select field, you will also get an error. Learn more about variables and data types .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/airtable-data.html#partial-update": {
                "title": "Partial update ​",
                "content": "If you want to update specific fields in Airtable and not an entire record, make sure to only select the fields you want to update.\nIn the example below, you can see (on the right) that we only selected the Mileage field. As a result, when we test our action, we can see in the payload sent to Airtable (on the left) that we are only sending data to update the Mileage field of the record:\nIf we select all the fields without filling in values, we are telling Airtable, please replace the values in these columns with null .\nIn the example below, the columns Car_name , Image , PDF , etc. will now be empty for that record in Airtable because we told Airtable the value for these fields are null :",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/airtable-data.html#host-airtable-images-and-files-on-a-cdn": {
                "title": "Host Airtable images and files on a CDN ​",
                "content": "It is no longer possible to use Airtable's attachment hosting because links will only last 2 hours before they need to be regenerated.\nWhat's the impact on your WeWeb projects?\nWhen using dynamic collections, you can still use Airtable attachments as image or file URLs in WeWeb because the links are fetched when you fetch a collection (on page load by default or when you trigger the fetch in a Workflow).\nHowever, if you are using static or cached collections, you'll need to upload your Airtable attachments to a CDN like Cloudflare or AWS S3, and use the links from the CDN in WeWeb.\nWe realize it's hard tedious work, so we made a small tutorial on how to fix this automatically on Airtable by using Xano to host images, and a small Airtable automation.\nStep 1: make sure you've got a Xano instance and an endpoint to upload content .\nStep 2: in Airtable, create a new text column on your table that'll be used to store the images' URLs in the CDN:\nStep 3: in Airtable, create an automation that is triggered \"When record updated\" and watch your former image/file column:\nStep 4: add an action to run a script and copy/paste this script:\njavascript const xanoBaseUrl = 'https://xc0b-vcze-d4we.n7.xano.io' // Edit this variable to match your Xano instance subdomain let table = base. getTable ( 'property' ) let config = input. config () let recordId = config.updatedRecordId let record = await table. selectRecordAsync (recordId, {fields: table.fields}) let images = record. getCellValue ( 'images' ) // Update this value to match your image/file attachment column let imagesUrlCdn = [] for ( let image of images) { let imageUrl = image.url let result = await fetch (xanoBaseUrl + '/api:SJOHbPGi/upload/image' , { // Update this path to match your Xano upload file endpoint method: 'POST' , headers: { 'Accept' : 'application/json' , 'Content-Type' : 'application/json' }, body: JSON . stringify ({ 'content' : imageUrl}) }) let response = await result. json () let imageUrlCdn = xanoBaseUrl + response.path imagesUrlCdn. push (imageUrlCdn) } await table. updateRecordAsync (record, { 'images_urls' : imagesUrlCdn. join () // Update the key to match your newsly created URL column })\nStep 5: replace xanoBaseUrl by your own Xano instance and change the column names in the script to match the ones in your table (they are marked with comments in the script).\nStep 6: activate the automation in Airtable. Now, every time an attachment is added to the column in Airtable, the newly created URL column will display the CDN's URLs, joined by a comma (\",\").\nTo use the images in WeWeb, simply use this newly created column as your images source inside your project (you can get back the URLs by splitting the string on the commas, like so):",
                "code_snippets": [
                    {
                        "code": "const xanoBaseUrl = 'https://xc0b-vcze-d4we.n7.xano.io' // Edit this variable to match your Xano instance subdomain\nlet table = base.getTable('property')\n\nlet config = input.config()\nlet recordId = config.updatedRecordId\n\nlet record = await table.selectRecordAsync(recordId, {fields: table.fields})\n\nlet images = record.getCellValue('images') // Update this value to match your image/file attachment column\nlet imagesUrlCdn = []\n\nfor (let image of images) {\n    let imageUrl = image.url\n    let result = await fetch(xanoBaseUrl + '/api:SJOHbPGi/upload/image', { // Update this path to match your Xano upload file endpoint\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({'content': imageUrl})\n    })\n    let response = await result.json()\n    let imageUrlCdn = xanoBaseUrl + response.path\n    imagesUrlCdn.push(imageUrlCdn)\n}\n\nawait table.updateRecordAsync(record, {\n    'images_urls': imagesUrlCdn.join() // Update the key to match your newsly created URL column\n})",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/pages/page-metadata.html",
        "page_title": "Page metadata | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/pages/page-metadata.html#google-and-search-engines": {
                "title": "Google and search engines ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/page-metadata.html#title-tag": {
                "title": "Title Tag ​",
                "content": "The Title Tag helps Google understand your page's main topic and determines how your page appears in search results. It's the first thing both Google and users see, serving as the clickable headline in search results. This also determines the title displayed in the browser tab.\nTIP Include your main keyword near the beginning Keep it under 60 characters to avoid truncation in search results Make it descriptive but concise Make it unique for each page Write for humans first - make it compelling and clickable",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Include your main keyword near the beginning Keep it under 60 characters to avoid truncation in search results Make it descriptive but concise Make it unique for each page Write for humans first - make it compelling and clickable"
                ]
            },
            "https://docs.weweb.io/pages/page-metadata.html#meta-description": {
                "title": "Meta description ​",
                "content": "The meta description provides a brief summary of your page content that appears beneath the title in search results. While not directly used for ranking, it acts as a \"pitch\" to users, helping them decide whether to click on your result. A compelling meta description that accurately previews your page content can significantly increase click-through rates from search results.\nTIP Length: Keep it between 150-160 characters to avoid truncation in search results Content: Include your main keywords naturally, accurately describe the page content Action: Include a clear call-to-action when appropriate Unique: Write different meta descriptions for each page Style: Write in active voice and make it compelling to click",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Length: Keep it between 150-160 characters to avoid truncation in search results Content: Include your main keywords naturally, accurately describe the page content Action: Include a clear call-to-action when appropriate Unique: Write different meta descriptions for each page Style: Write in active voice and make it compelling to click"
                ]
            },
            "https://docs.weweb.io/pages/page-metadata.html#meta-keywords": {
                "title": "Meta keywords ​",
                "content": "Meta keywords are searchable terms you can add to your page. While they don't affect rankings on major search engines like Google, they can help with internal site search and are sometimes used by specialized industry tools. For best SEO results, focus instead on creating good titles, descriptions, and content with naturally integrated keywords.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/page-metadata.html#hide-page": {
                "title": "Hide page ​",
                "content": "If you check this option to hide the page in Google and other search engines, the page will not be indexed by search engines.\nTIP Indexing is the process where search engines store and organize web pages after scanning their content. This allows them to quickly retrieve relevant pages when users search. If a page isn’t indexed, it won’t appear in search results.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Indexing is the process where search engines store and organize web pages after scanning their content. This allows them to quickly retrieve relevant pages when users search. If a page isn’t indexed, it won’t appear in search results."
                ]
            },
            "https://docs.weweb.io/pages/page-metadata.html#favicon": {
                "title": "Favicon ​",
                "content": "This is the icon that will be displayed in the browser tab.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/page-metadata.html#technical-specifications": {
                "title": "Technical specifications: ​",
                "content": "Must be square (1:1 aspect ratio) Minimum size: 8×8 pixels Recommended size: At least 48×48 pixels Any valid favicon format is accepted URL must be stable (avoid frequent changes)\nTIP The favicon can only be set on your home page and will apply to all pages of your web app. Having a single source of truth (the home page) makes it easier for Google to track and update favicon information. This also improves crawling efficiency, as Google's crawlers don't need to check every page for favicon information.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP The favicon can only be set on your home page and will apply to all pages of your web app. Having a single source of truth (the home page) makes it easier for Google to track and update favicon information. This also improves crawling efficiency, as Google's crawlers don't need to check every page for favicon information."
                ]
            },
            "https://docs.weweb.io/pages/page-metadata.html#open-graph-social-metadata": {
                "title": "Open graph (Social metadata) ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/page-metadata.html#open-graph-image": {
                "title": "Open Graph image ​",
                "content": "This is the image that will be displayed when you share the page on social media. It should be in a specific format, such as aspect ratio: 1.91:1 and minimum dimensions: 1200x630 pixels. For further details, click here .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/page-metadata.html#open-graph-title": {
                "title": "Open Graph Title ​",
                "content": "This is the title that will be displayed when you share the page on social media. More info on how to set it up here .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/page-metadata.html#open-graph-description": {
                "title": "Open Graph Description ​",
                "content": "This is the description that will be displayed when you share the page on social media. More info on how to set it up here .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/page-metadata.html#structured-data": {
                "title": "Structured data ​",
                "content": "Structured data is like a special label system for your website that helps search engines (like Google) better understand what's on your pages. Think of it as giving Google a clear set of instructions about your content - whether it's a product page, an article, a recipe, or just your company information.\nSearch engines use structured data to create rich descriptions that display extra details like ratings, images, or prices, ultimately increasing the chances of users clicking on your site.\nIn WeWeb, structured data can be added through the page metadata settings. The format should be JSON-LD, which might look intimidating but it's just a standardized way to write information.\nHere's what you need to know:\nIt must be valid JSON-LD format The content should match what's actually visible on your page\nFor example, if you're adding structured data for your company page, you might include:\nYour company name Address Contact information Type of business Logo\ntypescript { \"@context\" : \"https://schema.org\" , \"name\" : \"Sweet Dreams Bakery\" , \"address\" : { \"@type\" : \"PostalAddress\" , \"streetAddress\" : \"123 Main Street\" , \"addressLocality\" : \"San Francisco\" , \"addressRegion\" : \"CA\" , \"postalCode\" : \"94105\" , \"addressCountry\" : \"US\" }, \"telephone\" : \"+1-555-123-4567\" , \"email\" : \"hello@sweetdreamsbakery.com\" , \"@type\" : \"Bakery\" , \"image\" : \"https://sweetdreamsbakery.com/logo.png\" }\nTIP Structured data should match the main content of each specific page. If it's a recipe page, you'll want to include recipe details (cooking time, ingredients, etc.) If it's a product page, you'll include product information (price, availability, etc.) If it's a business contact page, that's when you'd include business details (address, phone, etc.)",
                "code_snippets": [
                    {
                        "code": "{\n  \"@context\": \"https://schema.org\",\n  \"name\": \"Sweet Dreams Bakery\",\n  \"address\": {\n    \"@type\": \"PostalAddress\",\n    \"streetAddress\": \"123 Main Street\",\n    \"addressLocality\": \"San Francisco\",\n    \"addressRegion\": \"CA\",\n    \"postalCode\": \"94105\",\n    \"addressCountry\": \"US\"\n  },\n  \"telephone\": \"+1-555-123-4567\",\n  \"email\": \"hello@sweetdreamsbakery.com\",\n  \"@type\": \"Bakery\",\n  \"image\": \"https://sweetdreamsbakery.com/logo.png\"\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": [
                    "TIP Structured data should match the main content of each specific page. If it's a recipe page, you'll want to include recipe details (cooking time, ingredients, etc.) If it's a product page, you'll include product information (price, availability, etc.) If it's a business contact page, that's when you'd include business details (address, phone, etc.)"
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/data-sources/algolia.html",
        "page_title": "Algolia data source | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/data-sources/algolia.html#configure-the-algolia-plugin": {
                "title": "Configure the Algolia plugin ​",
                "content": "To read Algolia data in WeWeb, you first need to add the Algolia plugin:\nOnce you added it to your project, you'll be invited to copy/paste your Algolia Application ID, Search-Only API Key and Admin API Key in WeWeb:\nThese are available in the Algolia dashboard under settings > API keys :",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/algolia.html#add-an-algolia-collection-in-weweb": {
                "title": "Add an Algolia Collection in WeWeb ​",
                "content": "Algolia's whole purpose is to efficiently full-text search among a set of records. So, the first thing to do inside the WeWeb app is to add a search input that we'll use later to search the Algolia collection.\nInside WeWeb, go to the Add panel and drag and drop a Search bar to your app:\nNow, time to add a new collection. Click on Data , then on + New , you'll be invited to give your collection a name and choose Algolia as a data source:\nIn the configuration panel, select the Algolia index you want to use for your collection. Also, select the search bar you just added before and bind it as the collection search parameter:\nAdd a pagination (optional) and finish by fetching your collection. If everything went fine, the records should appear like so:\nIf not, double-check your Algolia configuration!",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/algolia.html#display-algolia-data-in-weweb": {
                "title": "Display Algolia data in WeWeb ​",
                "content": "Assuming you were able to fetch data from Algolia in a WeWeb Collection, you'll be able to bind the data from that collection on your pages.\nIn the example below, we chose to display the Aloplia CRM index (containing a logo, name, job title, company and industry) in a Data Grid element :\n🔥 Pro Tip 🔥",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/algolia.html#search-algolia-data-inside-weweb": {
                "title": "Search Algolia Data inside WeWeb ​",
                "content": "Algolia's whole purpose is to benefit from its powerful search. In order to do so, first configure your Algolia search in your Algolia index dashboard .\nOnce the search is setup, we only need one more thing to do inside WeWeb.\nRemember the search input we drag and dropped before?\nWe need to select it and add a on change workflow, that will trigger a fetch collection action on the Algolia collection:\nAnd voilà! You now have a fully working Algolia search inside your WeWeb app 👏",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/libraries/figma-styles-import.html",
        "page_title": "Import Figma styles | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/libraries/figma-styles-import.html#add-weweb-plugin-in-figma": {
                "title": "Add WeWeb plugin in Figma ​",
                "content": "In order to import styles from Figma or any other source, you have to install our plugin in Figma :\nLOOKING TO IMPORT A FIGMA DESIGN? The present article is about importing Figma styles to a WeWeb library. With our plugin, you can also import Figma designs on a WeWeb page. Learn how to import a Figma design .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "LOOKING TO IMPORT A FIGMA DESIGN? The present article is about importing Figma styles to a WeWeb library. With our plugin, you can also import Figma designs on a WeWeb page. Learn how to import a Figma design ."
                ]
            },
            "https://docs.weweb.io/libraries/figma-styles-import.html#export-figma-style": {
                "title": "Export Figma style ​",
                "content": "In your Figma project, open the plugin and select whether you want to import colors or typography:\nClicking on generate will store the exported styles to your clipboard.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/figma-styles-import.html#import-style-to-weweb": {
                "title": "Import style to WeWeb ​",
                "content": "To import the copied styles to WeWeb, navigate to the Library panel and click on the Figma icon.\nAll you have to do next is paste your output from Figma to the input and click on Import styles :\nAfter you receive message of a successful import, you will find your styles in the library:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/figma-styles-import.html#importing-from-other-sources": {
                "title": "Importing from other sources ​",
                "content": "If importing typography from other sources, input needs to be formatted as displayed in the sample input below.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/figma-styles-import.html#typography": {
                "title": "Typography ​",
                "content": "json [ { \"type\" : \"typo\" , \"name\" : \"Typography/Heading 1\" , \"fontSize\" : \"64px\" , \"lineHeight\" : \"72px\" , \"fontWeight\" : \"Medium\" }, { \"type\" : \"typo\" , \"name\" : \"Typography/Heading 2\" , \"fontSize\" : \"48px\" , \"lineHeight\" : \"56px\" , \"fontWeight\" : \"Semi Bold\" }, { \"type\" : \"typo\" , \"name\" : \"Typography/Heading 3\" , \"fontSize\" : \"32px\" , \"lineHeight\" : \"40px\" , \"fontWeight\" : \"Medium\" } ]",
                "code_snippets": [
                    {
                        "code": "[\n    {\n        \"type\": \"typo\",\n        \"name\": \"Typography/Heading 1\",\n        \"fontSize\": \"64px\",\n        \"lineHeight\": \"72px\",\n        \"fontWeight\": \"Medium\"\n    },\n    {\n        \"type\": \"typo\",\n        \"name\": \"Typography/Heading 2\",\n        \"fontSize\": \"48px\",\n        \"lineHeight\": \"56px\",\n        \"fontWeight\": \"Semi Bold\"\n    },\n    {\n        \"type\": \"typo\",\n        \"name\": \"Typography/Heading 3\",\n        \"fontSize\": \"32px\",\n        \"lineHeight\": \"40px\",\n        \"fontWeight\": \"Medium\"\n    }\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/figma-styles-import.html#colors": {
                "title": "Colors ​",
                "content": "json [ { \"type\" : \"color\" , \"name\" : \"Light/Background/bg\" , \"value\" : \"#ffffff\" }, { \"type\" : \"color\" , \"name\" : \"Light/Background/bg-secondary\" , \"value\" : \"#f7f7f7\" }, { \"type\" : \"color\" , \"name\" : \"Light/Background/bg-tertiary\" , \"value\" : \"#ebebeb\" } ]",
                "code_snippets": [
                    {
                        "code": "[\n    {\n        \"type\": \"color\",\n        \"name\": \"Light/Background/bg\",\n        \"value\": \"#ffffff\"\n    },\n    {\n        \"type\": \"color\",\n        \"name\": \"Light/Background/bg-secondary\",\n        \"value\": \"#f7f7f7\"\n    },\n    {\n        \"type\": \"color\",\n        \"name\": \"Light/Background/bg-tertiary\",\n        \"value\": \"#ebebeb\"\n    }\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/auth-systems/xano-auth.html",
        "page_title": "Xano authentication | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#xano-pre-requisites": {
                "title": "Xano pre-requisites ​",
                "content": "In order to set up Xano authentication in your WeWeb project, there are three prerequisites:\nyou already have an account with Xano ✅ you have a user table in your Xano database with at least two fields: login and password ✅ you have the three authentication API endpoints in Xano ✅\nSome Xano templates include a user table and the three authentication API endpoints.\nHowever, if you don't have both in your Xano workspace, you'll need to set them up manually.\nHere's how.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#user-table-in-xano": {
                "title": "User table in Xano ​",
                "content": "Your user table should include at least two fields:\none field where you store the login, for example, a string field with a name or an email field with an email address, and one field of field type password where you store the encrypted password.\nTIP Choose the field type password when creating your user table in Xano to ensure that the user input is encrypted when the user first creates an account with your web-app. Hashing passwords is best practice and will ensure that you can use Xano’s authentication API points.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/xano-2.CbTMPcnS.gif"
                ],
                "tips": [
                    "TIP Choose the field type password when creating your user table in Xano to ensure that the user input is encrypted when the user first creates an account with your web-app. Hashing passwords is best practice and will ensure that you can use Xano’s authentication API points."
                ]
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#authentication-endpoints": {
                "title": "Authentication endpoints ​",
                "content": "For Xano authentication to work, you need three API endpoints:\nsignup login me\nIf you’re using a Xano template that includes authentication, you’ll find these endpoints in the API sub-menu.\nOtherwise, you’ll need to create these three endpoints yourself by going to API > Add API Endpoint > Authentication",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#plugin-configuration": {
                "title": "Plugin configuration ​",
                "content": "To add the Xano Auth plugin in WeWeb, go to Plugins > Authentication :\nYou will be invited to provide the following information:\na Xano access token what Xano instance and workspace you want to work with, your Xano custom domain if you have one, the me , login , and signup endpoints from your Xano project, and what 3rd-party providers you want to work with (assuming you have any activated in the Xano workspace you selected)\nWARNING The Metadata API Key field expects the value of the Xano personal access token. Make sure to paste the access token itself, NOT the key ID of the access token: Note: you will only be able to view the access token once, when you first create it. Make sure to copy/paste it there and then or you might have to create a new access token down the line.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/xano-access-token.CFdE1Tbn.png"
                ],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#data-source-branching-optional": {
                "title": "Data source & branching (optional) ​",
                "content": "Depending on your Xano plan, you may have the option to support multiple data sources and branches .\nFor example, you could have a live data source and a test data source:\nIn WeWeb, you could decide to work with different data sources depending on whether you're working:\ninside the WeWeb editor, on the app published in the WeWeb staging environment, or on the published app in production.\nIn the example below, we chose to work with the data from the test data source inside the WeWeb editor, and on the app in staging:\nAs a result, when working in the WeWeb editor or viewing the app published in staging, the data that is displayed will be the data from the test data source in Xano. We will not be able to see or work with the data in the live data source.\nWARNING As per Xano's user documentation , \"it's important to note that a test data source will have exactly the same data schema and structure as your live environment. You cannot change, edit, or delete the schema or database tables in your test data source environment. The test environment allows you to use different data or records so that you can perform tests in your API without affecting your live data.\"\nThe same logic applies if you want to work with different Xano branches. In the example below, we will test the Xano v2 branch in the WeWeb editor and the app we publish on the staging environment but the Xano v1 branch will still be live in our app in production:\nWhen we're ready, we can decide to make the v2 branch live in Xano and update the Xano data source plugin in WeWeb.\nWARNING When working with workflows in WeWeb, we will list all the fields that are available in the LIVE Xano branch, even if you have chosen an EDITING Xano branch for the WeWeb Editor in the Xano data source plugin configuration. To avoid confusion, we recommend that all your Xano branches include the same fields.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#global-headers-optional": {
                "title": "Global headers (optional) ​",
                "content": "If you need to add custom global headers to a Xano call, you can configure these:\nin the Xano data source plugin, in the Xano Auth plugin, at collection level, or at action level when making a request in a workflow.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#define-redirections": {
                "title": "Define redirections ​",
                "content": "Here, you should choose a PUBLIC page where users who are not signed in can be redirected.\nIn the example below, we chose to redirect unauthenticated users to a login page but it could be any page as long as it's a public page:\nWARNING Make sure you redirect unauthenticated users to a public page. If you redirect unauthenticated users to a page that is only accessible to authenticated users, you'll be creating an infinite loop and your app will crash.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#user-role-configuration": {
                "title": "User role configuration ​",
                "content": "PRE-REQUISITE IN XANO In order to gate content in WeWeb based on user roles and permissions, you first need to have information about roles in your Xano database and that information needs to be accessible to WeWeb via API. For example, you could create a role column in your user table in Xano and make it available in the me endpoint so that, when a user logs in to your app, you fetch their role at the same time:\nAssuming you have information about a user's role in Xano and that information is available in the me endpoint, you can tell the Xano Auth plugin in WeWeb where to find that information.\nIn the example below, we see that the user returned by the me endpoint in Xano provides a single role in a single text in the role column:\nSo we tell the Xano Auth plugin in WeWeb that it can find the role of our user in a text column named role :\nWARNING The Role key is case sensitive. If the column name in your backend is Roles , you should type this in exactly: roles won't work. The Role type must match the data type where you store user role(s) in your backend. In the example above, it's a single Text in a column named role but other common use cases could be a List of texts named roles or a List of objects named users .",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/xano-auth8.B06Xt_yD.gif"
                ],
                "tips": [
                    "PRE-REQUISITE IN XANO In order to gate content in WeWeb based on user roles and permissions, you first need to have information about roles in your Xano database and that information needs to be accessible to WeWeb via API. For example, you could create a role column in your user table in Xano and make it available in the me endpoint so that, when a user logs in to your app, you fetch their role at the same time:"
                ]
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#signup-and-login-flows": {
                "title": "Signup and login flows ​",
                "content": "When you add the Xano Auth plugin to a WeWeb project, you will get access to a new Xano Auth category of UI elements in the Add menu:\nThe login and signup forms both include a workflow with login and signup actions respectively but you'll need to adapt it to suit your login and signup flows.\nFor example, if you want to display a modal for users to login, you could add a Change variable value action to close the modal once the login is complete.\nIn the example below, we added a Change page action to redirect the user after they log in:\nWARNING Signup workflows will fail if: the user already exists in the Xano user base, or the password does not match the requirements defined in Xano. Login workflows will fail if: the user does not exist in the Xano user base, or if the password does not match the user's stored password. Learn how to build a nice UX to manage user errors .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#conditional-display": {
                "title": "Conditional display ​",
                "content": "One you've setup user authentication, you'll probably want to display some things conditionally.\nFor example, you'll want to display a logout button when the user is authenticated.\nYou can do this by binding the display of your login and logout buttons to the isAuthenticated variable in the User tab:\nWARNING Conditional display and conditional rendering can help you build a nice user experience but should not be used as a security measure to hide user data. Always make sure only authorized users can access personal information. Learn more about building secure web-apps with WeWeb .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#private-pages": {
                "title": "Private pages ​",
                "content": "By default, once you've added the Xano Auth plugin to your WeWeb project, you'll be able to make pages private.\nYou'll have the option to choose if a page should be accessible to everybody or authenticated users only:\nIf you have gone through the User role configuration step in the Xano Auth plugin, you will also be able to:\nadd user roles in WeWeb (these role names should match the role names you have in Xano), create user groups and decide what role or roles a user needs to be part of that group, and make a page private based on these user groups\nNote that you can also make a page private to a user group at page level:\nWARNING It's important to understand that a user needs to have all the roles listed in the user group. In the example below, the members of the Premium customer user group must have both the Customer and the Premium roles associated with their user profile:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/private-page3.Bq7upkPc.png"
                ],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#fetch-current-user-data": {
                "title": "Fetch Current User Data ​",
                "content": "Once you have setup authentication in your project, you'll probably want to display data that is related to the current user.\nFor example, if you were building a web-app where users can view and download their pay slips, you'd want to fetch and display only the pay slips from the user who is currently logged in.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#filter-data-in-the-backend": {
                "title": "Filter data in the backend ​",
                "content": "In theory, you could get all the pay slips from all the users and filter the Collection in WeWeb based on the current user but you definitely do not want to do that.\nWhy?\nBecause if you did that, you would be loading all the information from all your users in the frontend.\nEven if you added a filter and only displayed the current user's information on the page, other people could access it in the browser.\nSo what should you do?\nYou should filter the data on the current user at backend level, i.e. make sure Xano only sends you the information from the user who is currently authenticated.\nHow do you do that?\nIn Xano, you would have a table with all your users, and a table with all the pay slips. Each pay slip would be linked to a user.\nNow let's take a different example. Let's work on a web-app where users can apply to jobs.\nIn Xano, we have a list of job applications. Each job application is linked to a user_id in the user table:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#clone-the-api-endpoint-closest-to-the-data-you-need": {
                "title": "Clone the API endpoint closest to the data you need ​",
                "content": "In our case, we want to return a list of job applications for the current user.\nIn the API menu, we have a default API to GET all the records from the application table.\nLet's clone this endpoint to create a new one that will only GET the applications of the authenticated user:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#secure-the-endpoint-with-authentication": {
                "title": "Secure the endpoint with authentication ​",
                "content": "Now that we have this new user-application endpoint, we need to make sure our GET request will only go through if the user making it is authenticated:\nPre-requisite: you have set up a user table with authentication endpoints in Xano.\nWhy are we doing this?\nSo that we can get the user's id from the authentication token provided by Xano when the user logs in. This ensures that no one can guess what API request to call with a user email for example.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#add-a-filter-to-query-user-specific-records": {
                "title": "Add a filter to query user specific records ​",
                "content": "Instead of querying all the records from the application table, we want to query only the records where the linked user's id matches the id in the authentication token generated when a user logs into our web-app:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#getting-the-filtered-data-to-weweb": {
                "title": "Getting the filtered data to WeWeb ​",
                "content": "Now that we have an endpoint that requires authentication and sends back filtered data based on the authenticated user, we can create a data collection in WeWeb in the Data panel:\nAnd that's it!\nYou've now ensured that only an authenticated user can access their own data.\nWARNING To fetch data from a Xano endpoint with authentication enabled, you must first login as a user in WeWeb. In the example above, you can see user 1 is authenticated in WeWeb. As a result, Xano returns all the applications with user_id 1. The same logic applies to call endpoints that require a specific role with a precondition on the Xano endpoint. You must be logged in as a user that has the requested role(s) in your WeWeb application to be able to call such endpoints successfully.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#troubleshooting-xano-authentication": {
                "title": "Troubleshooting Xano Authentication ​",
                "content": "If you're experiencing issues with the Xano signup or login forms, you can test the entire workflow or one action at a time and look at the response when it fails.\nXano will return an error message in response > data > message :",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#most-common-errors": {
                "title": "Most common errors ​",
                "content": "trying to sign up a user that already exists in the user base in Xano (need to login instead), trying to sign up a user with a password that doesn’t match Xano’s default requirements (at least 6 characters and 1 capital letter at the time of writing), trying to login a user that doesn’t exist in the user base in Xano (need to signup instead) trying to login with invalid credentials.\nIf you don't find a solution using the WeWeb debugger, consider using the Run & Debug command in Xano directly to make sure everything is properly set up in the back-end.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#forgot-password-with-xano-auth": {
                "title": "Forgot Password with Xano Auth ​",
                "content": "WARNING Before we show you how to set things up in WeWeb, let's explain what you need to setup outside of WeWeb. If you are using the Xano Auth Plugin in WeWeb, there are 2 pre-requisites to enable users to reset their password securely. Pre-Requisite #1: Sendgrid Account Pre-Requisite #1: Sendgrid Account First, you'll need to open a Sendgrid account. This will enable you to send an email with a \"magic link\" to users who have forgotten their password. When the user clicks on that link, they will be redirected to a page of your WeWeb app where they will be invited to choose a new one. But more on that later… Pre-Requisite #2: Magic Link Endpoints in Xano Pre-Requisite #2: Magic Link Endpoints in Xano In Xano, you will need 3 API endpoints in addition to the 3 usual authentication endpoints (i.e. signup, login, and me). These 3 additional endpoints are: magic-link – sends a unique link to user who forgot their password magic-login – allows the user to login without a password using the magic link update-password – updates the user's password in the user table In order to get these 3 new authentication endpoints, we recommend you: add this Password Reset snippet in Xano, watch their video explaining how the Password Reset snippet works, and watch this video on how to configure your environment variables in Xano. You can leave the redirect URL values empty for now. We'll come back to these a couple of paragraphs down.\nOnce you've setup Xano and Sendgrid as explained above – barring the redirect URLs – you'll be able to set things up in your WeWeb user interface.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#step-1-create-dedicated-pages-in-weweb": {
                "title": "Step 1: Create Dedicated Pages in WeWeb ​",
                "content": "In WeWeb, you'll want to create 2 pages.\nThe first page with a \"Change password\" section:\nThe second page with an \"Reset password\" section:\nOnce you have created the \"Update password\" page, you'll be able to update the magic_link_redirect_uri variable in your Xano settings:\nThe value will be the URL of the page which contains the \"Update password\" form.\nTIP For testing purposes during the setup and/or if you are not yet ready to publish your WeWeb project, you can paste the URL of the page in the Editor – with the https://editor.weweb.io/abcd123 format – instead of the URL of the published page – with the https://abcd123.weweb-preview.io format.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP For testing purposes during the setup and/or if you are not yet ready to publish your WeWeb project, you can paste the URL of the page in the Editor – with the https://editor.weweb.io/abcd123 format – instead of the URL of the published page – with the https://abcd123.weweb-preview.io format."
                ]
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#step-2-–-workflow-to-request-magic-link": {
                "title": "Step 2 – Workflow to Request Magic Link ​",
                "content": "On the \"Forgot password\" Form Container, you'll notice there is a Workflow.\nHere's how you update it to ensure the user receives an email with a magic link when they submit the form:\ncopy the Xano API endpoint that requests a magic link, and bind the email query string field to the email value variable in the form.\nDepending on how you created your endpoints in Xano – using the Starter template or installing the Magic Link with Sendgrid extension for example – the endpoint may have a different name – request-magic-link or magic-link for example.\nTIP Before moving to the next step, add your email address to your user table in Xano, then test the workflow with your email address to make sure you receive a magic link in your inbox.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Before moving to the next step, add your email address to your user table in Xano, then test the workflow with your email address to make sure you receive a magic link in your inbox."
                ]
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#step-3-–-workflow-to-reset-the-user-s-password": {
                "title": "Step 3 – Workflow to Reset the User's Password ​",
                "content": "You'll also need to update the Workflow on the \"Update password\" Form Container.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#action-1-login-with-the-magic-link": {
                "title": "Action 1: Login with the magic link ​",
                "content": "First, you'll need to copy the API endpoint that allows the user to login with a magic link:\nAgain, the API endpoint may have a different path depending on how you created it in Xano. Make sure it's the one that allows the user to login with a magic token instead of a password.\nThen, in WeWeb, you'll need to create a Variable of type Query, named token :\nWhy of type Query?\nBecause when the user clicks on the magic link in the email, they will be redirected to the URL you pasted in the Xano settings with an additional query string at the end that contains a magic token.\nIt will look something like this:\nWhy name it token ?\nBecause, as you can see from the screenshot above, in the magic link provided by Xano and Sendgrid, the parameter at the beginning of the query string is token .\nIf we want WeWeb to get the value from this query string, we need to give our Query Variable the same name.\nFinally,  you'll need to bind that token variable to the magic_token field:\nWhy name the field key magic_token ?\nBecause that's the name of the input variable in Xano by default:\nWARNING If your input variable is named differently in Xano, make sure the field name matches in WeWeb.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#action-2-update-the-password": {
                "title": "Action 2: Update the password ​",
                "content": "When the user submits the form, the first step will be to log in using the magic token in the magic link. That's what we saw in action 1.\nThe second action will be to update that user's password in the user table with the information submitted in the form.\nEndpoint\nFirst, you'll need to paste the update-password endpoint from Xano.\nYou should bind the password and confirm_password values to the Form Variables and the Authorization field to the authToken returned by Action 1 of the Workflow:\nTIP Make it a habit to \"Run & Debug\" your API endpoints in Xano before testing things in WeWeb. When something is broken, this will help you figure out if you should look for a solution in Xano or WeWeb.\nI'm sure the Xano team will fix this quickly but we ran into a couple of glitches during our setup using their Starter template.\nHere's how to make sure the update-password endpoint is setup correctly:",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Make it a habit to \"Run & Debug\" your API endpoints in Xano before testing things in WeWeb. When something is broken, this will help you figure out if you should look for a solution in Xano or WeWeb."
                ]
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#_1-user-field-value": {
                "title": "1- User field_value ​",
                "content": "First, make sure the user inputs are setup correctly in the update_password endpoint.\nThe field_value which should be auth > id :\nDepending on how you created the endpoint, it may be missing or appear as text > id .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#_2-input-types-of-password-and-confirm-password-variables": {
                "title": "2- Input types of password and confirm_password variables ​",
                "content": "In the Starter template, these two variables are of type Password.\nAfter chatting with Xano's support team, it turns out you should delete these two variables and add two Text Inputs instead:\nSo your two text inputs should look like this:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#action-3-redirect-user-to-a-login-page": {
                "title": "Action 3: Redirect user to a login page ​",
                "content": "Once the user has updated their password, you'll usually want to redirect them to a login page.\nIf you'd like to redirect them to another page, we recommend you add a step before the Change page Action where you will login the user with their new credentials.\nTIP You can setup an On error workflow that triggers if the user's new password doesn't match the conditions in Xano in terms of length and complexity for example.\nAnd that's it!\nYou've successful setup a forgot password flow for your users using WeWeb, Xano Auth, and Sendgrid 🙂",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP You can setup an On error workflow that triggers if the user's new password doesn't match the conditions in Xano in terms of length and complexity for example."
                ]
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#oauth-social-sign-in": {
                "title": "OAuth (social sign-in) ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#pre-requisites": {
                "title": "Pre-requisites ​",
                "content": "Before you can setup a signup and/or login flow with a third-party provider in WeWeb, you'll need to:\ncreated and configured a project with the OAuth provider of your choice (e.g. Google, Slack, LinkedIn, etc.) installed and configured the related OAuth extension in Xano with the OAuth credentials provided by the provider\nTIP If you are new to OAuth and need help understanding how to configure things with your provider, consider reading our article on how to add Google OAuth with OpenID where we go into more detail about: setting up an OAuth consent screen, and configuring the correct redirect URLs with a provider.\nAssuming you have added and installed an OAuth extension in Xano , you will be able to see the provider(s) in the configuration of the Xano Auth plugin:\nTIP If you can't see the OAuth provider you're looking for, check that it is correctly installed in Xano in Marketplace > Purchased :",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/xano-oauth2.B5IiETpB.png"
                ],
                "tips": [
                    "TIP If you are new to OAuth and need help understanding how to configure things with your provider, consider reading our article on how to add Google OAuth with OpenID where we go into more detail about: setting up an OAuth consent screen, and configuring the correct redirect URLs with a provider.",
                    "TIP If you can't see the OAuth provider you're looking for, check that it is correctly installed in Xano in Marketplace > Purchased :"
                ]
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#login-or-signup-flow": {
                "title": "Login or signup flow ​",
                "content": "The first step to allow users to signup or login with an OAuth provider is to trigger a workflow, for example, on click of a \"Continue with Google\" button.\nIn that workflow, you'll need to:\nchoose the Login Provider action, select which provider you want to work with, and redirect the user to a public, blank page\nThis last step is crucial (more on this in a second).\nIn our case, we named the page Login with provider redirect page to be super explicit but of course, you can choose a shorter name. It doesn't really matter since the user will not even notice they are routed through this page.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/xano-auth.html#public-blank-page-for-3rd-party": {
                "title": "Public blank page for 3rd-party ​",
                "content": "Before your app is fully secured, it needs to render a page to save the authentication cookies and get back the user from the OAuth provider. That needs to happen on a public page.\nThen you can redirect the user to the page of your choice, public or private.\nThe process is the following:\nuser selects Oauth provider on your WeWeb app user is redirected to the Oauth provider consent screen user is redirected back to your WeWeb app, on a public page, where cookies are setup user is redirected to a private page on your WeWeb app\nWe took care of steps 1 through 3 when we created the workflow with the Login Provider action above and redirected users to an empty public page.\nNow we need to trigger a workflow on that page so that the authenticated user is immediately redirected to the page we want them to see post signup/login:\nThe workflow should have:\na trigger On Page Load (before fetching collections) because you want to redirect the user as soon as possible a Change page action that redirects the user to the page you want them to see after signing up or logging in\nThat's it, you've got OAuth configured on your Xano project.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/time-delay.html",
        "page_title": "Time delay | WeWeb Documentation",
        "sections": {}
    },
    {
        "url": "https://docs.weweb.io/components/component-events.html",
        "page_title": "Component events | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/components/component-events.html#why-trigger-an-event": {
                "title": "Why trigger an event ​",
                "content": "With option 1, we would have a component property that says if the component is used on a dedicated page or in a modal.\nThen, in our component's login workflow, we could add a branch that defines what to do depending on the property value.\nAlthought this works, it would introduce a large amount of manual work as we would need to add a branch to the workflow everytime we wanted to add new funtionality. As we introduce more and more functionality in the future, it could become impractial to manage all the branches.\nWe need more flexibility, so using option 2 makes more sense. To do so:\nfirst, in the component workflow, we trigger an event after the login action is successful then, outside the component, we are able to react to this event.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/component-events.html#create-a-component-event": {
                "title": "Create a component event ​",
                "content": "In the example below, we created a component event called On login success in our login form component:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/component-events.html#emit-a-component-event": {
                "title": "Emit a component event ​",
                "content": "We created a login workflow on submit of the form and triggered the On login success event after our login action:\nAs a result, when an instance of the component emits that event, we can react to it with a workflow that is triggered by the On login success event.\nTIP You can type in or bind a specific event value if you want. If you don't pass a value in the event, the event will fire but the event value will be null.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP You can type in or bind a specific event value if you want. If you don't pass a value in the event, the event will fire but the event value will be null."
                ]
            },
            "https://docs.weweb.io/components/component-events.html#react-to-a-component-event": {
                "title": "React to a component event ​",
                "content": "In the example below, on the instance of our component inside a modal, we choose to close the modal when the On login success event is emitted by the component:\nWe could follow the same logic to change page when the component is on a dedicated login page:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/component-events.html#event-data-and-schema": {
                "title": "Event data and schema ​",
                "content": "When your component triggers an event (like a successful login), you might want to pass along user information. This is done in the Event data section of your workflow.\nYou can bind the data you want to pass with the event. For example, user information from your login form:\nemail address username any other relevant data\nWARNING We used a password field in this example for demonstration only. In real applications, never pass plain text passwords through events. Events might be logged and viewed, making them unsuitable for sensitive data. Instead, handle password submission through secure API calls and only pass non-sensitive information through events.\nWhen you test your component:\nThe binding UI for the Event object appears empty at first You won't see the actual data until the event triggers You can view the triggered event data in the Logs tab",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/component-events.html#understanding-event-schema": {
                "title": "Understanding Event schema ​",
                "content": "To help others understand what data your event will provide:\nGo to your component's event settings Add an Event schema with example data like:\njson { \"email\" : \"mockemail@email.com\" , \"password\" : \"mockpassword\" }\nAfter adding the schema above, the binding UI now shows what data to expect, and others can see exactly what information will be available. This eliminates any guesswork about what event data will be accessible. The schema serves as clear documentation, making it easier for everyone to understand and work with your component's events.\nTIP Event schema is optional but recommended as it helps others understand how to use your component's events.",
                "code_snippets": [
                    {
                        "code": "{\n  \"email\": \"mockemail@email.com\",\n  \"password\": \"mockpassword\"\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": [
                    "TIP Event schema is optional but recommended as it helps others understand how to use your component's events."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/data/intro-to-variables.html",
        "page_title": "Intro to variables | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/data/intro-to-variables.html#create-a-variable": {
                "title": "Create a variable ​",
                "content": "Here's a short interactive tutorial on how to create a global variable in WeWeb:\nLet's take a look at each step:\nVariables are in the Data tab of the WeWeb navigator Click on the New in the Variables section of the panel Name your variable Choose the variable type from the dropdown menu (e.g., Text, Number, Boolean, Query, etc.) Optionally, you can set a default value for the variable in the Default value field Decide if you want the variable to be preserved on navigation and/or saved in local storage Click on Create to create the variable.\nNow, you can use this variable throughout your website by binding it to UI components or using it in workflows.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/data/intro-to-variables.html#variables-types": {
                "title": "Variables types ​",
                "content": "In programming, variables are helpful to store, send, and display information. For example, you can store the name of a user in a Text variable (also called a string ) or a list of users in an Array variable in your frontend before sending the information your your backend.\nHowever, if you try to send the value of a Text variable to a column in your backend that expects an Array , you'll get an error.\nThat's why it's important to understand the different data types you may encounter in web development.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/data/intro-to-variables.html#text": {
                "title": "Text ​",
                "content": "A text variable is a variable that stores text. You can use text variables to store text values, such as names, addresses, or any other text data. It's equivalent to a string in JavaScript .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/data/intro-to-variables.html#number": {
                "title": "Number ​",
                "content": "A number variable is a variable that stores numbers. You can use number variables to store numeric values, such as prices, quantities, or any other numeric data. It's equivalent to a number in JavaScript .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/data/intro-to-variables.html#boolean": {
                "title": "Boolean ​",
                "content": "A boolean variable is a variable that stores a boolean value (true or false). You can use boolean variables to store boolean values, such as a flag that indicates whether a user is logged in or not. It's equivalent to a boolean in JavaScript .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/data/intro-to-variables.html#object": {
                "title": "Object ​",
                "content": "An object variable is a variable that stores an object. You can use object variables to store complex data, such as a user profile, a product, or any other data that has multiple properties. It's equivalent to an object in JavaScript .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/data/intro-to-variables.html#array": {
                "title": "Array ​",
                "content": "An array variable is a variable that stores an array. You can use array variables to store a list of values, such as a list of products, a list of users, or any other data that has multiple values. It's equivalent to an array in JavaScript .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/data/intro-to-variables.html#query": {
                "title": "Query ​",
                "content": "You can use query variables to store the value of a query string parameter in an URL.\nFor example, you can use them to:\nCustomize what a user sees based on how they got to your site (like showing different content when they click an email link) Remember which product someone wants to view (like going directly to a specific item when sharing a link) Keep track of where visitors came from (like knowing if they clicked an Instagram ad) Show personalized messages (like displaying \"Welcome back!\" when someone returns through a special link)",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/data/intro-to-variables.html#display-variable-value": {
                "title": "Display variable value ​",
                "content": "To use a variable in WeWeb, follow these steps:\nOpen a workflow's action or a binding panel on any element Go to the Variables tab Click on the variable you want to use\nYou can also use variables inside formulas like so:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/data/intro-to-variables.html#inspect-current-value": {
                "title": "Inspect current value ​",
                "content": "In the example below, our text element is bound to the myName variable. When we change it's current value or default value, it changes the text displayed on the page:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/extensions/segment.html",
        "page_title": "Segment | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/extensions/segment.html#add-plugin-to-project": {
                "title": "Add plugin to project ​",
                "content": "To add Segment to your project, go to Plugins > Extensions :\nThen, you’ll be prompted to enter your project write key :\nYou'll find your write key in your Segment project snippet. Indeed, you need to use a JavaScript source in Segment to use in a WeWeb app:\nOnce saved, the Segment plugin is now added to your project!",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/segment.html#use-plugin-in-workflows": {
                "title": "Use plugin in workflows ​",
                "content": "Pageviews are tracked by default, nothing to do on your side.\nTIP Only the first pageview will be triggered in the editor, as the app is not triggering « real » page changes. But when published in staging or production, all page changes will trigger.\nTo track user interactions, you can use the Track action in workflows:\nThe only required parameter for this action is the event name . You can add as many key/value pairs as you want, which are bindable (you can also bind the whole object).\nThis object will be sent to Segment as the properties object of the event. You can test your events in the editor, and you’ll see them in the Segment debugger:\nTo track user logins and signups, you can use the Identify action in workflows. The only required parameter for this action is the user id , but you can also add as many key/value pairs as you want, which are bindable (you can also bind the whole object).\nWhat we would recommend is to login the user using the Login action, and then identify the user using the Identify action, so that you can actually use the current user data to do your bindings:\nTIP Once identified, the user will be identified on all pages, and all events will be sent with the user id. No need to use identify on every page. Just use it during the login/signup process.\nFor the other events, such as alias or screen , the process is the same. You can refer to Segment's docs for more information on these events.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Only the first pageview will be triggered in the editor, as the app is not triggering « real » page changes. But when published in staging or production, all page changes will trigger.",
                    "TIP Once identified, the user will be identified on all pages, and all events will be sent with the user id. No need to use identify on every page. Just use it during the login/signup process."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/pages/404-page.html",
        "page_title": "Create 404 page | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/pages/404-page.html#page-with-404-path": {
                "title": "Page with 404 path ​",
                "content": "In order to do this, you'll need to create a new page with 404 as the slug:\nThen, whenever a user tries to access a page that doesn’t exist, WeWeb will automatically redirect them to that page.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/404-page.html#customize-404-page": {
                "title": "Customize 404 page ​",
                "content": "By default, this page will be empty but you can customize it like you would any other page.\nIn the example below, we let the user know they're lost and give them an option to navigate back to our homepage:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/supabase/call-postgres-function.html",
        "page_title": "Call a Postgres function | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/supabase/call-postgres-function.html#beyond-basic-queries": {
                "title": "Beyond basic queries ​",
                "content": "Let's imagine you’re building an app that helps track user activity by calculating important metrics based on three connected tables:\nlogins : tracks when users log in. posts : tracks posts created by users. comments : tracks comments written by users.\nWhile you could use SELECT with multiple table joins to gather this information, it creates lengthy, complex queries that need to be repeated everywhere you need these metrics. Using a database function instead lets you write the logic once and reuse it by simply calling get_user_activity_stats() . This makes your code cleaner and easier to maintain, since any changes only need to be made in one place.\nLike having a reusable report template, database functions give you:\nSingle source of truth for your query logic Consistent data calculations and formatting Simpler code maintenance\nThis is what our function would look like:\nsql CREATE OR REPLACE FUNCTION get_user_activity_stats (user_id INT ) RETURNS TABLE (logins INT , posts INT , comments INT ) AS $$ BEGIN RETURN QUERY SELECT ( SELECT COUNT ( * ) FROM logins WHERE user_id = user_id AND login_date >= NOW () - INTERVAL '30 days' ) AS logins, ( SELECT COUNT ( * ) FROM posts WHERE user_id = user_id AND post_date >= NOW () - INTERVAL '30 days' ) AS posts, ( SELECT COUNT ( * ) FROM comments WHERE user_id = user_id AND comment_date >= NOW () - INTERVAL '30 days' ) AS comments; END ; $$ LANGUAGE plpgsq\nIf the code above seems a bit intimidating, don't fret, let's go through it line by line:\nIf you call the function with user_id = 123 , an example output could be:\nIf we tried to achieve the same for three users using only SELECT statements, our code would look like this:\nsql -- Stats for User 123 SELECT ( SELECT COUNT ( * ) FROM logins WHERE user_id = 123 AND login_date >= NOW () - INTERVAL '30 days' ) AS logins, ( SELECT COUNT ( * ) FROM posts WHERE user_id = 123 AND post_date >= NOW () - INTERVAL '30 days' ) AS posts, ( SELECT COUNT ( * ) FROM comments WHERE user_id = 123 AND comment_date >= NOW () - INTERVAL '30 days' ) AS comments; -- Stats for User 456 SELECT ( SELECT COUNT ( * ) FROM logins WHERE user_id = 456 AND login_date >= NOW () - INTERVAL '30 days' ) AS logins, ( SELECT COUNT ( * ) FROM posts WHERE user_id = 456 AND post_date >= NOW () - INTERVAL '30 days' ) AS posts, ( SELECT COUNT ( * ) FROM comments WHERE user_id = 456 AND comment_date >= NOW () - INTERVAL '30 days' ) AS comments; -- Stats for User 789 SELECT ( SELECT COUNT ( * ) FROM logins WHERE user_id = 789 AND login_date >= NOW () - INTERVAL '30 days' ) AS logins, ( SELECT COUNT ( * ) FROM posts WHERE user_id = 789 AND post_date >= NOW () - INTERVAL '30 days' ) AS posts, ( SELECT COUNT ( * ) FROM comments WHERE user_id = 789 AND comment_date >= NOW () - INTERVAL '30 days' ) AS comments;\nWe are repeating SELECT many times. This approach is prone to errors and hard to maintain, hence the usefulness of database functions.\nLearn more about how to create database functions here\nTIP The example above (consolidating complex queries) is popular because it's a common pain point, but database functions are really a Swiss Army knife for database operations. They're particularly valuable when you need consistent behavior across different applications or users accessing the same database. A couple of additional use cases include but are not limited to: Automating business logic: automatically assigning tickets when a new issue is created. Trigger-based functions for event handling: when a user likes a post, update the likes_count in a summary table.",
                "code_snippets": [
                    {
                        "code": "CREATE OR REPLACE FUNCTION get_user_activity_stats(user_id INT)\nRETURNS TABLE(logins INT, posts INT, comments INT) AS $$\nBEGIN\n    RETURN QUERY\n    SELECT\n        (SELECT COUNT(*) FROM logins WHERE user_id = user_id AND login_date >= NOW() - INTERVAL '30 days') AS logins,\n        (SELECT COUNT(*) FROM posts WHERE user_id = user_id AND post_date >= NOW() - INTERVAL '30 days') AS posts,\n        (SELECT COUNT(*) FROM comments WHERE user_id = user_id AND comment_date >= NOW() - INTERVAL '30 days') AS comments;\nEND;\n$$ LANGUAGE plpgsq",
                        "language": "unknown"
                    },
                    {
                        "code": "CREATE OR REPLACE FUNCTION get_user_activity_stats(user_id INT)",
                        "language": "unknown"
                    },
                    {
                        "code": "sqlCREATE OR REPLACE FUNCTION get_user_activity_stats(user_id INT)",
                        "language": "sql"
                    },
                    {
                        "code": "RETURNS TABLE(logins INT, posts INT, comments INT) AS $$",
                        "language": "unknown"
                    },
                    {
                        "code": "sqlRETURNS TABLE(logins INT, posts INT, comments INT) AS $$",
                        "language": "sql"
                    },
                    {
                        "code": "BEGIN\n    RETURN QUERY",
                        "language": "unknown"
                    },
                    {
                        "code": "sqlBEGIN\n    RETURN QUERY",
                        "language": "sql"
                    },
                    {
                        "code": "(SELECT COUNT(*) FROM logins WHERE user_id = user_id AND login_date >= NOW() - INTERVAL '30 days') AS logins,",
                        "language": "unknown"
                    },
                    {
                        "code": "(SELECT COUNT(*) FROM posts WHERE user_id = user_id AND post_date >= NOW() - INTERVAL '30 days') AS posts,",
                        "language": "unknown"
                    },
                    {
                        "code": "(SELECT COUNT(*) FROM comments WHERE user_id = user_id AND comment_date >= NOW() - INTERVAL '30 days') AS comments;",
                        "language": "unknown"
                    },
                    {
                        "code": "sql(SELECT COUNT(*) FROM logins WHERE user_id = user_id AND login_date >= NOW() - INTERVAL '30 days') AS logins,",
                        "language": "sql"
                    },
                    {
                        "code": "sql(SELECT COUNT(*) FROM posts WHERE user_id = user_id AND post_date >= NOW() - INTERVAL '30 days') AS posts,",
                        "language": "sql"
                    },
                    {
                        "code": "sql(SELECT COUNT(*) FROM comments WHERE user_id = user_id AND comment_date >= NOW() - INTERVAL '30 days') AS comments;",
                        "language": "sql"
                    },
                    {
                        "code": "END;\n$$ LANGUAGE plpgsql;",
                        "language": "unknown"
                    },
                    {
                        "code": "sqlEND;\n$$ LANGUAGE plpgsql;",
                        "language": "sql"
                    },
                    {
                        "code": "-- Stats for User 123\nSELECT\n    (SELECT COUNT(*) FROM logins WHERE user_id = 123 AND login_date >= NOW() - INTERVAL '30 days') AS logins,\n    (SELECT COUNT(*) FROM posts WHERE user_id = 123 AND post_date >= NOW() - INTERVAL '30 days') AS posts,\n    (SELECT COUNT(*) FROM comments WHERE user_id = 123 AND comment_date >= NOW() - INTERVAL '30 days') AS comments;\n\n-- Stats for User 456\nSELECT\n    (SELECT COUNT(*) FROM logins WHERE user_id = 456 AND login_date >= NOW() - INTERVAL '30 days') AS logins,\n    (SELECT COUNT(*) FROM posts WHERE user_id = 456 AND post_date >= NOW() - INTERVAL '30 days') AS posts,\n    (SELECT COUNT(*) FROM comments WHERE user_id = 456 AND comment_date >= NOW() - INTERVAL '30 days') AS comments;\n\n-- Stats for User 789\nSELECT\n    (SELECT COUNT(*) FROM logins WHERE user_id = 789 AND login_date >= NOW() - INTERVAL '30 days') AS logins,\n    (SELECT COUNT(*) FROM posts WHERE user_id = 789 AND post_date >= NOW() - INTERVAL '30 days') AS posts,\n    (SELECT COUNT(*) FROM comments WHERE user_id = 789 AND comment_date >= NOW() - INTERVAL '30 days') AS comments;",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": [
                    "TIP The example above (consolidating complex queries) is popular because it's a common pain point, but database functions are really a Swiss Army knife for database operations. They're particularly valuable when you need consistent behavior across different applications or users accessing the same database. A couple of additional use cases include but are not limited to: Automating business logic: automatically assigning tickets when a new issue is created. Trigger-based functions for event handling: when a user likes a post, update the likes_count in a summary table."
                ]
            },
            "https://docs.weweb.io/workflows/actions/supabase/call-postgres-function.html#call-a-postgres-function": {
                "title": "Call a Postgres function ​",
                "content": "The Call a Postgres function action in WeWeb, available after installing the Supabase plugin, lets you execute database functions directly from your application.\nConsider a customer service ticket management app with these connected tables:\ntickets : basic ticket info. ticket_status_history : how many times the ticket was reopened. ticket_comments : how many comments are waiting for a response. agents : how many tickets the agent is handling. departments : SLA rules for the ticket.\nWe could create a function to return ticket stats. For example, you might want to know:\nThe total number of tickets in the system How many tickets are currently open vs closed The number of high-priority tickets that need attention The average time it takes to resolve tickets\nOnce you are done writing the code for the function, you can add the Call a Postgres function action to call that function.\nTo verify your Postgres function execution, use the Logs tab to inspect the returned values:\nWARNING If Row-Level Security (RLS) is enabled, your function might not return data unless you explicitly allow it.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/call-postgres-function.html#postgresql-functions-vs-edge-functions": {
                "title": "PostgreSQL functions vs. Edge Functions ​",
                "content": "It's easy to mix up database functions with Edge Functions . Database functions operate directly within your database, working on your data at its source. On the other hand, edge functions run on distributed servers located closer to users, managing tasks such as authentication, data transformations, and integrations with external services like payment processors.\nHere is a comparison table:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/custom-javascript.html",
        "page_title": "Custom JavaScript | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/custom-javascript.html#capabilities": {
                "title": "Capabilities ​",
                "content": "Write any pure JavaScript code you need Manipulate any variables and execute any workflows in your application Set up initialization scripts for external libraries Perform complex calculations and data transformations Access variables and action results in workflows Return values for use in subsequent actions",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/custom-javascript.html#how-to-use": {
                "title": "How to use ​",
                "content": "Add the Custom JavaScript action to your workflow Write your JavaScript code in the editor Use any variables from your project\nReturn any values you want to use in subsequent actions",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/execute-workflow.html",
        "page_title": "Execute workflow | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/execute-workflow.html#how-to-use": {
                "title": "How to Use ​",
                "content": "Let's say you want to trigger a global workflow from a button's local workflow:\nGo to the Actions tab Give your global workflow a name Pass parameters if needed (optional)\nFor example, to create a global workflow that logs a message to the console:\nAdd a Log action Access the Events tab to retrieve your defined workflow parameters\nIn your button workflow, add the Execute workflow action and select the workflow you want to execute. You'll then be prompted to provide any required parameters.\nWhen the button is clicked, it will execute the global workflow:\nTIP Use Execute workflow whenever you find yourself repeating the same series of actions in different places, or when a workflow becomes too complex to manage.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Use Execute workflow whenever you find yourself repeating the same series of actions in different places, or when a workflow becomes too complex to manage."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/log.html",
        "page_title": "Log | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/log.html#configuration": {
                "title": "Configuration ​",
                "content": "Name : you can give your log action a name for better organization in your workflow. This is optional but helpful when managing multiple log actions.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/log.html#type": {
                "title": "Type ​",
                "content": "The log type determines how your message appears in the console:\nInfo : for standard log messages Verbose : for detailed debugging information Warning : for potential issues that need attention Error : for critical problems and errors Message : enter the text you want to output to the console. This is required and can be a static message or a dynamic value from your workflow. Data to display : optionally include additional data alongside your message. This could be variable values, API responses, or any other data you need to monitor. The data can be input as JSON or JavaScript expressions.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/log.html#common-applications": {
                "title": "Common applications ​",
                "content": "When building, you might use logs to track API responses, verify calculations, or monitor user interactions. For example, placing a Log action after a button click can confirm the click was registered and show what data was captured.\nWhen debugging complex workflows, logs help verify that actions are executing in the expected order and that variables contain the correct values at each step. They're particularly useful for tracking data transformations and catching potential issues before they cause problems.\nIn error scenarios, log actions can capture and display detailed error information, making it easier to identify and fix issues in your application.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/settings-billing-code-export/weweb-server-api-(deprecated).html",
        "page_title": "WeWeb Server and Server API (DEPRECATED) | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/settings-billing-code-export/weweb-server-api-(deprecated).html#weweb-server": {
                "title": "weweb-server ​",
                "content": "In the past, to self-host a WeWeb app with private pages, you had to host it using the weweb-server.\nOn June 26th, 2024, we released an update to change the way we handle private pages. As a result, you no longer need to use the weweb-server to self-host your WeWeb apps , even if those apps use authentication.\nWARNING For now, if you're not yet ready to change how you self-host your existing WeWeb apps, you can still host the WeWeb auth server as described below. Please note, however, that the weweb-server will be removed in the future. Of course, we will let you know in advance when that happens.\nIf you're using auth in your app (be it WeWeb auth, Xano, Auth0 or Supabase) and have been using WeWeb for a while, you might already be hosting the WeWeb auth server, which checks for authentication on the backend.\nHere's a schema of the previous self-hosting architecture on a WeWeb app:\nIf you wish to continue self-hosting this way for now, please watch this 5 min video showing you how to self-host with the weweb-server:\nThe WeWeb auth server is available here",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/weweb-server-api-(deprecated).html#weweb-server-api": {
                "title": "WeWeb Server API ​",
                "content": "For now, WeWeb continues to provide an API to interact with your weweb-server.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/weweb-server-api-(deprecated).html#principle": {
                "title": "Principle ​",
                "content": "weweb-server will be the entry point of you self-hosted WeWeb project : it will manage Authentication, pages accesses and file serve for one or multiple of your WeWeb projects.\nweweb-server needs to be connected to a Postgres Database that you will also have to host. We advise you to add a CDN in front of this server to keep some files in cache.\nweweb-server needs some storage to retreive your projects' files. This storage can be local, distant or an AWS S3 bucket.\nEach time you publish a new version of one of your projects, you will need to update the project's files and configure the server's DB info using WeWeb's Dashboard (The configure button can be found in the project's Dashboard > Self-Hosting > Configure WeWeb Server)",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/weweb-server-api-(deprecated).html#database": {
                "title": "Database ​",
                "content": "You need to create a new Postgres Database that will be used by this server to store some non sensible data about your projects' pages (private accesses, user groups and a list of all pages). You will need to set some environment variables in weweb-server for it to be able to connect to the Database.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/weweb-server-api-(deprecated).html#storage": {
                "title": "Storage ​",
                "content": "You will need some storage to put your projects' files on it.\nThis storage can be :\nLocal to weweb-server (add a folder in the server) Distant (in some http url) AWS S3 Bucket (the bucket doesn't need to be dedicated to this storage)\nThe storage location is configured using environment variables.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/weweb-server-api-(deprecated).html#environment-variables": {
                "title": "Environment variables ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/weweb-server-api-(deprecated).html#main-variables": {
                "title": "Main variables : ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/weweb-server-api-(deprecated).html#files-path": {
                "title": "FILES_PATH : ​",
                "content": "For local storage, FILES_PATH should start with ./ else distant storage will be used. You can use two variables in the path that can be found in the name of the ZIP of the project :\n:projectId :filesVersion\nEx: ./projects/:projectId/:filesVersion will fetch the frontend project's files localy. FILES_PATH should end without a / .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/weweb-server-api-(deprecated).html#server-path": {
                "title": "SERVER_PATH : ​",
                "content": "If you setup something like https://my-domain.com/servers/weweb-server/ as WeWeb Server URL in your Dashboard, you should set SERVER_PATH to the value /servers/weweb-server . SERVER_PATH should end without a / .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/weweb-server-api-(deprecated).html#database-configuration": {
                "title": "Database configuration : ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/weweb-server-api-(deprecated).html#aws-s3-configuration-not-required-if-a-different-storage-is-used": {
                "title": "AWS S3 configuration (not required if a different storage is used) : ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/weweb-server-api-(deprecated).html#publish-a-new-version-of-a-project": {
                "title": "Publish a new version of a project ​",
                "content": "Publish your project on WeWeb Dashboard and wait for it to finish Go to your project's Dashboard > Self-Hosting and download the project's ZIP archive Unzip the archive in your storage. We advise you to use subfolders for each projects and each versions of your projects to prevent downtime. Go to your project's Dashboard > Self-Hosting and click on Configure WeWeb Server\nThe new version of your project is now live !",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/websockets/xano-realtime/message.html",
        "page_title": "Send & receive messages | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/websockets/xano-realtime/message.html#pre-requisites": {
                "title": "Pre-requisites ​",
                "content": "Before users of your WeWeb app can send and receive Xano realtime messages, you need to:\nEnable and connect Xano realtime to your WeWeb project (as explained here ). Open a channel where messages will flow (as explained here ).\nOnce that's done, you can think of sending & receiving messages.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/message.html#send-messages": {
                "title": "Send messages ​",
                "content": "To send messages to a realtime channel, we need to use the Send message action.\nIn the example below, we created a workflow that sends a message to Everyone in the room1 channel when a user clicks on the \"Send\" button of a support chat:\nTIP Notice how you can customize the message event. In the example above, we sent an object with information about the user in addition to the chat input variable.\nThe only thing the Send message action does is send information to the channel.\nIf you test the action and get an error, it means the user is not subscribed to the channel:\nOtherwise, Xano will return a simple success message:\nThat's because receiving (and displaying) messages is a separate matter.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Notice how you can customize the message event. In the example above, we sent an object with information about the user in addition to the chat input variable."
                ]
            },
            "https://docs.weweb.io/websockets/xano-realtime/message.html#receive-messages": {
                "title": "Receive messages ​",
                "content": "To receive realtime messages from other users, we need to create a page or app workflow that is triggered when there's a new realtime message event in a channel.\nWARNING Workflows that listen to realtime events must be executed at page or app level because you are essentially saying: when this app or this specific page is open in a browser, I want the browser to listen for events so it can react to it.\nIn the example below, we setup a workflow on a page with a chatroom:\nThe workflow is triggered when there's a new message event in the room1 channel. To help us debug things, we used the Logs action and bound it to the entire workflow Event object. Then we updated a variable with the payload of the workflow Event .\nTIP Note that, the preview of the Event object and event payload in the workflow editor displays placeholder information. When you test your setup in preview mode, the payload of the message event you receive here will match the Payload value you defined when you created the Send a message action before:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/xano-realtime-send-message.CSpdJIoO.png"
                ],
                "tips": [
                    "TIP Note that, the preview of the Event object and event payload in the workflow editor displays placeholder information. When you test your setup in preview mode, the payload of the message event you receive here will match the Payload value you defined when you created the Send a message action before:"
                ]
            },
            "https://docs.weweb.io/websockets/xano-realtime/message.html#display-message-events": {
                "title": "Display message events ​",
                "content": "To display message events in your WeWeb app, you can update a WeWeb variable every time there's a new event and bind that variable to an item (or list of items) on your page.\nThat way, your UI can react dynamically to the event it receives.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/message.html#live-collaboration-example": {
                "title": "Live collaboration example ​",
                "content": "For example, in the case of a live collaboration tool that tracks every user's cursor position, you might have a cursors array variable with a seperate objet for every active user.\nEach object would include the user's cursor position.\nOn your page, you could use that variable to move cursor icons around the page based on each user's position.\nIn the example above, you can see the page is open in three different clients (user browser tabs) and client A can see the cursor position of clients B and C.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/pages/navigation.html",
        "page_title": "Navigation | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/pages/navigation.html#understanding-url-paths": {
                "title": "Understanding URL paths ​",
                "content": "URL paths are the addresses of your pages - what users see in their browser's address bar. Think of them as street addresses for your website - they help users find exactly where they want to go.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/navigation.html#simple-urls": {
                "title": "Simple URLs ​",
                "content": "When you create a page in WeWeb, it automatically gets a simple URL. These URLs are straightforward and static, meaning they don't change.\nFor example, in the URL https://yourdomain.com/products :\nyourdomain.com is your domain (your website's main address) /products is the path to your specific page\nSome examples of simple URLs:\nPath may only contain 'a-z', '0-9', '_', '-' and '/', and can only start and end with 'a-z' or '0-9'.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/navigation.html#dynamic-urls": {
                "title": "Dynamic URLs ​",
                "content": "Sometimes you need URLs that can change based on what content you're showing. These are called dynamic URLs, and they use parameters to change parts of the URL.\nFor example, in https://yourdomain.com/products/category/smartphones :\n/products/category is your base path (static part) /smartphones is a category parameter (dynamic part)",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/navigation.html#setting-up-dynamic-urls": {
                "title": "Setting up dynamic URLs ​",
                "content": "Select your page from the Pages panel Click on \"URL paths\" in the page settings In the URL paths panel, you'll see: English unique path : This is where you set up your URL structure Parameters : These are the parts of your URL that can change\nTIP A dynamic product page URL might look like: Template: products/category/{{param}} Real URL: products/category/smartphones Another URL: products/category/beauty Parameters always use double curly braces: {{parameterName}} Choose clear parameter names that describe their purpose You can test your dynamic URLs using the default values in the editor\n\"English unique path\" is the URL structure for accessing content in English, letting you define custom routes for each language.\nFor example, if you were building a multi-language site, you might have:\nEnglish path: /products/category/{{param}} French path: /produits/categorie/{{param}} Spanish path: /productos/categoria/{{param}}\nWARNING A page might work when previewing it in the editor in French, but will fail when visitors try to access it in English if you haven't created the English content version. Learn more about page languages:\nTIP ✅ Dynamic URLs are better for : Product pages that change based on category or brand Blog posts with different articles User profiles Search results pages",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP A dynamic product page URL might look like: Template: products/category/{{param}} Real URL: products/category/smartphones Another URL: products/category/beauty Parameters always use double curly braces: {{parameterName}} Choose clear parameter names that describe their purpose You can test your dynamic URLs using the default values in the editor",
                    "TIP ✅ Dynamic URLs are better for : Product pages that change based on category or brand Blog posts with different articles User profiles Search results pages"
                ]
            },
            "https://docs.weweb.io/pages/navigation.html#retrieve-url-parameter-value": {
                "title": "Retrieve URL parameter value ​",
                "content": "Once you have defined URL parameters in your page settings, you can access them through WeWeb's Variables tab in the Formula editor. These parameters automatically update based on the URL, allowing you to fetch data for specific items, show or hide content based on the current value, filter collections and control component visibility.\nFor example, if your URL is /products/category/{{param}} , you can use the parameter to fetch and display only products from that category:\nTIP URL paths are only available on the page where you create them The Home page cannot have URL paths . To handle URLs like mydomain.com/1: Create a regular page (e.g., \"Main\") with URL path {{id}} Add workflow \"On page load\" to Home Use Navigate to action to redirect to Main page Example: User visits: mydomain.com (Home) Auto-redirects to: mydomain.com/1 (Main page) Users can now access mydomain.com/2, mydomain.com/3, etc.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP URL paths are only available on the page where you create them The Home page cannot have URL paths . To handle URLs like mydomain.com/1: Create a regular page (e.g., \"Main\") with URL path {{id}} Add workflow \"On page load\" to Home Use Navigate to action to redirect to Main page Example: User visits: mydomain.com (Home) Auto-redirects to: mydomain.com/1 (Main page) Users can now access mydomain.com/2, mydomain.com/3, etc."
                ]
            },
            "https://docs.weweb.io/pages/navigation.html#navigation-methods": {
                "title": "Navigation methods ​",
                "content": "TIP Consider using Multi-page sections for improved navigation performance When navigating between pages, consider implementing multi-page sections to improve the performance of page transitions. Multi-page sections allow you to preload content from other pages, resulting in smoother transitions and faster loading times. This is especially beneficial for frequently accessed pages or when you want to create a seamless user experience. You can learn more about multi-page sections in their dedicated documentation .\nNow that you understand how URLs work in WeWeb, let's look at the three ways to navigate between pages:",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Consider using Multi-page sections for improved navigation performance When navigating between pages, consider implementing multi-page sections to improve the performance of page transitions. Multi-page sections allow you to preload content from other pages, resulting in smoother transitions and faster loading times. This is especially beneficial for frequently accessed pages or when you want to create a seamless user experience. You can learn more about multi-page sections in their dedicated documentation ."
                ]
            },
            "https://docs.weweb.io/pages/navigation.html#link": {
                "title": "Link ​",
                "content": "The most common way to navigate is using the Link to property. This creates regular links that users can click on, just like standard website links. It's perfect for navigation menus, buttons, and any clickable elements.\nFor example, if you have a products page with URL parameters set up ( /products/category/{{param}} ), you can create links to specific categories:\nSelect any element you want to make clickable In the Settings tab, find the Link section Choose the target page Add any URL parameters needed:\nAssuming you are using the URL path in an API request to fetch a collection, you will get different results:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/navigation.html#link-properties": {
                "title": "Link properties ​",
                "content": "TIP Disable the Preserve collection on navigation property so the collection can be \"reset\" when you navigate. Otherwise, your collection might show stale data from the previous page. You do not need to reset URL paths . This is all done by WeWeb automatically.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Disable the Preserve collection on navigation property so the collection can be \"reset\" when you navigate. Otherwise, your collection might show stale data from the previous page. You do not need to reset URL paths . This is all done by WeWeb automatically."
                ]
            },
            "https://docs.weweb.io/pages/navigation.html#navigate-to-workflow-action": {
                "title": "Navigate to workflow action ​",
                "content": "Sometimes you need navigation to happen automatically, like after a form submission or when certain conditions are met. This is where the Navigate to action comes in.\nInstead of waiting for a user to click, the Navigate to workflow action can be triggered by:\nForm submissions API responses Button clicks with additional logic Workflow completions",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/navigation.html#properties": {
                "title": "Properties ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/navigation.html#navigate-to-the-previous-page": {
                "title": "Navigate to the previous page ​",
                "content": "Allows users to go back to their previous page, similar to clicking the browser's back button. This is useful for:\n\"Back\" buttons after form submissions \"Return to previous page\" links Cancel buttons that return users to where they came from\nYou can set a default redirect page (like Home) that users will go to if there's no previous page in their history.\nTIP A workflow is a series of actions that happen in response to a trigger. You can learn more about workflow actions here.\nTIP Link to vs Navigate to Link to Creates HTML <a> tags in the published app - better for SEO and accessibility Use for navigation menus and clickable elements Adds \"Active link\" state to the target element Navigate to Uses JavaScript navigation - less optimal for SEO and accessibility More flexible for workflow automation and programmatic navigation\nWARNING Avoid setting both Link to property and Navigate to action on the same element - this can cause navigation conflicts in the editor.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP A workflow is a series of actions that happen in response to a trigger. You can learn more about workflow actions here.",
                    "TIP Link to vs Navigate to Link to Creates HTML <a> tags in the published app - better for SEO and accessibility Use for navigation menus and clickable elements Adds \"Active link\" state to the target element Navigate to Uses JavaScript navigation - less optimal for SEO and accessibility More flexible for workflow automation and programmatic navigation"
                ]
            },
            "https://docs.weweb.io/pages/navigation.html#queries": {
                "title": "Queries ​",
                "content": "URLs in WeWeb can have two types of parameters:\nPath parameters: /products/category/{{param}} Query parameters: /products?category=electronics\nQuery variables automatically capture and store URL query parameters. When you navigate to a page with query parameters, the corresponding query variables update to match the values in the URL.\nHere's how they work:\nCreate a query variable (e.g., searchTerm ) Add it to the Queries property during navigation:\nName: \"searchTerm\" Value: \"smartphones\"\nThe URL will update (e.g., yourpage?searchTerm=smartphones ) and the query variable searchTerm automatically updates to \"smartphones\".\nYou can use these variables anywhere in your app without writing any code!\nTo modify the query programatically, you can also use the Change variable value workflow action .\nTIP You might need query parameters for reset password flows. For example: User clicks reset password link: myapp.com/reset-password?token=abc123 The token query parameter is automatically captured by a query variable Your app can then use this variable to validate the reset password request Query parameters are also perfect for sort and filter features, just like YouTube's video timestamp sharing (e.g., youtube.com/watch?v=123&t=150 ). Users can share links/filtered views by simply copying the URL (e.g., products?sort=price_desc&category=phones ). The & symbol in URLs is used to separate multiple query parameters.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP You might need query parameters for reset password flows. For example: User clicks reset password link: myapp.com/reset-password?token=abc123 The token query parameter is automatically captured by a query variable Your app can then use this variable to validate the reset password request Query parameters are also perfect for sort and filter features, just like YouTube's video timestamp sharing (e.g., youtube.com/watch?v=123&t=150 ). Users can share links/filtered views by simply copying the URL (e.g., products?sort=price_desc&category=phones ). The & symbol in URLs is used to separate multiple query parameters."
                ]
            },
            "https://docs.weweb.io/pages/navigation.html#spa-navigation": {
                "title": "SPA Navigation ​",
                "content": "A Single Page Application (SPA) works like a desktop app in your browser - instead of loading entire new pages when you click around, it just updates the parts that need to change.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/navigation.html#same-page-navigation": {
                "title": "Same page navigation ​",
                "content": "When navigating to the same page in WeWeb:\nEditor: Page will reload for preview purposes Published app: No page reload, content updates smoothly\nTo navigate to the same page to avoid page reloads in the published app, simply select the current page on navigation:\nNow, in the published app, this is what will happen:\nTIP Navigating to the same page will trigger a page reload in the editor, but not in the published app, which is great for SPA navigation.\nWARNING Balance SPA navigation with dedicated pages While SPA navigation can provide a smooth transition and improved user experience, it's important to create dedicated pages for distinct sections of your application. Sections like account settings and sign-in pages should generally be implemented as separate pages rather than all within a single page. Building too much on a single page can lead to difficulties in maintaining and scaling the page as more and more is built on the page. Use SPA-style same-page navigation for smaller UI updates and transitions, but rely on dedicated pages for major functional areas of your application.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Navigating to the same page will trigger a page reload in the editor, but not in the published app, which is great for SPA navigation."
                ]
            },
            "https://docs.weweb.io/pages/navigation.html#wwparams": {
                "title": "wwParams ​",
                "content": "When navigating in the editor, you might notice wwParam appearing in your URLs. Don't worry - this is normal and only happens in the editor, not your published site. Here's why:\nThe WeWeb editor has two separate windows running at the same time:\nThe editor window, where you see all your tools and settings A preview window (iframe) - where you see how your app looks\nThese windows need different kinds of information:\nThe editor needs to know about your project settings, tools, etc. The preview needs to show your actual app",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/navigation.html#why-wwparams-exists": {
                "title": "Why wwParams exists ​",
                "content": "When you navigate in your app using parameters (like /products/shoes ):\nThe editor needs to know about this navigation The preview needs to show the right content Both windows need to stay in sync\nwwParams is WeWeb's solution to keep these two windows synchronized. It ensures that when you change pages or parameters in one window, the other window updates automatically to match.\nIn your published site, wwParams isn't needed because there's only one window. It's just a tool to help during development.\nWARNING OAuth Testing When implementing OAuth or any authentication with URL redirects, make sure to add both your published URL and editor URL to your OAuth provider's allowed redirect URLs . This ensures the authentication service works in both environments.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/navigation.html#current-page-data": {
                "title": "Current page data ​",
                "content": "The CurrentPage object helps you access information about the page you're currently on. You can use it in formulas and workflows to get details about your page.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/navigation.html#common-properties": {
                "title": "Common properties ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/navigation.html#status-properties": {
                "title": "Status properties ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/navigation.html#additional-properties": {
                "title": "Additional properties ​",
                "content": "paths : contains URL path information langs : available language versions meta : page meta information title : page title information sections : page sections pageUserGroups : access control groups\nTIP This is useful for: Display different content based on page name (e.g., \"Welcome to \" + CurrentPage.name ) Create dynamic navigation text (e.g., If(CurrentPage.name = \"Cart\", then \"Back\" else \"Cart\" ) Handle multiple languages (e.g., If(CurrentPage.lang = \"en\" then \"Buy\" else \"Acheter\" ) Show/hide elements on specific pages (e.g., If CurrentPage.name != \"Contact\" ) Create dynamic text combining page data (e.g., CurrentPage.name + \" - \" + CurrentPage.path )",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP This is useful for: Display different content based on page name (e.g., \"Welcome to \" + CurrentPage.name ) Create dynamic navigation text (e.g., If(CurrentPage.name = \"Cart\", then \"Back\" else \"Cart\" ) Handle multiple languages (e.g., If(CurrentPage.lang = \"en\" then \"Buy\" else \"Acheter\" ) Show/hide elements on specific pages (e.g., If CurrentPage.name != \"Contact\" ) Create dynamic text combining page data (e.g., CurrentPage.name + \" - \" + CurrentPage.path )"
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/extensions/gtm.html",
        "page_title": "Google Tag Manager | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/extensions/gtm.html#add-plugin-to-project": {
                "title": "Add plugin to project ​",
                "content": "To add Google Tag Manager to your WeWeb app, go to Plugins > Extensions :\nThen, you’ll be prompted to enter your Tag Manager Container IDs:\nYou can enter one container ID per environment if you want to use different Google Tag Manager containers for you app while in the editor, on your staging app or on the production app.\nOnly the production container ID is mandatory. If you don’t set IDs for the editor and for staging, they will use the production ID.\nTo find your Google Tag Manager ID, search for it in the upper-right corner while on the Tag Manager page:\nOnce saved, the Google Tag Manager plugin is now added to your project!",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/gtm.html#track-pageviews": {
                "title": "Track pageviews ​",
                "content": "Once you've configured the Google Tag Manager plugin, pageviews will be tracked by default, nothing to do on your side.\nTIP Only the first pageview will be triggered in the editor, as the app is not triggering \"real\" page changes. But when published in staging or production, all page changes will trigger.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Only the first pageview will be triggered in the editor, as the app is not triggering \"real\" page changes. But when published in staging or production, all page changes will trigger."
                ]
            },
            "https://docs.weweb.io/plugins/extensions/gtm.html#track-custom-events": {
                "title": "Track custom events ​",
                "content": "To track other user interactions, you can use the Push Event action in workflows:\nIn the action, you’ll be able to add as many key/values pairs as you want, which are bindable (you can also bind the whole object).\nThis object will be added in the Google Tag Manager’s dataLayer that you’ll be able to use as a trigger and variables in the Tag Manager instance:\nTIP The dataLayer is an array which is added to the window objects inside your project. What Google Tag Manager does is to listen to any object added to this array (what WeWeb's plugin action does). You can learn more about the dataLayer: in Google's developer documentation , and through this Analytics mania tutorial",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP The dataLayer is an array which is added to the window objects inside your project. What Google Tag Manager does is to listen to any object added to this array (what WeWeb's plugin action does). You can learn more about the dataLayer: in Google's developer documentation , and through this Analytics mania tutorial"
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/auth-systems/open-id.html",
        "page_title": "OpenID | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/auth-systems/open-id.html#provider-setup": {
                "title": "Provider setup ​",
                "content": "Before you can configure the WeWeb plugin, you'll need the following information from your OAuth provider:\nthe domain WeWeb should send the request to via OpenID a client ID a client secret a scope (i.e. what information you want to get) a response type\nHow you get this information will depend on your OAuth provider.\nTo allow users to signup or login with their Google account, you would need to:\ngo to the Google Cloud Console , and create a new project\nOnce you've created a project, you'll be able to configure the provider's consent screen and get credentials so WeWeb can make secure requests to the provider via the OpenID plugin.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/open-id.html#oauth-consent-screen": {
                "title": "OAuth consent screen ​",
                "content": "The OAuth consent screen is the screen the user will see when they choose to connect with the provider.\nFor example, the Google consent screen looks something like this:\nTo configure the Google OAuth consent screen, you'll need to go to APIs & Services > OAuth consent screen :\nAt that stage, the provider will ask for some information such as:\nBranding – For example, what is the name of your application and its logo.\nContacts – For example, a developer and/or support email address.\nUser type – Whether your app is reserved for people in your company ( internal ) or open to people outside your organization ( external )\nAuthorized domains – A list of domain names that are authorized to make a request for autentication to the provider. For example,\nweweb.io so it works when you're testing inside the WeWeb Editor, weweb-preview.io to test the auth flow on a published app without a custom domain, and your own custom domain to ensure it works properly on your live app\nScopes – To define what users will be giving access to (e.g. just their basic info or also their calendar).\nTest users – A list of test users who can test the app while it's under development.\nTIP Depending on the provider, some of these will be optional. What is never optional is listing which domains are authorized to make a call to the provider. Make sure to get those right and don't forget to add your custom domain later if you don't have it from the start.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Depending on the provider, some of these will be optional. What is never optional is listing which domains are authorized to make a call to the provider. Make sure to get those right and don't forget to add your custom domain later if you don't have it from the start."
                ]
            },
            "https://docs.weweb.io/plugins/auth-systems/open-id.html#api-keys-credentials": {
                "title": "API keys & credentials ​",
                "content": "In order for the provider to authorize the call you make through the OpenID plugin in WeWeb, you'll need create OAuth credentials in the provider's interface and copy them in WeWeb when you configure the plugin (but more on that later).\nIn Google, you can do this by going to APIs & Services > Credentials > Create credentials > OAuth client ID :\nAt that stage, the provider will ask for information such as:\nName – You will be invited to name the credentials. It doesn't really matter what you name it but it's helpful if it's descriptive enough that you know where you're using them. For example, you could name them: OpenID via WeWeb\nAuthorized JavaScript origins – A list of all the domains your web-app is hosted on. For example:\nthe WeWeb editor: https://editor.weweb.io your app in staging: https://4132ed05-ba19-4dc2-9867-ba4d4f9a9d76-staging.weweb-preview.io your app in production: https://www.your-custom-domain.com\nAuthorized redirect URIs – A list of URIs where users can be redirected after being authenticated. For example:\nthe page in the WeWeb editor: https://editor.weweb.io/4132ed05-ba19-4dc2-9867-ba4d4f9a9d76/86d66b45-bedd-47e9-a2ae-c1af5a1b2f5d the page in the app in staging: https://4132ed05-ba19-4dc2-9867-ba4d4f9a9d76-staging.weweb-preview.io/post-login/ the page in production: https://www.your-custom-domain.com/post-login/\nThese links should correspond to the page where users are redirected after being authenticated through the OpenID plugin in all the environments of your app (e.g. the WeWeb editor, in staging, in production).\nIt should match the URIs of the page you defined in the OpenID plugin in WeWeb:\nWARNING If you need to update these later, for example when you add a custom domain to your app, keep in mind that it can take 5 minutes up to a few hours for the new settings to take effect: We recommend you stay patient when testing new settings. Testing new settings right away and reverting back because you don't see the difference instantly is a great way to get confused and feel stuck.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/open-id6.y98VdBBU.png"
                ],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/open-id.html#plugin-configuration": {
                "title": "Plugin configuration ​",
                "content": "In WeWeb, you'll find the OpenID plugin in the Plugins > Authentication menu:\nWhen you add the plugin, you'll be invited to provide information that will allow WeWeb to make calls on behalf of your app to your OAuth provider:\nthe domain of your OAuth provider the OAuth 2.0 credentials created for your app (i.e. the client ID and client secret ) the scope values you want OpenID to return from the User Info endpoint, e.g. profile, email, address, or phone. Learn more about different scope values in OpenID's user docs the response type . Learn more about different OAuth flows in this video by Oracle and through OpenID's user docs\nIn the example below, you can see:\nwe are working with Google as a provider, and are asking for the user email and profile of the user",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/open-id.html#redirections": {
                "title": "Redirections ​",
                "content": "Once you have told the OpenID plugin how to communicate with your OAuth provider, you will need to define pages where users are redirected:\nafter they sign-in when they are not signed-in\nIn the example above, we named those pages Post login and Login but we can choose to redirect them to any page we want. For example, we could redirect authenticated users to their profile page and unauthenticated users to the app's home page.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/open-id.html#signup-and-login-flows": {
                "title": "Signup and login flows ​",
                "content": "Once you've added the OpenID plugin to your WeWeb project, you will get access to dedicated OpenID actions in workflows:\nWhen you use one of the login actions in a workflow, the user will be automatically redirected to the page you defined in the OpenID plugin after the authentication is successful.\nEven if you have a Change page action after the login action in your workflow, the OAuth flow will resolve on the redirect page defined in the plugin and authorized in the provider dashboard.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/open-id.html#advanced-redirection": {
                "title": "Advanced redirection ​",
                "content": "If you want more flexibility on where to redirect authenticated users, you could update a destination page variable before the login action in your workflow to define where the user should be redirected after the login:\nThen, on the post-login page, you can trigger a workflow On Page Load that checks the destination page variable to decide if the user should stay on the post-login page or be redirected to another page like the user profile in the example below:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/settings-billing-code-export/account-settings.html",
        "page_title": "Account Settings | WeWeb Documentation",
        "sections": {}
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/change-theme.html",
        "page_title": "Change theme | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/change-theme.html#change-theme-action": {
                "title": "Change theme action ​",
                "content": "The Change theme action is helpful to allow users to switch between light mode and dark mode on your WeWeb app:\nTIP The theme variable is in the context of the user's browser . This means that the value is stored in the user's browser. If user A switches to dark mode on browser A and login to the app later in browser B, they will view the app in browser B in light mode. But if they login again in browser A, they will view the app in dark mode.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP The theme variable is in the context of the user's browser . This means that the value is stored in the user's browser. If user A switches to dark mode on browser A and login to the app later in browser B, they will view the app in browser B in light mode. But if they login again in browser A, they will view the app in dark mode."
                ]
            },
            "https://docs.weweb.io/workflows/actions/change-theme.html#leveraging-library-colors": {
                "title": "Leveraging library colors ​",
                "content": "When you create a color in a WeWeb library, you have the option to attach the color to a Light theme or a Dark theme:\nUsing this option makes it easier to build and maintain beautiful themes because you can bind to a color from the library instead of handling color options in a separate variable:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/change-theme.html#theme-at-app-level": {
                "title": "Theme at app level ​",
                "content": "At app level, you can choose:\na default theme for your app background options and hierarchy (e.g. Color > Gradient > Image ) a default color background\nTo apply themes at app level, go to More > Settings",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/fetch-collection.html",
        "page_title": "Fetch collection | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/fetch-collection.html#a-common-use-case": {
                "title": "A common use case ​",
                "content": "A modal display scenario is a perfect example - rather than loading all possible data when your page loads, you might want to fetch specific collection data only when a user opens a modal. This improves initial page performance while ensuring data is fresh when needed.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/binding-filtering/load-more-button.html",
        "page_title": "Load more button | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/binding-filtering/load-more-button.html#step-1-add-a-button": {
                "title": "Step 1: Add a button ​",
                "content": "Drag-and-drop a Button on the Canvas or Navigator, wherever you want to display it on the Page.\nIn the example below, we placed it below our list of calls:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/binding-filtering/load-more-button.html#step-2-create-a-variable": {
                "title": "Step 2: Create a variable ​",
                "content": "This Variable will be called loadMore and of type Number .\nIts default value will be the number of items you want to display on the page by default.\nIn the example below, we want to display 5 items by default.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/binding-filtering/load-more-button.html#step-3-add-a-workflow": {
                "title": "Step 3: Add a workflow ​",
                "content": "On the button you created in step 1, add a workflow to Change variable value of the variable you created in step 2.\nIn the example below, we are saying:\nwhen the user clicks on the button, add 5 to the loadMore variable\nAs a result, every time a user clicks on the button, the loadMore variable will be incremented by 5:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/binding-filtering/load-more-button.html#step-4-link-the-collection-to-the-variable": {
                "title": "Step 4: Link the collection to the variable ​",
                "content": "Now, when we bind our Collection List, we need to tell the browser to display the number of items in the loadMore variable we defined in step 2.\nIn order to do that, we have to slice our list:\nWARNING The slice formula is an Array function so you need to bind to your collection['data'] . If you bind to collection , it will not work because you are binding to an Object.\nIn the screenshot above, we see that:\nwe are binding to a list of items calls['data'] instead of the entire collection object calls we are using the slice no-code formula to display the items from index 0 to the index X X changes based on the value of the loadMore variable, which changes every time the user clicks on the button (see step 3)",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/binding-filtering/load-more-button.html#step-5-test-in-preview": {
                "title": "Step 5: Test in Preview ​",
                "content": "Ok, that should work.\nBack in Preview mode, you can click on the button to see the loadMore variable be updated in the Navigator and the additional items displayed on the page:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/editor/figma/import-figma-designs.html",
        "page_title": "Import Figma designs | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/editor/figma/import-figma-designs.html#add-weweb-plugin-in-figma": {
                "title": "Add WeWeb plugin in Figma ​",
                "content": "WeWeb has an official Figma to WeWeb plugin that can import styles from Figma , but also import designs.\nIn order to start using the plugin, find and add it from the Figma Community on the following Figma to WeWeb Toolkit plugin link .\nLOOKING TO IMPORT COLORS & TYPOGRAPHIES? With our plugin, you can also import Figma color and typographies to the library of a WeWeb project. Learn how to import Figma styles in a WeWeb library.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "LOOKING TO IMPORT COLORS & TYPOGRAPHIES? With our plugin, you can also import Figma color and typographies to the library of a WeWeb project. Learn how to import Figma styles in a WeWeb library."
                ]
            },
            "https://docs.weweb.io/editor/figma/import-figma-designs.html#best-practices-for-best-results": {
                "title": "Best practices for best results ​",
                "content": "Before using the plugin, it's important to remember that the quality of the conversion will largely depend on the organization of the Figma designs .\nHere are some important guidelines to follow:\nuse Auto Layout as much as possible, use frames instead of groups, and avoid shapes such as rectangles and ellipses, use frames instead.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/figma/import-figma-designs.html#tag-elements-in-figma": {
                "title": "Tag elements in Figma ​",
                "content": "Since WeWeb has it's own element types such as buttons and inputs which cannot be defined natively in Figma, users have to do that manually.\nOur plugin makes this easy to do by allowing you to select any number of frames and click on the corresponding element type in the plugin interface.\nThis node in Figma will be imported as the selected element inside WeWeb:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/figma/import-figma-designs.html#import-design-in-weweb": {
                "title": "Import design in WeWeb ​",
                "content": "After tagging elements and making sure you are using Auto Layout, the design is ready to be imported.\nIn Figma, click on the Generate button and wait for the success notification. In the WeWeb Editor, click on More > Import from Figma . Then, paste the design on any of your pages.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/formulas/date.html",
        "page_title": "Date formulas | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/formulas/date.html#date-plugin": {
                "title": "Date plugin ​",
                "content": "In order to access no-code date formulas, you'll first need to add the Date extension plugin:\nTIP When you install the Date plugin, we add the Day.js library to your WeWeb project. It's a small 2kB library but we don't include it by default because not every project needs to work with dates and we don't want to add the weight of the library on projects that don’t need it.\nOnce you have added the Date plugin, you'll be able to see all the related no-code formulas in the explorer tab:",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP When you install the Date plugin, we add the Day.js library to your WeWeb project. It's a small 2kB library but we don't include it by default because not every project needs to work with dates and we don't want to add the weight of the library on projects that don’t need it."
                ]
            },
            "https://docs.weweb.io/formulas/date.html#favorite-date-format": {
                "title": "Favorite date format ​",
                "content": "In order to display dates in a uniform way throughout your project, you can configure your favorite date format at plugin level:\nTIP Working with dates can be tricky at first. If you get stuck on formatting, we recommend you to through this article on the ISO date format .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Working with dates can be tricky at first. If you get stuck on formatting, we recommend you to through this article on the ISO date format ."
                ]
            },
            "https://docs.weweb.io/formulas/date.html#date": {
                "title": "date ​",
                "content": "If you use date in a formula with no parameters, you will get the current date and time in Coordinated Universal Time (i.e. the UTC timezone).\nThe no-code date formula can take the same parameters as the JavaScript newDate() function.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/date.html#daterealtime": {
                "title": "dateRealtime ​",
                "content": "Same as date , dateRealtime will return the current date and time in Coordinated Universal Time (i.e. the UTC timezone).\nThat date, however, will be updated every second in real-time:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/date.html#todateiso": {
                "title": "toDateISO ​",
                "content": "This formula allows you to set a date in ISO format:\nthe first parameter of the formula should be a date, the second parameter is the format you want to display the date in\nTIP If you have configured a favorite date format at plugin level, the second parameter of the toDateISO formula is optional:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/date-formulas5.Cq0tc6MW.gif"
                ],
                "tips": [
                    "TIP If you have configured a favorite date format at plugin level, the second parameter of the toDateISO formula is optional:"
                ]
            },
            "https://docs.weweb.io/formulas/date.html#formatdate": {
                "title": "formatDate ​",
                "content": "This formula allows you to format a date:\nIn the example above, you see:\nfirst we start with a date formula that returns a date in ISO format, then we wrap the formatDate formula around it to display the date in the preferred format we configured at plugin level, we add a second parameter to the formatDate formula to display the date in a different format, finally, we change the display language to Spanish.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/date.html#totime": {
                "title": "toTime ​",
                "content": "This formula calculates the time between now and X, and returns the information in text format:\nIn the toTime formula, the relative time compares the date now, to the date in the first parameter.\nFor example:\nToday, August 23rd, 2023 was \"2 months ago\" Today, August 23rd, 2024 is \"in 10 months\"\nThe formula will accept the following parameters:\na date in ISO format (required), whether to display the suffix or not (optional), and the language in which the text should be displayed (optional)",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/date.html#fromtime": {
                "title": "fromTime ​",
                "content": "This formula calculates the time between X and now, and returns the information in a text format.\nIn the fromTime formula, the relative time compares the date in the first parameter, to the date now.\nFor example:\nOn August 23rd, 2023, today was \"in 2 months\" On August 23rd, 2024, today will be \"10 months ago\"\nThe formula will accept the following parameters:\na date in ISO format (required), whether to display the suffix or not (optional), and the language in which the text should be displayed (optional)",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/date.html#comparedate": {
                "title": "compareDate ​",
                "content": "This formula allows you to compare two dates:\nYou can count the number of:\nyears ( year or y ), quarters ( quarter or Q ), months ( month or M ), weeks ( week or w ), etc.\nTIP When you hover over a no-code formula name in the WeWeb, you can view tooltips on what parameters and values it expects.\nBy default, the result of the compareDate formula will be a round number.\nIf the floating parameter is true , you can see decimals in the calculation. For example, there are 4.6 months between November 4th, 2023 and March 23rd, 2024:",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP When you hover over a no-code formula name in the WeWeb, you can view tooltips on what parameters and values it expects."
                ]
            },
            "https://docs.weweb.io/formulas/date.html#totimestamp": {
                "title": "toTimestamp ​",
                "content": "The toTimestamp formula expects a date in ISO format and will return the timestamp value for that date in a number format:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/date.html#getbrowsertimezone": {
                "title": "getBrowserTimezone ​",
                "content": "The getBrowserTimezone formula will return the timezone your user's browser is in.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/date.html#convertdatetimezone": {
                "title": "convertDateTimezone ​",
                "content": "The convertDateTimezone formula allows you to display a different date and time depending on the user's timezone.\nThe first parameter must be a date that contains time and timezone information.\nFor example, the date formula returns the date and time in the UTC timezone. Here, we are converting the current date and time to the date and time in New York:\nBy default, or if you add false as a third parameter, the result will show the date and time in the new timezone.\nYou can, however, choose to preserve the date and time of the original timezone:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/date.html#formatdatetimezone": {
                "title": "formatDateTimezone ​",
                "content": "The formatDateTimezone formula allows you to take a date provided in ISO format, and display it:\nin the format of your choice, e.g. \"MMMM D, YYYY - HH:MM\" converted to the timezone of your choice, e.g. \"America/Mexico_City\" in the language of your choice, e.g. es for Spanish",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/date.html#troubleshooting": {
                "title": "Troubleshooting ​",
                "content": "Working with dates can be tricky at first.\nHere are a few things to consider when a date formula is not behaving as you would expect:\nISO date values and date formats should be strings. Make sure to enclose them in between quotes \"like_this\" Timestamp values should be numbers. If you are storing timestamps in a text format, use the toNumber formula around it to convert it so the date formulas can work with it ISO date formats are easy to mess up. When in doubt, check out this article with numerous examples of ISO date formats",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/settings-billing-code-export/workspace-settings/components-tab.html",
        "page_title": "The Components Tab | WeWeb Documentation",
        "sections": {}
    },
    {
        "url": "https://docs.weweb.io/plugins/data-sources/xano-data.html",
        "page_title": "Xano data source | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/data-sources/xano-data.html#add-xano-plugin": {
                "title": "Add Xano plugin ​",
                "content": "In order to get data from Xano, you first need to add Xano as a data source in WeWeb, in Plugins > Data sources :\nTIP Xano recently deprecated API keys. You now have to create an Access Token to connect a Xano account to a WeWeb project. If you have existing WeWeb projects that use the deprecated method of authentication, you don't need to do anything. However, you can choose to update them by going to the plugin configuration step and adding an Access Token: This will ensure your project continues to work properly in the event that Xano stops supporting the deprecated API key completely in the future. No other action is required on the WeWeb side of things. Updating the Xano data source plugin configuration will not affect the collections you previously added to WeWeb using that plugin.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/xano-dataold.U4BH0UiG.png"
                ],
                "tips": [
                    "TIP Xano recently deprecated API keys. You now have to create an Access Token to connect a Xano account to a WeWeb project. If you have existing WeWeb projects that use the deprecated method of authentication, you don't need to do anything. However, you can choose to update them by going to the plugin configuration step and adding an Access Token: This will ensure your project continues to work properly in the event that Xano stops supporting the deprecated API key completely in the future. No other action is required on the WeWeb side of things. Updating the Xano data source plugin configuration will not affect the collections you previously added to WeWeb using that plugin."
                ]
            },
            "https://docs.weweb.io/plugins/data-sources/xano-data.html#plugin-configuration": {
                "title": "Plugin configuration ​",
                "content": "When you add the Xano data source plugin, you will be invited to:\nAdd your personal access token Select the Xano instance you want to connect Add the custom domain of your instance (if you have one) Select the workspace you want to connect\nWARNING The Metadata API Key field expects the value of the Xano personal access token. Make sure to paste the access token itself, NOT the key ID of the access token: Note: you will only be able to view the access token once, when you first create it. Make sure to copy/paste it there and then or you might have to create a new access token down the line.\nTIP The custom domain field is optional. It is useful if you need to: replace the base URL of Xano with the custom domain you setup in Xano, or replace an old base URL with a new base URL (e.g. if you went from a free plan to a paid plan in Xano)",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/xano-access-token.CFdE1Tbn.png"
                ],
                "tips": [
                    "TIP The custom domain field is optional. It is useful if you need to: replace the base URL of Xano with the custom domain you setup in Xano, or replace an old base URL with a new base URL (e.g. if you went from a free plan to a paid plan in Xano)"
                ]
            },
            "https://docs.weweb.io/plugins/data-sources/xano-data.html#generate-access-token-in-xano": {
                "title": "Generate access token in Xano ​",
                "content": "To generate or find your access token in Xano, you have 2 options.\nOption 1 - go to Account > Metadata API :\nOption 2 - go to the Metadata API section in the Settings of your instance:\nWARNING By default, when you create an access token in Xano, all the options will be enabled: Depending on your use case, you may want to customize those settings. Bear in mind, however, that these settings will affect what you can and cannot do in WeWeb. For example, if you remove the reading rights to the Database and API Groups, WeWeb will have no way of fetching the data from your tables.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/xano-data5.DTob_4XG.png"
                ],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/xano-data.html#data-sources-optional": {
                "title": "Data sources (optional) ​",
                "content": "Depending on your Xano plan, you may have the option to support multiple data sources .\nFor example, you could have a live data source and a test data source:\nTIP As you can see above, Xano will display a banner at the top of your workspace to remind you what data source you're looking at at any given moment.\nIn WeWeb, you could decide to work with different data sources depending on whether you're working:\ninside the WeWeb editor, on the app published in the WeWeb staging environment, or on the published app in production.\nIn the example below, we chose to work with the data from the test data source inside the WeWeb editor, and on the app in staging:\nAs a result, when working in the WeWeb editor or viewing the app published in staging, the data that is displayed will be the data from the test data source in Xano. We will not be able to see or work with the data in the live data source.\nWARNING As per Xano's user documentation , \"it's important to note that a test data source will have exactly the same data schema and structure as your live environment. You cannot change, edit, or delete the schema or database tables in your test data source environment. The test environment allows you to use different data or records so that you can perform tests in your API without affecting your live data.\"",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP As you can see above, Xano will display a banner at the top of your workspace to remind you what data source you're looking at at any given moment."
                ]
            },
            "https://docs.weweb.io/plugins/data-sources/xano-data.html#branching-optional": {
                "title": "Branching (optional) ​",
                "content": "Depending on your Xano plan, you may have the option to support multiple branches .\nIn Xano, a branch is \"a copy of a workspace's business logic (APIs, Functions, Addons, and Tasks).\"\nWARNING Branches in Xano do not apply to the database. To enable test data in Xano, you need to create a test Data source .\nCreating a branch in Xano allows you to make changes to your API endpoints, functions, add-ons and tasks in a safe environment, without affecting your app in production.\nIn the example below, we created a v2 branch in Xano to add features related to admin permissions in our app:\nIn WeWeb, we continue to use the Xano v1 branch in our app in production, but we use the Xano v2 branch to test things in the WeWeb Editor and in our app published in staging:\nWhen we're ready, we can decide to make the v2 branch live in Xano and update the Xano data source plugin in WeWeb.\nWARNING When working with workflows in WeWeb, we will list all the fields that are available in the LIVE Xano branch, even if you have chosen an EDITING Xano branch for the WeWeb Editor in the Xano data source plugin configuration. To avoid confusion, we recommend that all your Xano branches include the same fields.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/xano-data.html#global-headers-optional": {
                "title": "Global headers (optional) ​",
                "content": "If you need to add custom global headers to all your Xano calls, you can configure these in the Xano data source plugin:\nOr at collection level:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/xano-data.html#get-data-from-xano": {
                "title": "Get data from Xano ​",
                "content": "Once you have configured the Xano data source plugin, you will be able to create a collection to get Xano data into WeWeb:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/xano-data.html#select-a-source": {
                "title": "Select a source ​",
                "content": "In the Data tab, when you create a new collection, you will be invited to:\nname the collection, select a data source (for example Xano), and choose a collection mode (for example dynamic).\nTIP To build dynamic web applications, we highly recommend creating Dynamic collections. However, at times, when you need to pre-render content or bypass API rate limits from a data source, you may want to consider working with a Static or Cached collection instead.\nStatic : the collection will be fetched once, on our servers, while the app is built. Everytime this collection is used in your app, the data will be pre-rendered (better for SEO, can slow down the publish process).\nDynamic : the collection will be fetched on the client side, when the app is loaded. This is the best option if you want to fetch data that changes often (like a list of products).\nCached : the collection will be fetched on the client side, but from our servers. This is the best option if you want to fetch data that changes often, but you want to avoid hitting any API rate limit (but you'll need to refresh the data yourself when it changes).",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP To build dynamic web applications, we highly recommend creating Dynamic collections. However, at times, when you need to pre-render content or bypass API rate limits from a data source, you may want to consider working with a Static or Cached collection instead."
                ]
            },
            "https://docs.weweb.io/plugins/data-sources/xano-data.html#configuration": {
                "title": "Configuration ​",
                "content": "When you create the collection, you will be invited to choose the API group and endpoint you want to use in WeWeb.\nIn the example below, we call a GET endpoint in Xano that returns all the tickets related to the user who is currently authenticated to our app:\nWARNING If authentication is enabled on your Xano endpoint, you will need to login as a user of your app in WeWeb to fetch data. Otherwise, Xano will return an Unauthorized error. Same goes if your endpoint requires a user to be have a specific role to read data. You will then need to login as a user with that role to create the collection and fetch data in WeWeb.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/xano-data.html#fetch-data": {
                "title": "Fetch data ​",
                "content": "By default, Xano collections are fetched automatically and preserved on navigation:\nThis means that:\nif a collection is used on a page of your app, it will be fetched automatically, and if the user navigates to another page, the collection will not be refetched.\nThere may be use cases where you want to change these default settings.\nWhy disable automatic fetch?\nIf you have a collection that you don’t need immediately on page load, you should consider disabling the automatic fetch to improve performances. For example, you might want to fetch a collection when the user opens a modal on a page and not on page load.\nIf you disable the automatic fetch on a collection, you'll need to remember to trigger a workflow that fetches the collection every where you need it in the app.\nWhy disable preserve on navigation?\nA common use case where you don't want to preserve on navigation: a collection that fetches a single item selected on a previous page (if you preserve on navigation, there might be a blink where the info from the previously selected item appears while the API call takes place to fetch the info of the new selected item)\nThis is especially problematic if the collection data concerns a specific user with potentially private information. You want to make sure that data is not preserved on navigation in case 2 users connect to your app using the same browser.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/xano-data.html#sort-filter-and-pagination": {
                "title": "Sort, filter, and pagination ​",
                "content": "Once you have fetched data from Xano, you can add sort it, filter it, and paginate it in the frontend:\nWARNING The video above was recorded on a previous version of the WeWeb editor but the same logic still applies.\nOnce you have added a data collection in WeWeb, you will be able to display that data on a WeWeb page. Learn how to display collection data .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/xano-data.html#update-xano-data": {
                "title": "Update Xano data ​",
                "content": "To update a table in Xano from a WeWeb app, you'll have to create a workflow that makes a request to Xano.\nIn the screenshot below, you can see that:\nwe make a request to Xano that will affect the Joyce's tutorial - careers API group we're making a POST call in the application table updating three fields in the table we pass the values of these three fields\nUse case: when an authenticated user applies to a job, we make a request to Xano to update the application table with the id of the selected job and authenticated user as well as the URL of the resume that was uploaded by the user.\nTIP If the field in Xano is an integer, make sure to pass an integer value in your API call. If you try sending a string to an integer field, you will get an error. If you try sending an integer to a field that expects an array, you will also get an error. Learn more about variables and data types .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP If the field in Xano is an integer, make sure to pass an integer value in your API call. If you try sending a string to an integer field, you will get an error. If you try sending an integer to a field that expects an array, you will also get an error. Learn more about variables and data types ."
                ]
            },
            "https://docs.weweb.io/plugins/data-sources/xano-data.html#using-xano-auth": {
                "title": "Using Xano Auth? ​",
                "content": "If you have added the Xano data source plugin and are using the Xano Auth plugin for authentication , you do NOT need to bind the user's auth token when adding a Xano collection or using a Xano action in your workflows.\nThe Xano data source plugin will automatically recognize the current user's authentication token and send it to Xano when making an API call.\nYou only need to manually bind the current user's authentication token if you are making API calls to Xano via the REST API plugin and not the Xano data source plugin.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/xano-data.html#migrating-from-airtable-to-xano": {
                "title": "Migrating from Airtable to Xano? ​",
                "content": "It's fairly common for Airtable enthusiasts to switch to backends like Xano or Supabase when scaling web-apps.\nWeWeb's Xano plugin facilitates the switch from Airtable to Xano.\nStep 1 – You can use Xano's import function to import Airtable tables. The import will keep the same field names and references between tables:\nStep 2 – In WeWeb, you can then change the data source of your collection from Airtable to Xano.\nYour collection lists and collection list items will remain unchanged on the page because WeWeb will automatically recognize the data structure.\nTIP There may be issues with table and column names that include spaces in Airtable because those spaces will automatically be replaced by underscores ( _ ) in Xano. As a result, WeWeb will think it's two different tables or columns and your bindings will break. To prevent this from happening, you may want to rename the tables and columns in Airtable with underscores instead of spaces, and refresh your Airtable collections in WeWeb before doing the import in Xano.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP There may be issues with table and column names that include spaces in Airtable because those spaces will automatically be replaced by underscores ( _ ) in Xano. As a result, WeWeb will think it's two different tables or columns and your bindings will break. To prevent this from happening, you may want to rename the tables and columns in Airtable with underscores instead of spaces, and refresh your Airtable collections in WeWeb before doing the import in Xano."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/auth-systems/auth0.html",
        "page_title": "Auth0 | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/auth-systems/auth0.html#plugin-configuration": {
                "title": "Plugin configuration ​",
                "content": "To connect your Auth0 account to WeWeb, you’ll need 3 pieces of information:\nYour Auth0 Domain Your Auth0 Token A default application name",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/auth0.html#_1-your-auth0-domain": {
                "title": "1. Your Auth0 domain ​",
                "content": "in Auth0, go to Applications > APIs copy the URL for your API audience paste it in WeWeb.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/auth0.html#_2-your-auth0-token": {
                "title": "2. Your Auth0 token ​",
                "content": "back on the Applications > APIs screen in Auth0 click on Auth0 Management API > API explorer create a test application (if you don't have one already) copy the token and paste it in WeWeb",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/auth0.html#_3-default-application-name": {
                "title": "3. Default application name ​",
                "content": "By default, this will be the name of your WeWeb project but you can change it if you want to refer to a Single Page Application you created previously in your Auth0 workspace:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/auth0.html#define-redirections": {
                "title": "Define redirections ​",
                "content": "In order for the signup, login, and sign out flows to work properly, you'll need to define pages where users are directed:\nafter they signed in – for example a personalized dashboard after they log out or when they try to access a private page without being logged in – for example a login or a home page\nWARNING The Page to redirect after the user signed-in should be a public page. If you wish to redirect authenticated users to a private page, you should create and select an empty public page with a workflow triggered On page load that redirects them to the page of your choice. This may seem strange but it's how third-party authentication works on the web : the browser needs to get a cookie from the auth provider, and read it before fetching the user and redirecting them to the chosen page. If you redirect to a private page, you'll get an error because the browser won't have had time to read the cookie and fetch the user before arriving on the private page. It needs a short stop on a public page first.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/auth0.html#auth0-configuration": {
                "title": "Auth0 configuration ​",
                "content": "Once you have configured the Auth0 plugin in WeWeb, Auth0 will automatically create 2 applications which are both equally important to add authentication to your WeWeb project:\na Machine to Machine application, named API Explorer Application a Single Page Application, named whatever you defined in the default application name above\nTIP If you don't have a Single Page Application in Auth0, we will create one for you automatically but if you already have one or more, we'll leave them.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP If you don't have a Single Page Application in Auth0, we will create one for you automatically but if you already have one or more, we'll leave them."
                ]
            },
            "https://docs.weweb.io/plugins/auth-systems/auth0.html#machine-to-machine": {
                "title": "Machine to Machine ​",
                "content": "Machine to Machine is a private application that allows Auth0 to communicate with the public application you publish. It's what allows your app to get the list of all available roles in Auth0 for example.\nMake sure to give the Machine to Machine application permission to interact with your app:\nWARNING If you don't have a Machine to Machine application in Auth0, you will not have a token and will therefore not be able to setup the Auth0 plugin in WeWeb.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/auth0.html#single-page-application": {
                "title": "Single Page Application ​",
                "content": "Single Page Application is a public application that allows the WeWeb app you published (or are consulting in preview mode inside the WeWeb Editor) to communicate with Auth0. For example, it's what allows users to signup, login, or get their info when they're logged.\nThere are a few things you need to configure in the Settings of your Auth0 SPA to ensure users can signup, login, and sign out.\nApplication Login URI : this should be the URL of a dedicated login page on your published application . Allowed Callback URLs : this should include the URLs where users are redirected after logging in (e.g. in preview mode and on the live app). Allowed Logout URLs : this should include the URLs where users are redirected after logging out (e.g. in preview mode and on the live app). Allowed Web Origins : this should include the domain name of your published app and https://editor.weweb.io so that you can test your user flows inside the WeWeb Editor.\nTIP We recommend including several URLs in each \"Allowed\" field: the relevant URLs inside the WeWeb Editor so you can test the Auth0 plugin while you're building, and the relevant URLs of your published app, so everything works live.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP We recommend including several URLs in each \"Allowed\" field: the relevant URLs inside the WeWeb Editor so you can test the Auth0 plugin while you're building, and the relevant URLs of your published app, so everything works live."
                ]
            },
            "https://docs.weweb.io/plugins/auth-systems/auth0.html#signup-login-flows": {
                "title": "Signup & login flows ​",
                "content": "You can allow new users to sign up or login to your app by triggering a workflow with one of the Auth0 Login actions with the Sign in or Sign up option enabled.\nIn the example below, when a user clicks on a button on our page, an Auth0 popup will open and they will be invited to fill out their information to sign up to our app:\nThere's no other action required in the workflow. After signing up or logging in, the user will be redirected to the page defined in the Auth0 plugin configuration:\nTIP Don't hesitate to check your list of users in Auth0 to ensure your signup and login flows are working correctly. In the screenshot below, we can see our list of users and when they last logged in:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/auth0-9.DQwgq87C.png"
                ],
                "tips": [
                    "TIP Don't hesitate to check your list of users in Auth0 to ensure your signup and login flows are working correctly. In the screenshot below, we can see our list of users and when they last logged in:"
                ]
            },
            "https://docs.weweb.io/plugins/auth-systems/auth0.html#roles-permissions": {
                "title": "Roles & permissions ​",
                "content": "In some cases, you'll want to restrict access to pages of your web-app based on roles & permissions.\nIn order to do this, there are a few steps to take:\ndefine roles in Auth0 (those will be automatically added to WeWeb via the plugin) create user groups in WeWeb and define what role or roles a user needs to be part of that group define what user groups are allowed to visit the page you want to gate",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/auth0.html#_1-user-roles-in-auth0": {
                "title": "1. User roles in Auth0 ​",
                "content": "To define user groups in WeWeb, you first need to create user roles in Auth0 > User Management > Roles > Create Role\nThen, you can assign roles to users in User Management > Users > Assign Roles\nOnce you have user roles in Auth0, you'll be able to see them in WeWeb:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/auth0.html#_2-user-groups-in-weweb": {
                "title": "2. User groups in WeWeb ​",
                "content": "Assuming you've added user roles in Auth0, you'll be able to create user groups in WeWeb and define what role(s) users need to have to be part of each group:\nWARNING When you add several roles to a user group, a user needs to have BOTH these roles. It's an AND statement, not OR.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/auth0.html#restrict-page-access": {
                "title": "Restrict page access ​",
                "content": "By default, when you add a new empty page in your WeWeb app, everybody can access it, even users who have not signed in.\nYou can limit access to your WeWeb app at page level:\ngo to the page settings > Private access restrict access to Authenticated users if applicable, select which authenticated user group(s) can access the page",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/auth0.html#personalize-ux": {
                "title": "Personalize UX ​",
                "content": "You can personalize the popup displayed to users when they signup or login in the Branding section of your Auth0 account:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/css-and-styling/css-properties.html",
        "page_title": "CSS Properties | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/css-and-styling/css-properties.html#specific": {
                "title": "Specific ​",
                "content": "This section is a shortcut to find the most used CSS properties for a given element. It's different for every element.\nHere are the available CSS properties in this section (all elements included):",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#text-lang": {
                "title": "Text - {lang} ​",
                "content": "This is where you can bind the text displayed to a variable, typically, when you want to display some text that comes from a plugin or 3rd-party API.\nYou'll have to bind it for every language that's currently activated on this page.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#typography": {
                "title": "Typography ​",
                "content": "This option is useful when you want to standardise text styles in your app. Here, you can select a text type (for example: heading, subtitle, etc) that you created in the typography section of your app.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#size": {
                "title": "Size ​",
                "content": "To set the element text's size (in px, em or rem). Equivalent to CSS' font-size .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#font-family": {
                "title": "Font family ​",
                "content": "To set the font of the text element. Equivalent to CSS' font-family .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#font-weight": {
                "title": "Font weight ​",
                "content": "To set the weight of the text element (for example: bold, semibold, etc). Equivalent to CSS' font-weight .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#line-height": {
                "title": "Line height ​",
                "content": "To set the height between two lines of text in the element. Equivalent to CSS' line-height .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#alignment": {
                "title": "Alignment ​",
                "content": "To align the text right, center, left of justified. Equivalent to CSS' text-justified .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#text-color": {
                "title": "Text color ​",
                "content": "To set the color of the text. Equivalent to CSS' color .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#text-decoration": {
                "title": "Text decoration ​",
                "content": "To set the decoration of the text (for example: underline, overline, etc). Equivalent to CSS' text-decoration .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#no-wrap": {
                "title": "No-wrap ​",
                "content": "To prevent the text from wrapping to the next line. Equivalent to CSS' white-space .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#character-case": {
                "title": "Character case ​",
                "content": "To set the case of the text (for example: uppercase, lowercase, etc). Equivalent to CSS' text-transform .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#text-shadows": {
                "title": "Text shadows ​",
                "content": "To add a shadow to the text. Equivalent to CSS' text-shadow .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#letter-spacing": {
                "title": "Letter spacing ​",
                "content": "To set the space between each letter of the text. Equivalent to CSS' letter-spacing .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#word-spacing": {
                "title": "Word spacing ​",
                "content": "To set the space between each word of the text. Equivalent to CSS' word-spacing .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#text-background": {
                "title": "Text background ​",
                "content": "To set the background color of the text. Equivalent to CSS' background-color .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#image": {
                "title": "Image ​",
                "content": "This is where you can bind an image source, typically, when it comes from an external tool or API. Equivalent to HTML's src .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#fit": {
                "title": "Fit ​",
                "content": "To set how the image should be displayed (for example: cover, contain, etc). Equivalent to CSS' object-fit .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#overlay": {
                "title": "Overlay ​",
                "content": "To set the color of the image overlay. Equivalent to CSS' background-color .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#filters": {
                "title": "Filters ​",
                "content": "To apply filters to the image (for example: grayscale, blur, etc). Equivalent to CSS' filter .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#items": {
                "title": "Items ​",
                "content": "This is where you can bind a list of items to be displayed inside a container (like a div, columns, etc).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#direction": {
                "title": "Direction ​",
                "content": "To set the direction of the items (for example: horizontal, vertical, etc). Equivalent to CSS' flex-direction .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#rows-gap": {
                "title": "Rows gap ​",
                "content": "To set the space between each row of items. Equivalent to CSS' grid-row-gap .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#columns-gap": {
                "title": "Columns gap ​",
                "content": "To set the space between each column of items. Equivalent to CSS' grid-column-gap .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#justify": {
                "title": "Justify ​",
                "content": "To set how the items should be aligned horizontally (for example: left, center, right, etc). Equivalent to CSS' justify-content .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#alignment-1": {
                "title": "Alignment ​",
                "content": "To set how the items should be aligned vertically (for example: top, center, bottom, etc). Equivalent to CSS' align-items .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#reverse-order": {
                "title": "Reverse order ​",
                "content": "To reverse the order of the items. Equivalent to CSS' flex-direction .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#push-last-to-the-end": {
                "title": "Push last to the end ​",
                "content": "To push the last item to the end of the container. Equivalent to CSS' justify-content .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#display-type": {
                "title": "Display type ​",
                "content": "To set the display type of the items (for example: list, grid, etc). Equivalent to CSS' display .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#presets": {
                "title": "Presets ​",
                "content": "Set of predefined display types for columns. Equivalent to CSS' display .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#text": {
                "title": "Text ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#sanitize": {
                "title": "Sanitize ​",
                "content": "This is for when you bind a text to a data provided by the user, for example a comment you have register in the database.\nThis will escape special characters, so that you are not vulnerable to XSS attacks .\nThe option is not active by default because sometimes you want these characters to be interpreted (for example making some part of the text bold with markup).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#sizing": {
                "title": "Sizing ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#width": {
                "title": "Width ​",
                "content": "To set the width of the element. Equivalent to CSS' width .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#height": {
                "title": "Height ​",
                "content": "To set the height of the element. Equivalent to CSS' height .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#max-width": {
                "title": "Max-width ​",
                "content": "To set the maximum width of the element. Equivalent to CSS' max-width .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#min-width": {
                "title": "Min-width ​",
                "content": "To set the minimum width of the element. Equivalent to CSS' min-width .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#max-height": {
                "title": "Max-height ​",
                "content": "To set the maximum height of the element. Equivalent to CSS' max-height .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#min-height": {
                "title": "Min-height ​",
                "content": "To set the minimum height of the element. Equivalent to CSS' min-height .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#spacing": {
                "title": "Spacing ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#padding": {
                "title": "Padding ​",
                "content": "To set the padding of the element. Equivalent to CSS' padding .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#margin": {
                "title": "Margin ​",
                "content": "To set the margin of the element. Equivalent to CSS' margin .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#display": {
                "title": "Display ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#alignment-2": {
                "title": "Alignment ​",
                "content": "To set how the element should be aligned vertically (for example: top, center, bottom, etc). Equivalent to CSS' align-items .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#display-1": {
                "title": "Display ​",
                "content": "To set if an element should be displayed or not. Equivalent to CSS' display: none .\nTIP This is how you can hide an element on responsive mode or when a condition is met.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP This is how you can hide an element on responsive mode or when a condition is met."
                ]
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#opacity": {
                "title": "Opacity ​",
                "content": "To set the opacity of the element. Equivalent to CSS' opacity .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#position": {
                "title": "Position ​",
                "content": "To set the position of the element. Equivalent to CSS' position .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#z-axis": {
                "title": "Z axis ​",
                "content": "To set the z-index of the element. Equivalent to CSS' z-index .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#cursor": {
                "title": "Cursor ​",
                "content": "To set the cursor of the element. Equivalent to CSS' cursor .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#overflow": {
                "title": "Overflow ​",
                "content": "To set the overflow of the element. Equivalent to CSS' overflow .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#background": {
                "title": "Background ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#color": {
                "title": "Color ​",
                "content": "To set the background color of the element. Equivalent to CSS' background-color .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#element": {
                "title": "Element ​",
                "content": "To set the background element (like and image or video) of the element. Equivalent to CSS' background .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#borders-shadows": {
                "title": "Borders & Shadows ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#borders": {
                "title": "Borders ​",
                "content": "To set the borders of the element. Equivalent to CSS' border .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#corner-radius": {
                "title": "Corner radius ​",
                "content": "To set the corner radius of the element. Equivalent to CSS' border-radius .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#shadows": {
                "title": "Shadows ​",
                "content": "To set the shadows of the element. Equivalent to CSS' box-shadow .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#advanced": {
                "title": "Advanced ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#transform": {
                "title": "Transform ​",
                "content": "To set the transform of the element. Equivalent to CSS' transform .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#transition": {
                "title": "Transition ​",
                "content": "To set the transition of the element. Equivalent to CSS' transition .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#perspective": {
                "title": "Perspective ​",
                "content": "To set the perspective of the element. Equivalent to CSS' perspective .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#custom-css": {
                "title": "Custom CSS ​",
                "content": "Here, you can add custom CSS to the element. Equivalent to CSS' style .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-properties.html#binding-properties": {
                "title": "Binding Properties ​",
                "content": "Note that, you can bind the value of any CSS Property to another formula or variable. You can use this feature to manipulate the properties based on interactions elsewhere in the app, or even with workflows",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/settings-billing-code-export/workspace-settings/projects-tab.html",
        "page_title": "The Projects Tab | WeWeb Documentation",
        "sections": {}
    },
    {
        "url": "https://docs.weweb.io/plugins/extensions/pwa.html",
        "page_title": "PWA | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/extensions/pwa.html#pre-requisites": {
                "title": "Pre-requisites ​",
                "content": "Before using the PWA plugin, ensure you've enabled mobile app features in WeWeb. Refer to our mobile app features guide guide for instructions.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#installation": {
                "title": "Installation ​",
                "content": "Navigate to Plugins > Extensions > PWA in your WeWeb project. Add the PWA plugin. No additional setup is required!\nOnce installed, you can use PWA actions in your workflows. Each action is tagged with supported mobile platforms (Android and/or iOS).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#add-to-home-screen": {
                "title": "Add to Home Screen ​",
                "content": "This action allows users to install your PWA on Android devices, making it accessible from the home screen like a native app.\nIn the example below, we added a button and triggered a workflow that installs the app on click:\nAdd a button that triggers a workflow on click\nAdd the Add to Home Screen action\nIf anyone clicks on the button now, they will be able to add the application to the home screen.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#how-it-works": {
                "title": "How it works ​",
                "content": "Websites meeting PWA criteria (manifest file, service worker) can offer installation. Learn how to enable PWA in a WeWeb app . The action prompts Android users to add the PWA to their device's home screen. The PWA opens in a standalone window without browser UI.\nWARNING The Add To Home Screen prompt only appears in the published/live version of your app, not in the editor environment.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/pwa-add-to-home-screen.DXFRVR-f.png"
                ],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#geolocate": {
                "title": "Geolocate ​",
                "content": "The Geolocate action accesses the user's geographical location.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#usage": {
                "title": "Usage ​",
                "content": "Triggers a browser permission prompt for location access. Accesses device location services (GPS, Wi-Fi, cellular networks).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#use-cases": {
                "title": "Use cases: ​",
                "content": "Location-based services or content Customized user experiences Mapping and navigation features Location tagging for posts or photos",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#implementation": {
                "title": "Implementation ​",
                "content": "Add the Geolocate action to a workflow (e.g. on app load or page load or on click of a button)\nIf we test the action, we will get a timestamp and the user’s current coordinates:\nUse a Change variable value action to store the result of the Geolocate action, which includes: a coords object: the device's geographical position, and a timestamp : the date and time of when the location was obtained.\nWARNING When testing the Geolocate action, you will receive an error if location services are disabled in your browser:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/pwa-geolocate-error.B9_ZMUp-.png"
                ],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#share": {
                "title": "Share ​",
                "content": "Enables users to share text and URLs using the device's native sharing mechanism.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#functionality": {
                "title": "Functionality: ​",
                "content": "Opens the device's built-in share menu. Users can choose from available sharing options (messaging apps, email, social media).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#implementation-1": {
                "title": "Implementation: ​",
                "content": "Add a Share button to your page.\nCreate a workflow triggered by the button click. Include the Share action with the following fields: Title : Main headline for social media shares Text : Description under the title URL : Web address to be shared\nTIP The Share action doesn't support direct file sharing, but you can share URLs of files.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP The Share action doesn't support direct file sharing, but you can share URLs of files."
                ]
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#vibrate": {
                "title": "Vibrate ​",
                "content": "Causes Android devices to vibrate based on a specified pattern.\nWARNING This action is only available for Android devices due to an iOS limitation. PWAs on iOS are limited to what Safari supports. They can only use Web APIs that Safari implements and Safari does no support the Vibration API .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#use-cases-1": {
                "title": "Use cases ​",
                "content": "Notification systems (e.g. vibrate when user receives new message) Error management (e.g. vibrate if user login failed) Mobile gaming (e.g. vibrate when user attemps forbidden move)",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#implementation-2": {
                "title": "Implementation: ​",
                "content": "Add the Vibrate action to a workflow (e.g. triggered by a realtime event like a database change or a user attempting a forbidden move in a chess game) Define a vibration pattern as an array of numbers: Odd-indexed elements (including the first) specify vibration periods in milliseconds. Even-indexed elements specify pause periods in milliseconds.\nExample: [200, 100, 300, 200]\n200ms vibration 100ms pause 300ms vibration 200ms pause",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#show-notification": {
                "title": "Show Notification ​",
                "content": "Presents alerts and updates to users.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#when-will-it-work": {
                "title": "When will it work: ​",
                "content": "app closed ❌ app in use ✅ app opened but screen locked ✅ app opened in the background ✅",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#implementation-3": {
                "title": "Implementation: ​",
                "content": "Add the Show notification action to your workflow. Configure the following fields: Title : Main headline of the notification Body : Detailed content Icon URL : URL of a small icon (optional) Image URL : URL of a larger image (optional) Tag : Identifier for grouping or replacing notifications Data : Additional JSON-formatted data Vibration Pattern : Array of numbers defining vibration behavior\nTIP We recommend experimenting with the data you want to include in your notifications. As an example, here's what a notification with a title, body, and icon URL looks like in Chrome's desktop version:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/pwa12.ns0mVXqm.png"
                ],
                "tips": [
                    "TIP We recommend experimenting with the data you want to include in your notifications. As an example, here's what a notification with a title, body, and icon URL looks like in Chrome's desktop version:"
                ]
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#recommended-dimensions-for-icon-and-image-urls": {
                "title": "Recommended dimensions for icon and image URLs: ​",
                "content": "width around 300px height around 200px (this idea is to have a landscape format) Avoid images wider than 1500-2000px The image size should not exceed 1-2MB",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#device-motion": {
                "title": "Device Motion ​",
                "content": "There are two actions for web-apps to access your phone's movement data:\nRequest Motion Permission : Asks for the user's consent to access motion data, ensuring privacy and security. Listen Device Motion : If permission is granted, this action captures real-time data from the user's phone sensors (mainly accelerometer and gyroscope) to respond to the device's movements.\nTIP These actions can be executed at any desired moment when motion data is required, whether during page load or upon a specific user interaction, such as a click.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP These actions can be executed at any desired moment when motion data is required, whether during page load or upon a specific user interaction, such as a click."
                ]
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#use-cases-2": {
                "title": "Use cases ​",
                "content": "Step counter Mobile gaming Augmented reality apps",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#implementation-4": {
                "title": "Implementation: ​",
                "content": "For the Start button of the step counter app, we could trigger a workflow with those two actions:\nAs an example, we might add a Change a variable action to update a stepCount variable based on motion data available in the From PWA section of variables.\nIn the context of a fitness app, these properties can be used to create features such as step counting, distance estimation, and basic fitness tracking. While not as accurate as dedicated devices, they can add functional elements to your app. The possibilities of what you can do with device motion are endless!\nLearn more about device motion properties .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#additional-device-information": {
                "title": "Additional Device Information ​",
                "content": "The PWA plugin also provides access to various device information:\nbattery : This object provides information about the battery status of the device on which the PWA is running. It includes details such as the battery - level and whether the device is charging. deviceInfo : Provides general information about the device itself, such as the model, operating system, and other hardware details, including brand/model. network : Offers details about the network status of the device, such as whether the device is connected to the internet, the type of connection (Wi-Fi, cellular). pageVisibility : This variable shows if the PWA page is visible to the user. If it's true, the page is open and visible in the foreground. If it's false, the page is in the background or the device screen is off.\nWARNING All of these properties are read-only and cannot be changed.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/pwa.html#conclusion": {
                "title": "Conclusion ​",
                "content": "The PWA plugin significantly enhances your WeWeb projects, bringing them closer to native app functionality. By leveraging these features, you can create more engaging and responsive web applications that take full advantage of mobile device capabilities.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/return-a-value.html",
        "page_title": "Return a value | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/return-a-value.html#how-it-works": {
                "title": "How it works ​",
                "content": "Add a Return a value action to your workflow Set the value you want to return\nIn subsequent actions, access the returned value via the 'result' field of the workflow action:\nWhile this is a dedicated action for returning values, other actions like Custom JavaScript can also make data available via its respective 'result' field through their return statements.\nTIP This action provides a clean way to pass processed data back when used in reusable workflows that are executed within other workflows. It's also useful for storing intermediate results that you need to use in later steps of your workflow, making your data flow clearer and more organized.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP This action provides a clean way to pass processed data back when used in reusable workflows that are executed within other workflows. It's also useful for storing intermediate results that you need to use in later steps of your workflow, making your data flow clearer and more organized."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/reset-variable-value.html",
        "page_title": "Reset variable value | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/reset-variable-value.html#use-cases": {
                "title": "Use cases ​",
                "content": "Form handling: reset form fields after submission Counter reset: return counters or incrementors back to their starting value State management: clear temporary states or flags after they're no longer needed Filter reset: clear applied filters back to their default values Navigation: reset page-specific variables when leaving a page",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/reset-variable-value.html#how-to-use": {
                "title": "How to use ​",
                "content": "Select the Reset variable value action Choose the variable you want to reset\nThe variable will return to its default value when the action is triggered\nTIP Use this action in combination with other workflow actions to create clean state management in your application. For example, after processing a form submission, you can reset all form variables to create a fresh start for the next entry.\nWARNING You shouldn’t trigger workflows on submit buttons. For your users to benefit from automatic form field validation, you should trigger submit workflows on the form container. Unless you are 100% sure of what you’re doing and want to bypass this behavior.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Use this action in combination with other workflow actions to create clean state management in your application. For example, after processing a form submission, you can reset all form variables to create a fresh start for the next entry."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/update-collection.html",
        "page_title": "Update collection | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/update-collection.html#the-problem-it-solves": {
                "title": "The problem it solves ​",
                "content": "Previously in WeWeb, when modifying data through an API request (like deleting a user or updating a record), you had to follow a two-step process:\nMake an API request to modify back-end data Fetch the entire collection again to update the UI\nThis approach had some drawbacks:\nRequired two server requests Created unnecessary network traffic Increased server load\nUltimately, these meant potentially unnecessary load times for the user of your app.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/update-collection.html#the-solution": {
                "title": "The solution ​",
                "content": "The Update collection action enables immediate UI updates by directly modifying the collection after a successful API request, eliminating the need to re-fetch the collection. This means you can:\nImmediately update your collection Update your UI instantly Use just a single API request to update your back-end data",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/update-collection.html#use-cases": {
                "title": "Use cases ​",
                "content": "Immediate user feedback Temporary data views Performance optimization Enhanced user experience Client-side data manipulation\nWARNING This action only changes what you see on the screen temporarily. These changes will be lost if you refresh the page. To permanently save your changes to your database, you must always use this action together with an API request .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/update-collection.html#update-types": {
                "title": "Update types ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/update-collection.html#replace-all": {
                "title": "Replace All ​",
                "content": "The Replace All update type overwrites the entire content of a collection with new data. In the example below, we are setting the collection to have a text value of \"No collection\" and using the Log action to display it in the editor's Logs tab. This will show you the updated content of the collection after it's been replaced:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/update-collection.html#update": {
                "title": "Update ​",
                "content": "Updates specific records in a collection while preserving the rest of the collection data.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/update-collection.html#configuration": {
                "title": "Configuration ​",
                "content": "Position Type\nBy index : Update by position (0 = first record) By id : Update by unique identifier\nMerge\nON : Updates only specified fields, keeps others OFF : Replaces entire record with new data\nData\nAccepts an object: {\"fieldName\": \"newValue\"} Defines what to update in the record",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/update-collection.html#example-with-merge-on": {
                "title": "Example with Merge ON: ​",
                "content": "When modifying records with Merge ON , you can update specific fields while preserving other data:\nCollection : characters Position : 1 (second record) Merge : ON Data : {\"status\": \"Dead\"}",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/update-collection.html#example-with-merge-off": {
                "title": "Example with Merge OFF: ​",
                "content": "With Merge OFF , the provided data completely replaces the existing record:\nCollection : characters Position : 1 (second record) Merge : OFF Data : {\"status\": \"Dead\"}",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/update-collection.html#insert": {
                "title": "Insert ​",
                "content": "The Insert type adds a new record to your collection at a specified position (index), allowing you to temporarily add data while preserving existing records.\nTIP The Data property for all update types except Delete must match what's in your collection: For simple values (text, numbers): Use the same type of value (example: for a collection of texts, provide a text value). For objects: With Merge ON : Provide just the fields you want to update With Merge OFF : Provide all fields since everything will be replaced",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP The Data property for all update types except Delete must match what's in your collection: For simple values (text, numbers): Use the same type of value (example: for a collection of texts, provide a text value). For objects: With Merge ON : Provide just the fields you want to update With Merge OFF : Provide all fields since everything will be replaced"
                ]
            },
            "https://docs.weweb.io/workflows/actions/update-collection.html#delete": {
                "title": "Delete ​",
                "content": "The Delete type removes a single record from your collection based on position or ID, leaving all other records unchanged.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/update-collection.html#refresh-filters-and-sort": {
                "title": "Refresh filters and sort ​",
                "content": "Refresh Filters and Refresh Sort control whether collection settings are reapplied after updating data.\nFilters\nON : items that no longer match your filters are automatically removed from the collection after your update OFF : items stay in the collection view until manual refresh, even if they no longer match filters\nSort\nON : items automatically move to their new positions when sorting values change OFF : items maintain their current positions regardless of value changes",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/editor/intro-to-html-css.html",
        "page_title": "🕸 Intro to HTML & CSS | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/editor/intro-to-html-css.html#why-do-we-need-to-know-this": {
                "title": "Why do we need to know this? ​",
                "content": "Well, WeWeb is a frontend builder. As a frontend builder, we help you visually design what will appear in the user’s browser.\nAs you have seen in the Intro to the Editor , WeWeb allows you to:\nAdd HTML elements in the Navigator Edit the content of these HTML elements in the Canvas Change the CSS style of these HTML elements in the Right Panel",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/fetch-collections-in-parallel.html",
        "page_title": "Fetch collections in parallel | WeWeb Documentation",
        "sections": {}
    },
    {
        "url": "https://docs.weweb.io/libraries/starter-kit.html",
        "page_title": "Starter Kit library | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/libraries/starter-kit.html#why-use-the-starter-kit": {
                "title": "Why use the Starter Kit? ​",
                "content": "To help you build faster, we built a Starter Kit library that you can use throughout your projects.\nWhenever you create a new blank project, you will be able to access all the related UI elements in the Add menu, under the Assets category:\nIn the example above, we added the Heading component from the Navigation category of the Starter Kit assets.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/starter-kit.html#what-s-included": {
                "title": "What's included ​",
                "content": "The Starter Kit includes, but is not limited to:\ntypographies for headers, labels, footnotes, and body, spacings for radiuses and containers, brand and functional colors, classes for buttons, components, and templates.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/starter-kit.html#starter-kit-versions": {
                "title": "Starter Kit versions ​",
                "content": "We regularly add and update assets in the Starter Kit to help you build projects with a consistent look-and-feel, faster.\nTo work with the latest Starter Kit version, open the Libraries panel, view available libraries and update the Starter Kit:\nTIP When working with libraries to develop your web-app, whether you're using WeWeb or custom code, you may encounter breaking changes. When that happens, you may decide to update the (no)code in your web-app to work with the library update or choose to continue working on an older version of the library. The WeWeb Starter Kit library is no different. If needed, you can rollback to a previous version of the Starter Kit library:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/starter-kit-change-version.CRlnsd-b.png"
                ],
                "tips": [
                    "TIP When working with libraries to develop your web-app, whether you're using WeWeb or custom code, you may encounter breaking changes. When that happens, you may decide to update the (no)code in your web-app to work with the library update or choose to continue working on an older version of the library. The WeWeb Starter Kit library is no different. If needed, you can rollback to a previous version of the Starter Kit library:"
                ]
            },
            "https://docs.weweb.io/libraries/starter-kit.html#remove-the-starter-kit": {
                "title": "Remove the Starter Kit ​",
                "content": "By default, the Starter Kit is added to new blank projects to save you time and help you build faster.\nHowever, if you do not wish to work with the WeWeb Starter Kit, you can remove it from the project all together:\nTIP If you change your mind, you can always go to the Marketplace tab of available libraries to add it again later:\nWARNING When you remove a library from a project, its assets will no longer be available in the project. As a result, you may see warnings informing you that a component from a library is missing: This warning is there to inform you that you removed a library that was being used inside the project. Consider adding it back to solve the issue.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/starter-kit-add.Bsn-x5TF.png",
                    "https://docs.weweb.io/assets/starter-kit-component-missing.D-nMgAqk.png"
                ],
                "tips": [
                    "TIP If you change your mind, you can always go to the Marketplace tab of available libraries to add it again later:"
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/editor/how-to-use-the-add-panel.html",
        "page_title": "Using the Add Panel | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/editor/how-to-use-the-add-panel.html#add-an-element-on-the-page": {
                "title": "Add an element on the page ​",
                "content": "The Add panel is where you can find UI blocks to add to your web application . These can be anything, from simple texts to complex forms.\nTo add an element to your app, simply drag and drop it where needed in your app:\nThe Add panel is composed of different sections, let's discover each category.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/how-to-use-the-add-panel.html#basics": {
                "title": "Basics ​",
                "content": "This is where you can find commonly used elements with limited style presets that act a great starting point to build your own design.\nBasic elements include but are not limited to sections, navigation menus, containers, headings, images, buttons, inputs, etc.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/how-to-use-the-add-panel.html#assets": {
                "title": "Assets ​",
                "content": "This is where you will find the UI components and templates from available libraries, i.e. the current project library and libraries that were added to the project.\nTIP Learn more about working with Libraries in WeWeb.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Learn more about working with Libraries in WeWeb."
                ]
            },
            "https://docs.weweb.io/editor/how-to-use-the-add-panel.html#multi-page-sections": {
                "title": "Multi-page sections ​",
                "content": "This is where you will find the list of existing sections in your app:\nLinked sections : lists all the sections that are linked on multiple pages in your app. Pages : lists all the pages in your app with all the sections (linked or not) on each page.\nFrom this panel, you can drag-and-drop a section on a page. When you drop a section on a page, you will be prompted to decide if you want to Create an instance or Create a copy of that section:\nTHE POWER OF MULTI_PAGE SECTIONS When you create an instance of a section, it is also called a \"Linked section\" or a \"Multi-page section\". The changes you make on one instance of a linked section will be reflected on all other instances of this section, throughout the app. Learn more about leveraging multi-page sections to improve page load speed of your WeWeb apps.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "THE POWER OF MULTI_PAGE SECTIONS When you create an instance of a section, it is also called a \"Linked section\" or a \"Multi-page section\". The changes you make on one instance of a linked section will be reflected on all other instances of this section, throughout the app. Learn more about leveraging multi-page sections to improve page load speed of your WeWeb apps."
                ]
            },
            "https://docs.weweb.io/editor/how-to-use-the-add-panel.html#plugin-ui-kits": {
                "title": "Plugin UI kits ​",
                "content": "Here, you'll find elements that are specific to the plugins you installed.\nFor example: authentication forms for auth plugins, charts, maps, etc.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/start-here/frequently-asked-questions.html",
        "page_title": "Frequently Asked Questions | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#backend": {
                "title": "Backend ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#can-weweb-build-my-backend": {
                "title": "Can WeWeb build my backend? ​",
                "content": "Yes. Thanks to our native integration with Supabase, you can now manage your backend from WeWeb.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#does-weweb-work-with-other-no-code-backend-tools": {
                "title": "Does WeWeb work with other no-code backend tools? ​",
                "content": "Absolutely. We built WeWeb with the idea that it would seamlessly integrate with other popular and up and coming no-code tools. We regularly add new native integrations with other tools .\nDon't hesitate to upvote or suggest new integrations .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#scaling-performance": {
                "title": "Scaling & Performance ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#what-are-weweb-s-limits": {
                "title": "What are WeWeb's limits? ​",
                "content": "WeWeb allows you to design pixel-perfect UIs and add complex frontend logic. You can program visually while we write clean standard code under the hood. Therefore, anything you can do in a regular programming language (PHP, Javascript, etc.) you can do in WeWeb.\nWhile we provide many features out of the box to help you build faster, you can also add custom code and import your own Vue.js components .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#what-if-i-need-more-capacity-outside-my-plan": {
                "title": "What if I need more capacity outside my plan? ​",
                "content": "We've structured our plans to be optimized for the products we see most often. However, should you need more capacity outside of any plan, whether it be file storage, projects, team seats or custom development, you can contact sales .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#data-ownership-code-export-and-self-hosting": {
                "title": "Data ownership, code export, and self-hosting ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#who-owns-my-data": {
                "title": "Who owns my data? ​",
                "content": "You own your data . This also include any data that your users might upload unless your agreement with them specifies otherwise.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#can-i-export-my-app-and-host-it-on-premise": {
                "title": "Can I export my app and host it on-premise? ​",
                "content": "Yes! You can export and self-host the code of projects on a yearly subscription plan.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#can-i-see-the-code-that-my-weweb-frontend-is-being-hosted-on": {
                "title": "Can I see the code that my WeWeb frontend is being hosted on? ​",
                "content": "Yes, you can see the code generated in your console and export the code of projects on a yearly subscription plan. However, you won’t be able to access the code of your project in your editor and live edit it.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#how-and-where-is-weweb-hosted": {
                "title": "How and where is WeWeb hosted? ​",
                "content": "All our infrastructure runs on AWS, in Northern Virginia. Every project built with WeWeb is deployed on AWS Cloudfront (CDN).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#can-i-import-my-html-css-to-weweb": {
                "title": "Can I import my HTML & CSS to WeWeb? ​",
                "content": "You can add custom code at project, page, and element level in WeWeb. You can also import custom Vue.js components in your projects, directly from your Github account. However, you will not be able to import a full web-app into WeWeb from code or other no-code tools.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#can-i-migrate-my-frontend-from-another-faas-frontend-as-a-service-provider": {
                "title": "Can I migrate my frontend from another FaaS (Frontend as a Service) provider? ​",
                "content": "We currently do not have a way to import or migrate a frontend from another provider. This is largely because the infrastructure and format can drastically differ.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#api": {
                "title": "API ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#can-i-make-an-external-api-request-in-weweb": {
                "title": "Can I make an external API request in WeWeb? ​",
                "content": "Yes. You can access and process an external API endpoint with WeWeb. You'll need to add the REST API plugin and either create a data collection (to get data) or a workflow (to interact with that data).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#marketplace": {
                "title": "Marketplace ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#will-the-marketplace-have-templates-that-i-can-use-to-start-my-frontend-with": {
                "title": "Will the Marketplace have templates that I can use to start my frontend with? ​",
                "content": "Yes, we are very excited to begin releasing templates for our users to use for their projects. We have many useful and exciting templates on our roadmap. We are also planning to open the Marketplace to our users so that they can build their own templates and offer them to other users.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#can-i-develop-an-extension-or-template-and-sell-it-on-the-weweb-marketplace": {
                "title": "Can I develop an extension or template and sell it on the WeWeb Marketplace? ​",
                "content": "Very soon! A handful of users are alpha testing the Marketplace and have started developing and selling extensions and templates to other users.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#pricing": {
                "title": "Pricing ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#how-much-will-weweb-cost-and-how-do-i-upgrade": {
                "title": "How much will WeWeb cost and how do I upgrade? ​",
                "content": "Pricing depends on which plan you choose. For detailed information on the cost of each plan and what is included, please visit https://weweb.io/pricing . In order to upgrade, please visit the Billing page in your WeWeb dashboard and select \"Upgrade\"",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#what-is-the-basic-advanced-roles-permissions": {
                "title": "What is the Basic & Advanced Roles & Permissions? ​",
                "content": "The Basic Roles & Permissions means that every authenticated user will have access to the same pages and app functionalities. The Advanced Roles & Permissions means that you can have different user groups with different permissions, so you could have an Admin role separate from Premium roles for example.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#account": {
                "title": "Account ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#can-i-put-a-hold-on-or-pause-my-account": {
                "title": "Can I put a hold on or pause my account? ​",
                "content": "If you need to put a hold on things by canceling your subscription and wish to come back later, WeWeb can preserve your data for up to 90 days from the end of your subscription. You must contact support to do so. After you cancel, you will not be able to access your workspace. When you are ready to come back, you must contact support again and re-initiate payment on your subscription to access your workspace. After the 90 day grace period your data and workspace could be lost and you may have to start over from scratch.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#can-i-get-a-refund-on-my-paid-plan": {
                "title": "Can I get a refund on my paid plan? ​",
                "content": "WeWeb does not allow refunds of any kind on its monthly paid plans. You can choose to cancel or downgrade your Workspace and/or Project subscriptions at any time.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#to-downgrade-a-workspace-plan": {
                "title": "To downgrade a Workspace plan: ​",
                "content": "Select your workspace Go to the Members tab of your workspace Click on downgrade to message us your request. We will process it promptly.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#to-downgrade-a-project-plan": {
                "title": "To downgrade a Project plan: ​",
                "content": "Go to the Plans tab of the project Click on downgrade to message us your request. We will process it promptly.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#compliance": {
                "title": "Compliance ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#can-i-satisfy-gdpr-compliance-while-using-weweb-as-my-frontend": {
                "title": "Can I satisfy GDPR Compliance while using WeWeb as my frontend? ​",
                "content": "Yes. WeWeb and its underlying infrastructure provider (AWS) provide the necessary tools and safeguards to support GDPR compliance.\nHowever, it is crucial to recognize that a significant portion of the responsibility lies with the application itself. By adhering to the key GDPR requirements and fulfilling their respective obligations, application builders can create robust and privacy-conscious solutions using a tool like WeWeb.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#can-i-satisfy-hipaa-compliance-while-using-weweb-as-my-frontend": {
                "title": "Can I satisfy HIPAA Compliance while using WeWeb as my frontend? ​",
                "content": "Yes. If you use a HIPAA-compliant backend and call it through our REST API plugin, in dynamic mode, your data will not transit through our product, making the whole project HIPAA compliant.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#will-my-data-transit-through-your-infrastructure": {
                "title": "Will my data transit through your infrastructure? ​",
                "content": "It depends on the Data Source and Collection Mode you choose.\nWhen using data source plugins in dynamic mode, the data never goes through our servers, except if you explicitly choose to make a server-side request or in the case of the Airtable plugin. This is because of the way Airtable handles API keys and manages authorizations.\nIf you use data source plugins in static mode, then we will pre-render static pages with your data and deploy them on AWS cloudfront CDN. In that configuration your data will be hosted on our infrastructure.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#seo": {
                "title": "SEO ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#how-does-weweb-compare-to-other-tools-for-seo": {
                "title": "How does WeWeb compare to other tools for SEO? ​",
                "content": "It depends on the tool! Historically, static website builders like Webflow and builders with server-side rendering (SSR) like WordPress had an SEO advantage over tools like WeWeb, Bubble, and others that generate dynamic content in JavaScript.\nThis happens because when search engine bots first visit a JavaScript application, they initially see only the base HTML file before any JavaScript runs. In dynamic applications like WeWeb, this base file is nearly empty since all content is added later by JavaScript running in the browser. By contrast, static/SSR sites deliver complete HTML with all content already included.\nHowever, in recent years, search engines have significantly evolved to better handle JavaScript content, as more websites are built with modern JS frameworks like React or Vue. While the initial indexing might take a few extra days compared to static sites, search engine bots now effectively crawl and index JavaScript-based content during subsequent visits.\nHere are Google’s thoughts on the topic :",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#is-weweb-suitable-for-large-marketplaces": {
                "title": "Is WeWeb suitable for large marketplaces? ​",
                "content": "Yes. While dynamic JavaScript applications have some SEO tradeoffs, many major marketplaces successfully use similar JavaScript-based architectures. The key is understanding that search indexing may take longer initially, but this is rarely a significant barrier for marketplace success which often depends more on:\nProduct/service quality User experience Marketing strategy Network effects Direct traffic",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#what-can-i-do-to-help-my-weweb-pages-rank-well-in-search-engines": {
                "title": "What can I do to help my WeWeb pages rank well in search engines? ​",
                "content": "There are many things you can do on your WeWeb apps that will improve its Lighthouse scores and, most importantly, the user’s experience (both of which influence SEO rankings).\nFollow SEO best practices when building:\nAdd titles & metadata to all your pages Add alt text on all your images Use headings for titles Use elements with the correct HTML tags (e.g. buttons, select, etc.)\nDon’t load too much data on the page:\nCompress images Keep your pages short and simple Avoid superfluous nested containers Add backend filters on big sets of data Fetch collections only when you need them Use multi-page sections to avoid reloading data the user has already loaded Minimize unecessary custom scripts",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#agencies": {
                "title": "Agencies ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#does-weweb-work-with-agencies": {
                "title": "Does WeWeb work with Agencies? ​",
                "content": "Absolutely! We have a plan specifically tailored towards dev shops, freelancers and agencies. WeWeb partners are referenced here .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#can-i-collaborate-with-others-on-a-project-in-weweb": {
                "title": "Can I collaborate with others on a project in WeWeb? ​",
                "content": "Yes. Development can work better if a team is involved. Depending on which package you're subscribed to, you can grant access to other teammates to your instance and work simultaneously on a project together.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#custom-development": {
                "title": "Custom Development ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#can-i-create-a-custom-plan-with-weweb": {
                "title": "Can I create a custom plan with WeWeb? ​",
                "content": "Yes. This can be done by contacting us and inquiring about our custom enterprise setup.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/frequently-asked-questions.html#can-i-hire-a-weweb-expert-to-help-develop-my-custom-frontend": {
                "title": "Can I hire a WeWeb expert to help develop my custom frontend? ​",
                "content": "Yes. WeWeb partners are referenced here .",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/css-and-styling/css-animations.html",
        "page_title": "CSS Animations | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/css-and-styling/css-animations.html#different-approaches": {
                "title": "Different approaches ​",
                "content": "To add CSS animations to an element on a WeWeb page:\nselect that element, on the page go to the CSS styles tab of that element, and choose your preferred way of creating an animation in the Animation dropdown\nYou can find the all the definitions of the CSS animation properties here .\nThere are three main ways to get started:\nManually add keyframes. Import keyframes. Ask WeWeb AI.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-animations.html#animation-properties": {
                "title": "Animation properties ​",
                "content": "In the Animation panel, you can set the following properties to customize your animations:\nDuration : Define the duration of the animation in milliseconds (ms). Delay : Add a delay before the animation starts, also in milliseconds (ms). Transition : Choose how the animation transitions between keyframes. Options include: ease ease-in ease-out ease-in-out linear Iterations : Set how many times the animation repeats. You can specify a number or select Infinite for continuous looping. Alternate : Enable or disable the alternate mode. When enabled, the animation reverses direction after each iteration. Fill Mode : Control how the animation applies styles outside its active period: None : No styles from the animation are applied before the animation starts or after it ends. The element will only be styled during the animation's active period. Forwards : The element retains the styles defined in the animation's final keyframe after the animation ends. Backwards : The element immediately applies the styles defined in the animation's first keyframe, even during the animation's delay period. Both : Combines the behaviors of Forwards and Backwards . The element applies the styles from the first keyframe during the delay and retains the styles from the final keyframe after the animation ends. Play State : Toggle the animation's play state ( On or Off ). Keyframes : Open the editor to create, import, or edit keyframes for the animation.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-animations.html#keyframes-editor": {
                "title": "Keyframes editor ​",
                "content": "If you're familiar with keyframes, you can create your own using our no-code keyframes editor:\nTo add an animation, select the keyframe where you want to define properties. Then, you can modify any CSS property from the style panel. You can identify properties set on a keyframe with their green highlight. Do that for the initial keyframe, the final one, and all the intermediate ones to create a smooth animation.\nIn the example above, we:\ncopy Keyframe #1 which creates Keyframe #2 move Keyframe #2 on the animation timeline change the value of Keyframe #2 and changing it to seconds instead of percentage delete Keyframe #2 to get back where we started",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-animations.html#import-keyframes": {
                "title": "Import keyframes ​",
                "content": "To save time, you can also paste and import keyframes in the WeWeb keyframes editor:\nIn the example above, we:\nfirst opened the keyframes editor to import the keyframes used as examples in MDN's documentation , then used the WeWeb editor to limit the animation to 3 counts.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-animations.html#weweb-ai": {
                "title": "WeWeb AI ​",
                "content": "If CSS animations to come easily to you, we recommend asking WeWeb AI for help to get started:\nIn the example above, we:\nfirst asked WeWeb AI to \"make an animation where the text grows larger and larger then smaller and smaller fairly slowly\", then used the WeWeb editor to slow down the animation.\nTIP You can also edit the keyframes generated by WeWeb AI in the keyframes editor:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/animations-copilot-edit.DNoDYtv1.png"
                ],
                "tips": [
                    "TIP You can also edit the keyframes generated by WeWeb AI in the keyframes editor:"
                ]
            },
            "https://docs.weweb.io/css-and-styling/css-animations.html#copy-paste-an-animation": {
                "title": "Copy/paste an animation ​",
                "content": "To reuse an animation, you can copy it and paste it on a similar element (e.g. here, we are copy/pasting an animation between two text elements):\nWARNING You can only paste animations that were copied from the same type of element (e.g. text on text, container on container, etc.)",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/extensions/google-maps.html",
        "page_title": "Google Maps | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/extensions/google-maps.html#add-google-plugin": {
                "title": "Add Google plugin ​",
                "content": "To add the Google plugin, go to Plugins > Extensions > Google :\nThat's it. No configuration required at plugin level.\nOnce you have added the Google extension, you will be able to access Google Maps and Google reCAPTCHA elements.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/google-maps.html#add-maps-element": {
                "title": "Add Maps element ​",
                "content": "You will find the Maps element in Add > Google :\nYou can drag-and-drop this element in the Canvas or in the Navigator:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/google-maps.html#how-the-map-element-works": {
                "title": "How the map element works ​",
                "content": "Before you can display locations on the map, you'll need to provide the following data:\nA Google API key Name of the location Latitude Longitude\nWith that in mind, there are two-prerequisites to use the map element in WeWeb:\nyou are able to generate a Google API Key you have added a Collection with a list of locations in WeWeb",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/google-maps.html#google-configuration": {
                "title": "Google configuration ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/google-maps.html#create-a-google-api-key": {
                "title": "Create a Google API Key ​",
                "content": "The first thing the map element needs is a Google API Key that is enabled for the Maps Javascript API:\nTo get this API key, you will need to:\nLog into to the Google Cloud Platform Create a developer project Enable the Maps Javascript API as shown above Create an API key in the Credentials menu as show below Add editor.weweb.io/* as an HTTP referrer Restrict the API key to the Maps Javascript API Enable the free trial in Google\nIf you get stuck here, please consult the Google developer documentation .\nWARNING You will notice our API key is visible in our screen recordings. Rest assured that we have deactivated these keys after recording. An API key should always be kept secret. Do not share your API keys with anyone.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/google-maps.html#http-referrer": {
                "title": "HTTP referrer ​",
                "content": "For the Google Maps element to work properly inside the WeWeb editor and when your app is published, you need to tell Google what HTTP referrers you authorized:\neditor.weweb.io/* to authorize the WeWeb editor, weweb-preview.io/* if you've published your WeWeb without a custom domain, and yourcustomdomain.com/* if you've published your WeWeb project on a custom domain.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/google-maps.html#map-settings": {
                "title": "Map settings ​",
                "content": "In the specific settings of the map element, you will be able to:\npaste the Google API key, bind your list of locations in the Markers field, map the column names of your location collection, and toggle settings on and off (e.g. zoom control, street view control)\nWARNING The Markers field expects a list of locations in an array. You can bind it to collection data, an Array variable, or use the createArray formula to define your list of locations.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/google-maps.html#display-data-on-the-map": {
                "title": "Display data on the map ​",
                "content": "There are three steps to display data based on the marker that is selected by a user.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/google-maps.html#_1-create-a-variable-of-object-type": {
                "title": "1- Create a variable of Object type ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/google-maps.html#_2-update-the-variable-based-on-the-marker-clicked-by-the-user": {
                "title": "2- Update the variable based on the marker clicked by the user ​",
                "content": "Create a workflow to update the selectedMarker variable you created in step 1.\nThis workflow should be:\nexecuted on the Map element in your navigator triggered on marker click , to update change variable value of the selectedMarker variable you created in step 1",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/google-maps.html#_3-add-a-text-element-on-the-page": {
                "title": "3- Add a Text element on the page ​",
                "content": "It could be anywhere on the page and styled any way you want.\nThe point is that you will bind this element to information from the selectedMarker variable which will change every time a user clicks on a different marker in the map.\nIn the example below, we bound the text element to the Name field of the selectedMarker variable:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/google-maps.html#troubleshooting": {
                "title": "Troubleshooting ​",
                "content": "If you run into any issues, the most likely explanation is that something is not configured properly on the Google side of things.\nDouble check that:\nin WeWeb you added the API key for the correct Google project, in Google, you added the relevant HTTP referrers for the WeWeb editor and published project, enabled the API key for the Maps Javascript API, and enabled the free trial in Google.\nIf this is still not working for you, don't hesitate to reach out in the WeWeb Community where we'll do our best to help.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/pages/intro-to-pages.html",
        "page_title": "Intro to pages | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/pages/intro-to-pages.html#create-a-page": {
                "title": "Create a page ​",
                "content": "Here's an interactive tutorial on how to create a page:\nLet's go over all the steps:\nOpen the page dropdown in the top navbar Click on Add page Name your page Decide if you want to copy content from an existing page If copying from another page, decide if you want some sections to be linked Click on Create to create the page\nTIP Linked sections are referred to as Multi-page sections in WeWeb. They are useful to improve the user experience and page loading time of your web application. Learn more about using multi-page sections in WeWeb .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Linked sections are referred to as Multi-page sections in WeWeb. They are useful to improve the user experience and page loading time of your web application. Learn more about using multi-page sections in WeWeb ."
                ]
            },
            "https://docs.weweb.io/pages/intro-to-pages.html#page-name": {
                "title": "Page name ​",
                "content": "The name of the page. This is the name that you will see in the page panel:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/intro-to-pages.html#page-folder": {
                "title": "Page folder ​",
                "content": "The folder that the page is in. You can create folders to organize your pages:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/intro-to-pages.html#draft-mode": {
                "title": "Draft mode ​",
                "content": "Pages with draft mode Enabled won't be included when you publish your WeWeb app.\nPages that are in draft mode can be identified by a different color in the Pages panel:\nWARNING Changing a page's Draft mode setting only takes effect after you (re)publish the app. For example, if the app was published when Page A had draft mode set to Disabled , changing the draft mode of Page A to Enabled in the WeWeb Editor won't remove the page from production until you publish the app again.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/intro-to-pages.html#url-paths": {
                "title": "Url paths ​",
                "content": "This is where you can change the path of the page. This is the path that your users will see in the URL bar when they visit the page.\nYou can also add variables to the path.\nFor example, if you add a variable called product_id to the path, you can access the value of the variable in the page by using the From path in current page section in the data explorer:\nTIP Adding variables is helpful to create detail pages for your collections. For example, if you have a collection called products , you can create a page called products/{product_id} and then use the product_id variable to display the details of the product. Learn more about dynamic collection pages .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Adding variables is helpful to create detail pages for your collections. For example, if you have a collection called products , you can create a page called products/{product_id} and then use the product_id variable to display the details of the product. Learn more about dynamic collection pages ."
                ]
            },
            "https://docs.weweb.io/pages/intro-to-pages.html#trigger-workflows": {
                "title": "Trigger workflows ​",
                "content": "This is where you can setup the workflows that will be triggered when the page is visited.\nIn the example below, before we fetch the collections present on the page, we trigger a workflow to update the current user's preferences:\nYou can trigger page workflows:\non app load before fetching collections, on page load before fetching collections, on app load, on page load, on page scroll, on page resize, on collection fetch error, on page unload.\nUse cases include, but are not limited to:\nreacting to a user scrolling up or down the page, updating a variable before a collection is fetched, checking for a Stripe purchase after a page is loaded, manipulating collection data before displaying it on the page, displaying a customized error message when a collection fetch fails, etc.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/intro-to-pages.html#custom-code": {
                "title": "Custom code ​",
                "content": "This is where you can add custom code to the page.\nYou can add custom code either:\nin the page header, so that the code is loaded right before the page is loaded (useful to add custom CSS or JS, but hurts SEO performances). in the page body, so that the code is loaded right after the page is loaded (useful for tracking scripts, doesn't hurt SEO performances).\nTIP When you add custom code at page level, the code is only added on that page. If you want to install app-wide custom code, you can do it in the Custom code section in the Settings panel. Learn more about adding custom code at app level .\nWARNING When you add custom CSS to a page or project, you should not add any <head> or <body> tags. WeWeb handles those tags for you.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP When you add custom code at page level, the code is only added on that page. If you want to install app-wide custom code, you can do it in the Custom code section in the Settings panel. Learn more about adding custom code at app level ."
                ]
            },
            "https://docs.weweb.io/pages/intro-to-pages.html#languages": {
                "title": "Languages ​",
                "content": "In the Languages panel, you can:\nAdd languages to your project Define the default language of your project Decide if you want to add the default language slug to the URL path of the current page Decide which languages should be enabled on the current page Toggle between active languages to preview the page content in different languages\nAssuming you have multiple languages enabled on a page:\nall the text elements on the page will invite you to provide the content in those languages you can then toggle between languages, and the appropriate text will be displayed",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/intro-to-pages.html#duplicate": {
                "title": "Duplicate ​",
                "content": "Here, you can duplicate the page. This is useful if you want to create a page that is similar to another one, but with different content.\nThe Duplicate page panel provides the same options as the Create new page panel with the Copy from option selected:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/intro-to-pages.html#create-collection-page-from": {
                "title": "Create collection page from ​",
                "content": "Here, you can create a static collection page:\nStatic collection pages are helpful if you want to publish collection pages with pre-rendered content.\nWARNING To create a static collection page, you will need to bind the Page collection and Page default path to a static collection. Learn more about static collection pages and dynamic collection pages .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/intro-to-pages.html#make-page-the-homepage": {
                "title": "Make {page} the homepage ​",
                "content": "Here, you can make the current page the homepage of your app. The homepage is the page that will be displayed when you access the root URL of your app.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/intro-to-pages.html#remove-page": {
                "title": "Remove page ​",
                "content": "Here, you can delete the page. This is useful if you want to remove a page from your app:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/extensions/sound.html",
        "page_title": "Sound | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/extensions/sound.html#add-plugin": {
                "title": "Add plugin ​",
                "content": "To build audio features in your WeWeb app, add the Sound plugin from the Plugins > Extensions menu:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/sound.html#sound-element-template": {
                "title": "Sound element template ​",
                "content": "When you add the Sound plugin, you will have the option to also add a ready-made sound template element:\nWhile the sound template element is fully customizable, it comes with pre-built workflows and bindings that will get you up and running in no time.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/sound.html#access-workflow-actions": {
                "title": "Access workflow actions ​",
                "content": "Once added to a project, the Sound plugin gives you access to a number of no-code workflow actions to load, play, pause, stop audio files and more.\nSimply create a workflow, and search for \"sound\" to view all the actions available:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/sound.html#load-sound": {
                "title": "Load sound ​",
                "content": "WARNING This step is a pre-requisite for every other step. Before you can let users interact with a sound or unload a sound, you will first need to load it.\nTo load a sound in a WeWeb app, you will need to:\ncreate a workflow with a \"Load sound\" action give the sound a unique ID provide a URL where the audio file can be found\nTIP Make sure you provide the URL to a file with a standard audio extension such as .mp3 or .wav. Otherwise, the sound may not be recognized as such.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Make sure you provide the URL to a file with a standard audio extension such as .mp3 or .wav. Otherwise, the sound may not be recognized as such."
                ]
            },
            "https://docs.weweb.io/plugins/extensions/sound.html#sound-variable": {
                "title": "Sound variable ​",
                "content": "Once you load a sound with a unique id, you will be able to access that sound's variable in the data explorer:\nThat variable includes helpful information including:\nisPlaying – whether the sound is currently being played or not, totalTime – how long the sound lasts (in seconds), currentTime and currentTimePercent : – the position of where the sound is at the moment (in seconds or percentage)\nYou can react to this information to build your own custom audio player.\nIn the example below, you can see we bound a progress bar element to the currentTimePercent value of our audio file:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/sound.html#sound-options": {
                "title": "Sound options ​",
                "content": "When you load a sound, it will come with default options:\nTo customize these values, you can either bind the Options to an array of objects or click on Add item to add a key value pair.\nIn the example below, we set the loop value to true :\nAs a result, the sound was loaded with the proper loop value and, if the user plays the sound, the audio file will be played on repeat.\nTIP If you choose to bind the Options to an array of objects, use the following format: [{\"key\":\"volume\",\"value\":0.5}, {\"key\":\"loop\",\"value\":true}] The Current value should be an array of objects with a value for key and a value for value as shown in the example below:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/sound-bind-options.CQpRm9aY.png"
                ],
                "tips": [
                    "TIP If you choose to bind the Options to an array of objects, use the following format: [{\"key\":\"volume\",\"value\":0.5}, {\"key\":\"loop\",\"value\":true}] The Current value should be an array of objects with a value for key and a value for value as shown in the example below:"
                ]
            },
            "https://docs.weweb.io/plugins/extensions/sound.html#sound-metadata": {
                "title": "Sound metadata ​",
                "content": "When you load a sound, you can add metadata. This can be anything you want.\nIn the example below, we added three fields: a cover album image, a song title, and an artist name:\nAs a result, we can bind that information to the audio player on our WeWeb page:\nTIP If you choose to bind the Metadata , the Current value should be an array of objects with a value for key and a value for value as shown in the example below: Note, the example above uses the following sample code in Javascript mode but you can use the same snippet in Formula mode without the return at the beginning: javascript return [ { \"key\" : \"title\" , \"value\" : \"Unforgettable\" }, { \"key\" : \"artist\" , \"value\" : \"Nat King Cole\" }, { \"key\" : \"artwork\" , \"value\" :[ { src: \"https://dummyimage.com/192x192\" , sizes: \"192x192\" , type: \"image/png\" , }, { src: \"https://dummyimage.com/256x256\" , sizes: \"256x256\" , type: \"image/png\" , } ]} ]",
                "code_snippets": [
                    {
                        "code": "return [\n    {\"key\":\"title\",\"value\":\"Unforgettable\"}, {\"key\":\"artist\",\"value\":\"Nat King Cole\"},\n    {\"key\":\"artwork\",\"value\":[\n      {\n        src: \"https://dummyimage.com/192x192\",\n        sizes: \"192x192\",\n        type: \"image/png\",\n      },\n      {\n        src: \"https://dummyimage.com/256x256\",\n        sizes: \"256x256\",\n        type: \"image/png\",\n      }\n    ]}\n]",
                        "language": "unknown"
                    },
                    {
                        "code": "javascriptreturn [\n    {\"key\":\"title\",\"value\":\"Unforgettable\"}, {\"key\":\"artist\",\"value\":\"Nat King Cole\"},\n    {\"key\":\"artwork\",\"value\":[\n      {\n        src: \"https://dummyimage.com/192x192\",\n        sizes: \"192x192\",\n        type: \"image/png\",\n      },\n      {\n        src: \"https://dummyimage.com/256x256\",\n        sizes: \"256x256\",\n        type: \"image/png\",\n      }\n    ]}\n]",
                        "language": "javascript"
                    }
                ],
                "images": [
                    "https://docs.weweb.io/assets/sound-bind-metadata._5MLISrg.png"
                ],
                "tips": [
                    "TIP If you choose to bind the Metadata , the Current value should be an array of objects with a value for key and a value for value as shown in the example below: Note, the example above uses the following sample code in Javascript mode but you can use the same snippet in Formula mode without the return at the beginning: javascript return [ { \"key\" : \"title\" , \"value\" : \"Unforgettable\" }, { \"key\" : \"artist\" , \"value\" : \"Nat King Cole\" }, { \"key\" : \"artwork\" , \"value\" :[ { src: \"https://dummyimage.com/192x192\" , sizes: \"192x192\" , type: \"image/png\" , }, { src: \"https://dummyimage.com/256x256\" , sizes: \"256x256\" , type: \"image/png\" , } ]} ]"
                ]
            },
            "https://docs.weweb.io/plugins/extensions/sound.html#unload-sound": {
                "title": "Unload sound ​",
                "content": "To maintain a responsive and efficient user experience, trigger the Unload sound action when a sound is no longer relevant.\nFor example, when transitioning between pages or when switching to a different section of your application.\nTIP Unloading sounds in your WeWeb project is crucial for optimizing performance and memory usage. By freeing up resources when sounds are no longer needed, you ensure smoother operation and prevent potential slowdowns or crashes, especially in complex applications or for users with limited device resources.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Unloading sounds in your WeWeb project is crucial for optimizing performance and memory usage. By freeing up resources when sounds are no longer needed, you ensure smoother operation and prevent potential slowdowns or crashes, especially in complex applications or for users with limited device resources."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/editor/intro-to-the-editor.html",
        "page_title": "Intro to the Editor | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/editor/intro-to-the-editor.html#topbar": {
                "title": "Topbar ​",
                "content": "The topbar is where you can:\ngo back to your dashboard or access project settings manage pages and page languages to your project add elements , libraries , plugins , and users to your web app ask WeWeb AI to help you build your app manage PWA settings , project assets, and custom code navigate between changes, editing and preview modes, and breakpoints see who is currently editing the project publish the app",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/intro-to-the-editor.html#project-settings": {
                "title": "Project settings ​",
                "content": "Here you can:\nview available shortcuts navigate to project settings navigate back to your dashboard switch the Editor to light or dark mode",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/intro-to-the-editor.html#pages": {
                "title": "Pages ​",
                "content": "This is where you can:\nsee the list of pages in your app, create new pages, and navigate between pages in your app.\nTIP When creating a new page, you can save time by copying it from another page and choosing which sections are linked: The changes you make in linked sections will be reflected on all the pages that use that linked section. Learn more about leveraging multi-page sections to improve your WeWeb app's performances.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/pages-add.6iNi5Jab.png"
                ],
                "tips": [
                    "TIP When creating a new page, you can save time by copying it from another page and choosing which sections are linked: The changes you make in linked sections will be reflected on all the pages that use that linked section. Learn more about leveraging multi-page sections to improve your WeWeb app's performances."
                ]
            },
            "https://docs.weweb.io/editor/intro-to-the-editor.html#languages": {
                "title": "Languages ​",
                "content": "Here you can toggle between languages to see how text content will vary depending on your user's browser language.\nTo enable this feature, you will first need to:\nadd a language to the project, and enable it on all relevant pages (you can choose to enable a language on some pages only)\nTIP Notice that when you have more than one language available on a page: for one text element in the HTML tree, you have several text binding options in the style tab, and the text displayed on the page matches the text defined for the language selected in the topbar",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/page-language-example.CJXowVm9.png"
                ],
                "tips": [
                    "TIP Notice that when you have more than one language available on a page: for one text element in the HTML tree, you have several text binding options in the style tab, and the text displayed on the page matches the text defined for the language selected in the topbar"
                ]
            },
            "https://docs.weweb.io/editor/intro-to-the-editor.html#add-panel": {
                "title": "Add panel ​",
                "content": "In the Add menu, you will find 4 categories of items:\nBasics : commonly used elements & layouts with minimal style presets. Assets : components & templates from the libraries available in the project. Multi-page sections : list of sections being used throughout the project. Plugin UI kits : UI blocks that are specific to plugins used in the project (e.g. charts, login forms).\nYou can drag-and-drop elements from the add menu on the canvas:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/intro-to-the-editor.html#libraries": {
                "title": "Libraries ​",
                "content": "In the Libraries menu, you will find:\nthe UI kit attached to your current project external UI kits that you have added to your project external UI kits that are available to you but that you haven't added to your project UI kits that are present in your workspace but that haven't been shared with the workspace\nTIP To use an external library in a project, it needs to have been have been shared in your workspace, and Added in the project. Learn more about using UI libraries in WeWeb .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP To use an external library in a project, it needs to have been have been shared in your workspace, and Added in the project. Learn more about using UI libraries in WeWeb ."
                ]
            },
            "https://docs.weweb.io/editor/intro-to-the-editor.html#plugins": {
                "title": "Plugins ​",
                "content": "The Plugins menu is where you will find:\nthe plugins that have already been added to the project, and all available WeWeb plugins.\nThere are currently 3 categories of plugings:\nData sources , like Xano, Supabase, REST API, and more Authentication systems , like Auth0, OpenID, JSON Web Tokens, and more Extensions , like Stripe, Charts, Mapbox, OpenAI, and more\nTo add a plugin, simply navigate to the plugin category of your choice, select a plugin and click on the Add button:\nLearn more about using plugins in WeWeb .\nTIP We don't add popular plugins like charts and dates to every project by default because, under-the-hood, each plugin loads a JS library. As in traditional web development, we refrain from adding uneeded libraries to your no-code apps.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP We don't add popular plugins like charts and dates to every project by default because, under-the-hood, each plugin loads a JS library. As in traditional web development, we refrain from adding uneeded libraries to your no-code apps."
                ]
            },
            "https://docs.weweb.io/editor/intro-to-the-editor.html#auth": {
                "title": "Auth ​",
                "content": "In the Auth menu, there are three sections:\nUsers where you can import, export, or view users of your app Roles where you can add user roles and user groups to handle user permissions File storage where you can see the files uploaded by app users\nLearn more about working with authentication plugins in WeWeb .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/intro-to-the-editor.html#weweb-ai": {
                "title": "WeWeb AI ​",
                "content": "This is where you can ask WeWeb AI how to build something or use a text prompt to create a section or element that you will then be able to drag-and-drop on the page.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/intro-to-the-editor.html#more": {
                "title": "More ​",
                "content": "In the more menu, you will find features that apply at app level:\nThis is where you can:\ndefine the manifest for the PWA version of the app, trigger workflows at app level, add languages to your project, manage project assets like images and fonts, upload custom app files (e.g. sitemap, manifest, service worker, etc.) add custom code at app level, add redirections, and a base tag, add custom headers, subscribe to a different plan, access WeWeb developer tools.\nLearn more about WeWeb app settings .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/intro-to-the-editor.html#canvas": {
                "title": "Canvas ​",
                "content": "The Canvas is the great big part in the middle. It’s where you can interact with the page in real-time.\nYou can select elements, move them around, and edit content right on the page:\nThe layout of everything you build in the Canvas follows the box model with sections and elements that are responsive by default.\nIt ensures that we’re generating clean, production-ready code.\nYou can edit and preview this on three different views – desktop, tablet, mobile – and publish when you’re ready:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/intro-to-the-editor.html#left-panel": {
                "title": "Left panel ​",
                "content": "In the left panel of the WeWeb editor, you will find:\nthe HTML tree of the page you're on in the Layout tab the data collections and global variables in the Data tab the global workflows and formulas in the Actions tab, and the debugger panel with app logs and the current state of variables",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/intro-to-the-editor.html#layout-panel": {
                "title": "Layout panel ​",
                "content": "In the Layout panel, you will see the HTML tree of the page you are currently on.\nIn the example below, you can see we are on the Jobs page and selected the heading element in our HTML tree.\nAs a result, the element is selected on the Canvas and we can edit its properties in the right panel:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/intro-to-the-editor.html#data-panel": {
                "title": "Data panel ​",
                "content": "In the Data panel, you can:\nsee all the collections available in the project or used on the current page, create new collections and variables, and update or delete existing ones.\nTIP Collection and variables are essential tools to build dynamic web applications in WeWeb. Learn more about working with collections and variables in WeWeb.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Collection and variables are essential tools to build dynamic web applications in WeWeb. Learn more about working with collections and variables in WeWeb."
                ]
            },
            "https://docs.weweb.io/editor/intro-to-the-editor.html#actions-panel": {
                "title": "Actions panel ​",
                "content": "In the Actions panel, you can create, edit, and delete global workflows and formulas that you can then use throughout your project.\nTIP Workflows and formulas are essential tools to build dynamic web applications in WeWeb. Learn more about working with workflows and formulas in WeWeb.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Workflows and formulas are essential tools to build dynamic web applications in WeWeb. Learn more about working with workflows and formulas in WeWeb."
                ]
            },
            "https://docs.weweb.io/editor/intro-to-the-editor.html#debugger-panel": {
                "title": "Debugger panel ​",
                "content": "In the debugger panel, you will find:\nthe logs of what is happening in your application, and the current values of global variables",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/intro-to-the-editor.html#right-panel": {
                "title": "Right panel ​",
                "content": "The panel on the right gives you precise control over the element that is selected on the page.\nIt allows you to:\nstyle the element, bind data to the element, change settings that are specific to that type of element, add no-code workflows on the element.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/xano-request.html",
        "page_title": "Xano request | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/xano-request.html#request-action": {
                "title": "Request action ​",
                "content": "The Xano Request action in workflows allows you to make requests to the endpoints of the Xano instance you configured in WeWeb's Xano data source plugin:\nIn the example above, you can see that we are configuring a call to:\nthe POST poems endpoint, in the library API group of our Xano instance.\nThis endpoint includes 3 inputs – poem , title , and author – which I bound to input variables from my WeWeb project.\nAs a result, the values I send to Xano will vary based on the values in my WeWeb variables.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/xano-request.html#streaming": {
                "title": "Streaming ​",
                "content": "A streaming response in Xano is a method of data transfer where information is sent and processed in chunks, rather than all at once. In the context of APIs, it means sending parts of the response to the client as they become available, instead of waiting for the entire response to be ready before sending anything.\n✅ Common use cases include:\nAI chatbots. Large datasets. Real-time updates. Long-running operations. Improve perceived performance.\n❌ When not to use streaming:\nsmall responses. Client limitations. Simple CRUD operations. Atomic operations (when the entire operation needs to succeed or fail as a unit, streaming partial results might not be appropriate).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/xano-request.html#pre-requisites": {
                "title": "Pre-requisites ​",
                "content": "To work with a streaming response from Xano in WeWeb, you will first need to create a streaming API endpoint in Xano.\nTo set up your streaming API endpoint in Xano, we strongly recommend that you watch their video on “Streaming API Responses with Xano“:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/xano-request.html#request-settings-in-weweb": {
                "title": "Request settings in WeWeb ​",
                "content": "To receive a streaming response from Xano in WeWeb, you'll need to trigger a standard Xano Request action in a WeWeb workflow and ensure two things:\nThe option Stream response is enabled. You created (and selected) a WeWeb array variable where you can store the streaming response.\nWhen we test the action, we can see our stream variable being updated line by line:\nThis is because, in Xano, our variable was an array of lines. When we looped through the variable, each item was a line:\nIf we wanted to stream the response character by character, we would need to change the function stack of our Xano endpoint so each item is a character.\nIn the example below, instead of having an array variable in Xano formatted as a raw JSON, we have a strong variable and applied a split function to return the text as an array of character:\nHere's what it would look like in action:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/pages/dynamic-collection-page.html",
        "page_title": "Dynamic collection pages | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/pages/dynamic-collection-page.html#two-options-for-creating-a-dynamic-collection-page": {
                "title": "Two Options for Creating a Dynamic Collection Page ​",
                "content": "Bind to variable data Bind to collection data\nIn WeWeb, binding consists of displaying external data in your app. This is often parsed JSON coming from 3rd-party APIs or tools like Airtable or Xano.\nWhen bound, the data is displayed in the app. It can be displayed as text, as an image, as a link, as a list, etc. Every time the data is updated, the app is updated too.\nFor more details check out the binding data article.\nOption 1: Binding data\nThis method involves binding the page content directly to a variable. When a user accesses the page, the content is retrieved from this variable. Instead of making an API call to our back end and waiting for its response, we simply update a local variable and display that data on our dynamic page. For example, instead of making an API call to fetch data, you might set a variable with data received from another page. This can be quick and efficient but has limitations. Downside: If a user tries to access that URL directly to the page without going through the initial step that updates the variable, they will land on a page with no information because the variable will be empty.\nOption 2: Bind to collection data\nIn this approach, the page content is bound to data retrieved from a collection. When a user accesses the page, the data is fetched from the collection, ensuring the content is up-to-date and displayed. This method is more reliable, especially for scenarios where users might access the page directly without going through a specific sequence.\nChoosing the Right Approach: Dynamic Collection Pages offer flexibility in displaying content based on various criteria. In many use cases, you will want to make an API call to your backend to get the information from the specific item you want to display on the dynamic collection page.\nWhat you’ll need\n2 Pages\nA template page to display dynamic data An initial page with items (for this example, we will use a page with a table of data)\nPlugins\nInstall Rest API (a data source to display data)",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/dynamic-collection-page.html#bind-to-variable-data": {
                "title": "Bind to variable data ​",
                "content": "Step 1: Create a dynamic collection page\nCreate a template page of the information you want to display.\nHere’s a basic example of a page for the character details. The page has sections for texts, a picture, and a back button to return to my initial page of items.\nAfter you create the dynamic collection page, navigate to the initial page with the items you want to have on the dynamic collection page.\nFor this example, we’re starting with the Rick and Morty Database page with all the show's characters.\nStep 2: Add a Variable Workflow\nStep 3: Bind the Information on the Dynamic Collection Page\nGo to the template page and bind the information found in the variable.\nFor our example, we’ll bind the following information: Name of character, picture of the character, species of character, and location.\nCongratulations! 🥳 You just created a dynamic collection page using the bind to variable data!",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/dynamic-collection-page.html#bind-to-collection-data": {
                "title": "Bind to collection data ​",
                "content": "Step 1: Create a dynamic collection page\nCreate a template page of the information you want to display.\nHere’s a basic example of a page for the character details. The page has sections for texts, a picture, and a back button to return to my initial page of items.\nAfter you create the dynamic collection page, navigate to the initial page with the items you want to have on the dynamic collection page.\nFor this example, we’re starting with the Rick and Morty Database page with all the show's characters.\nStep 2: Create a New Collection\nTo retrieve a specific character instead of the entire collection, create and configure a new collection as an API endpoint for a GET call.\nStep 3: Bind Data on the Dynamic Collection Page\nStep 4: Add a variable to the URL path on our template page\nStep 5: Add the parameter to the API call\nStep 6: Link to collection page with dynamic id\n🥳Congratulations! You just created a dynamic collection page using the bind to collection data!\nTIP If the dynamic collection does not update when fetched, turn off Fetch collection automatically for the collection. On the template page, create an action, to Fetch a collection action On page load workflow",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP If the dynamic collection does not update when fetched, turn off Fetch collection automatically for the collection. On the template page, create an action, to Fetch a collection action On page load workflow"
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/formulas/operators.html",
        "page_title": "Operators | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/formulas/operators.html#example": {
                "title": "Example ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/operators.html#-1": {
                "title": "!= ​",
                "content": "Opposite of = . Check for inequality between two values. Equivalent of JavaScript's != .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/operators.html#example-1": {
                "title": "Example ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/operators.html#and": {
                "title": "and ​",
                "content": "This is a logical AND, that will return true only if all operands are also true or return the first falsy operand if any, otherwise the last truthy operand. Equivalent of JavaScript's && .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/operators.html#example-2": {
                "title": "Example ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/operators.html#or": {
                "title": "or ​",
                "content": "This is a logical OR, that will return true if at least one of the operands is also true , or return the first truthy operand/ Equivalent of JavaScript's || .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/operators.html#example-3": {
                "title": "Example ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/operators.html#-2": {
                "title": "+ ​",
                "content": "This operator will add two numerical values together, or concatenate string values. Equivalent or JavaScript's + .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/operators.html#example-4": {
                "title": "Example ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/formulas/utils.html",
        "page_title": "Utils Formulas | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/formulas/utils.html#tobool": {
                "title": "toBool ​",
                "content": "Given a value, this formula will return a boolean value ( true or false ) based on the value truthiness of falsey-ness .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/utils.html#example": {
                "title": "Example ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/extensions/charts.html",
        "page_title": "Charts | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/extensions/charts.html#add-the-plugin": {
                "title": "Add the plugin ​",
                "content": "To add charts to your WeWeb project, you'll need to add the Charts plugin in the Plugins > Extensions menu:\nOnce you have add the Charts extension to your project, you will have access to new charts elements in the Add menu:\nLike all WeWeb elements, you can simply drag-and-drop chart elements onto a page to start using them.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/charts.html#guided-vs-advanced-modes": {
                "title": "Guided vs Advanced modes ​",
                "content": "WARNING Chart elements have two settings: Guided and Advanced . The mode you choose will influence: how the data you bind needs to be structured, and how you customize the design of your chart.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/charts.html#data-structure": {
                "title": "Data structure ​",
                "content": "The Guided mode expects a single array of objects with all the data you need to display in each object.\nThe Advanced mode allows you to bind multiple data sets that relate to each other BUT the related items need to be in the exact same order in each data set for the data to be displayed in the same order.\nKnowing this, it's important that you bind the data you want to display in the correct format. In order to do this, you can either:\nensure your backend returns in the information you want to display in a format the mode you chose will understand, or use a workflow in WeWeb to transform the data returned by your backend so that it is structured in a way the mode you chose will understand.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/charts.html#design": {
                "title": "Design ​",
                "content": "To customize the design of your chart in Guided mode , you can use the Style tab of WeWeb as you would for any other element.\nTo customize the design of your chart in Advanced mode , you will need to define the style of your chart in the Datasets array and Options object you bind in WeWeb.\nTIP To design a custom chart in Advanced mode, we recommend you test the labels, datasets, and options directly in the Chart.js documentation to ensure you are able to get the result you want from the library. First, pick a chart type, for example a line chart as we did in the example below. Then, play around with the Config and Setup in the dedicated article of the Chart.js documentation . For more advanced configuration options, don't hesitate to explore the Charts.js documentation to learn all the ways you can label axes or style a legend for example. Finally, once you are happy with how your chart looks in the Charts.js documentation, you can copy/paste the corresponding values in the Labels , Datasets , and Options fields in WeWeb and start building on top of data collections.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP To design a custom chart in Advanced mode, we recommend you test the labels, datasets, and options directly in the Chart.js documentation to ensure you are able to get the result you want from the library. First, pick a chart type, for example a line chart as we did in the example below. Then, play around with the Config and Setup in the dedicated article of the Chart.js documentation . For more advanced configuration options, don't hesitate to explore the Charts.js documentation to learn all the ways you can label axes or style a legend for example. Finally, once you are happy with how your chart looks in the Charts.js documentation, you can copy/paste the corresponding values in the Labels , Datasets , and Options fields in WeWeb and start building on top of data collections."
                ]
            },
            "https://docs.weweb.io/plugins/extensions/charts.html#pros-cons-of-each-mode": {
                "title": "Pros & cons of each mode ​",
                "content": "The Guided mode allows you to build charts very fast, but you may run into customization limits.\nThe Advanced mode allows you to access all the customization options available in the Chart.js library . As a result, it can be more complex to build the chart you want, but you will never feel limited.\nSee the line chart and stacked bar chart examples below to get a better understanding of the differences between the Guided mode and Advanced mode of the Chart plugin.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/charts.html#line-chart": {
                "title": "Line chart ​",
                "content": "Let's look at a use case where we want to display the monthly values of 2 types of transactions (rentals and purchases):",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/charts.html#guided-mode": {
                "title": "Guided mode ​",
                "content": "In Guided mode , we would need to bind the chart to one array of objects.\nOnce we passed this list of items to the graph element, we could then decide what will be displayed on the Y-axis and X-axis of the graph:\nIn the example above, you can see that:\nwe selected a chart element went to its settings selected the Guided mode bound the data to an array of objects where each item contains values decided to display the month values on the horizontal axis decided to display the data values on the vertical axis grouped items by type so that the rental and purchase transactions would be displayed on two separate lines customized the color of each line",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/charts.html#advanced-mode": {
                "title": "Advanced mode ​",
                "content": "To achieve the same result in Advanced mode , it would require more effort (the chart would be more customizable, but more on that later).\nIndeed, instead of binding the chart element to a single array of objects, we would need to bind values to the three advanced settings: Labels , Datasets , and Options .\nIn Labels , we would pass the array of labels we want to display on our X-axis:\nIn Datasets , we would bind our data sets (in our example, one data set for rental transactions, and one data set for purchase transactions):\nIf you'd like to experiment on your side, here's the JavaScript array we are returning:\njs return [{ label: 'rental' , // name of the data set data: [ 65 , 59 , 80 , 0 , 10 , 105 , 40 ], // values of items in the rental data set fill: false , // if we add a color fill or not borderColor: '#4BC0C0' , // color of the line and legend border backgroundColor: '#4BC0C0' , // background color of the legend tension: 0 // how rounded the line is }, { label: 'purchase' , data: [ 55 , 69 , 115 , 0 , 40 , 75 , 30 ], fill: false , borderColor: '#FF6384' , backgroundColor: '#FF6384' , tension: 0 }]\nTIP Try playing around with these settings, for example changing the backgroundColor of one data set to \"red\" and the tension to 0.3.\nFinally, in Options , we would style our graph, including the legend of the graph:\nIf you'd like to experiment on your side, here's the JavaScript array we are returning:\njs return { maintainAspectRatio: false , // to keep the height of the graph defined in the \"Styles\" tab plugins: { legend: { display: true , // change to false if you want to hide the legend position: \"top\" , // choose where you want to display the legend maxHeight: 100 % , // to set a maximum height on the chart labels: { boxWidth: 10 , // change the width of the label usePointStyle: true // display a rounded label instead of rectangle }, }, } }\nTIP To design a custom chart in Advanced mode, we recommend you test the labels, datasets, and options directly in the Chart.js documentation to ensure you are able to get the result you want from the library. First, pick a chart type, for example a line chart as we did in the example above. Then, play around with the Config and Setup in the dedicated article of the Chart.js documentation . For more advanced configuration options, don't hesitate to explore the Charts.js documentation to learn all the ways you can label axes or style a legend for example. Finally, once you are happy with how your chart looks in the Charts.js documentation, you can copy/paste the corresponding values in the Labels , Datasets , and Options fields in WeWeb and start building on top of data collections.",
                "code_snippets": [
                    {
                        "code": "return [{\n    label: 'rental', // name of the data set\n    data: [65, 59, 80, 0, 10, 105, 40], // values of items in the rental data set\n    fill: false, // if we add a color fill or not\n    borderColor: '#4BC0C0', // color of the line and legend border\n    backgroundColor: '#4BC0C0', // background color of the legend\n    tension: 0 // how rounded the line is\n  }, {\n    label: 'purchase',\n    data: [55, 69, 115, 0, 40, 75, 30],\n    fill: false,\n    borderColor: '#FF6384',\n    backgroundColor: '#FF6384',\n    tension: 0\n  }]",
                        "language": "unknown"
                    },
                    {
                        "code": "return { \n  maintainAspectRatio: false, // to keep the height of the graph defined in the \"Styles\" tab\n  plugins: {\n    legend: {\n      display: true, // change to false if you want to hide the legend\n      position: \"top\", // choose where you want to display the legend\n      maxHeight: 100%, // to set a maximum height on the chart\n      labels: {\n        boxWidth: 10, // change the width of the label\n        usePointStyle: true // display a rounded label instead of rectangle\n      },\n    },\n  }\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": [
                    "TIP Try playing around with these settings, for example changing the backgroundColor of one data set to \"red\" and the tension to 0.3.",
                    "TIP To design a custom chart in Advanced mode, we recommend you test the labels, datasets, and options directly in the Chart.js documentation to ensure you are able to get the result you want from the library. First, pick a chart type, for example a line chart as we did in the example above. Then, play around with the Config and Setup in the dedicated article of the Chart.js documentation . For more advanced configuration options, don't hesitate to explore the Charts.js documentation to learn all the ways you can label axes or style a legend for example. Finally, once you are happy with how your chart looks in the Charts.js documentation, you can copy/paste the corresponding values in the Labels , Datasets , and Options fields in WeWeb and start building on top of data collections."
                ]
            },
            "https://docs.weweb.io/plugins/extensions/charts.html#bar-line-chart-combo": {
                "title": "Bar / line chart combo ​",
                "content": "If you'd like to design a chart that displays bars for one dataset and a line for another, you'll need to:\nuse the Chart - Line UI element in Advanced mode, and add the type: \"bar\" to the dataset you want to display as bars",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/charts.html#stacked-bar-chart": {
                "title": "Stacked bar chart ​",
                "content": "In the video below, we show you how to create the same stacked bar chart in Guided and Advanced mode:\nYou will learn how each mode you affects:\nhow you need to structure your data, the time it takes to design a simple chart, the extent to which you can customize a design.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/editor/app-settings/pwa.html",
        "page_title": "Mobile apps (PWA) | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/editor/app-settings/pwa.html#what-is-a-pwa": {
                "title": "What is a PWA ​",
                "content": "A Progressive Web App (PWA) is an application built using web technologies, providing a user experience similar to that of a mobile app.\nWeb Access : Like a website, a PWA can be accessed through web browsers. Installation : Like a mobile app, a PWA can be installed on a device such as a phone, tablet, or computer.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/app-settings/pwa.html#enabling-mobile-app-features": {
                "title": "Enabling mobile app features ​",
                "content": "To allow users to install your WeWeb app on their devices, first go to More > Mobile App (PWA) in the WeWeb editor:\nThen, select Enable and provide the following required information:\nApp name : The name that will appear under the app icon on the home screen. App icon : The icon that will be displayed on the device's home screen. Theme color : Define the theme color see MDN documentation Background color : Set the background color see MDN documentation Display : Choose how the app will be displayed on the user's device (learn more about PWA display options ).\nOnce you have filled out the required information to establish the PWA manifest, publish your WeWeb app.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/app-settings/pwa.html#disabling-mobile-app-features": {
                "title": "Disabling mobile app features ​",
                "content": "If you need to disable the PWA features of your WeWeb app:\nGo to More > Mobile App (PWA) in the WeWeb editor. Select Disable and publish your WeWeb app.\nWhen you disable the PWA features:\nThe project will be published without a PWA manifest and service worker. Users will no longer be able to install the app on their devices. The app will only be accessible via a web browser.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/app-settings/pwa.html#installing-a-pwa-on-a-phone": {
                "title": "Installing a PWA on a phone ​",
                "content": "To install your WeWeb app on their phone, users will need to open it in a browser and save it to the homescreen.\nWhen they click on the app's icon to launch it, it will behave like \"classic\" mobile app.\nTIP How users can save the app on their phone will vary depending on the phone and/or browser they're using. iOS example browse to the web app tap on the Share icon choose Save to Home Screen Android example browse to the web app tap on the Install icon follow on-screen instructions",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP How users can save the app on their phone will vary depending on the phone and/or browser they're using. iOS example browse to the web app tap on the Share icon choose Save to Home Screen Android example browse to the web app tap on the Install icon follow on-screen instructions"
                ]
            },
            "https://docs.weweb.io/editor/app-settings/pwa.html#updating-a-pwa": {
                "title": "Updating a PWA ​",
                "content": "When you publish a new version of your app through WeWeb, there is no action required on your side to update the version of the app installed on your users' phones.\nEvery time you publish a new version of your app, there is a version attached to it. When a user opens the app on their phone, there is an automatic check and the latest version is displayed.\nThat is standard PWA, not specific to WeWeb.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/app-settings/pwa.html#enhanced-pwa-functionality​": {
                "title": "Enhanced PWA Functionality​ ​",
                "content": "For more advanced PWA features and functionality, please check our PWA plugin article.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/elements/dialog.html",
        "page_title": "Dialog (Modal, Alert, Sheet) | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/elements/dialog.html#getting-started": {
                "title": "Getting Started ​",
                "content": "Add a Dialog element to your page Preview your Dialog by clicking 'Toggle dialog' in the side panel Customize the appearance and behavior through Dialog properties",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/elements/dialog.html#opening-closing-dialogs-from-anywhere": {
                "title": "Opening & closing dialogs from anywhere ​",
                "content": "By default, the Dialog element will open when you click on it, but you can also choose from where and when you want this behavior to happen. To do so, you need to use component actions .\nDisable the Trigger property of your Dialog:\nCreate a custom trigger:\nSelect any element you want to use as a trigger Add a workflow to this element (typically on click) Use Execute component action in the workflow Select your Dialog and choose Open , Close , or Toggle\nWhen you click the element you selected, it will open the Dialog:\nTIP Dialog control uses component actions instead of boolean variables. You can trigger your Dialog from any workflow, not just clicks. Examples include: On page load On mouse enter On double click After form submission Learn more about workflow triggers in our Triggers documentation .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Dialog control uses component actions instead of boolean variables. You can trigger your Dialog from any workflow, not just clicks. Examples include: On page load On mouse enter On double click After form submission Learn more about workflow triggers in our Triggers documentation ."
                ]
            },
            "https://docs.weweb.io/elements/dialog.html#properties": {
                "title": "Properties ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/elements/dialog.html#type-position": {
                "title": "Type & Position ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/elements/dialog.html#animation": {
                "title": "Animation ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/elements/dialog.html#interaction-settings": {
                "title": "Interaction Settings ​",
                "content": "TIP We recommend experimenting with these properties to see their visual effects in action.\nTIP You can place the Dialog anywhere. To ensure the overlay covers the whole screen, enable the Z axis property for the Dialog.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP We recommend experimenting with these properties to see their visual effects in action.",
                    "TIP You can place the Dialog anywhere. To ensure the overlay covers the whole screen, enable the Z axis property for the Dialog."
                ]
            },
            "https://docs.weweb.io/elements/dialog.html#retrieving-data-from-form-inputs": {
                "title": "Retrieving data from form inputs ​",
                "content": "When you place a Dialog containing form inputs inside a repeating group, the inputs will lose their values due to how WeWeb handles state.\nIn this example, we placed a Dialog with a form input inside a repeating group and entered the value \"Hello\":\nWhen accessing the Variables tab, no value is found:\nTo fix this, you can either:\nPlace the Dialog outside the repeating group (recommended)\nOr store the input values manually:\nAdd an On change workflow to your input Capture the input value from the Events tab Save it to a variable",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/extensions/stripe.html",
        "page_title": "Stripe | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/extensions/stripe.html#configure-the-plugin": {
                "title": "Configure the plugin ​",
                "content": "To add the Stripe Plugin to your WeWeb project, go to the Plugins > Extensions menu:\nOnce you have added the Stripe Extension, you will be invited to set it up with your production API keys:\nTIP If you want to work with test data in Stripe, you can also add test API keys. Better be safe than sorry! 😅",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP If you want to work with test data in Stripe, you can also add test API keys. Better be safe than sorry! 😅"
                ]
            },
            "https://docs.weweb.io/plugins/extensions/stripe.html#add-a-payment-form": {
                "title": "Add a payment form ​",
                "content": "Once you have set up the Stripe plugin, you will have access to the payment form element.\nTo display a Stripe payment form on your web app, you'll need to add a Form Container with a submit button:\nThen, you'll want to remove the input so you're only left with the button element and add the Stripe - Payment element inside the form container you added above:\nIn the Stripe payment element's Settings , you'll need a client secret:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/stripe.html#create-client-intent-client-secret-workflow": {
                "title": "Create client intent & client secret workflow ​",
                "content": "To get a client secret, we first need to create a client intent. We do this by creating a workflow that triggers on page load.\nIn the first step, we create a payment intent, decide which payment methods the client can use and which Stripe products they can purchase (the Price ID will come from your Stripe account):\nWe will then test Action 1 because we need to bind its result in Action 2.\nIn step two, we setup a Change variable value action to update a payment_intent_client_secret variable (type Query) with the value of client_secret in the result of the previous action:\nTIP The query variable must be named payment_intent_client_secret in WeWeb because that's the name of the query string Stripe will pass when creating the client secret. If you choose a different name in WeWeb, the browser won't be able to recognize the query string provided by Stripe.\nOnce our workflow triggered on page load is complete, we will go back to our Stripe - Payment element and bind the payment_intent_client_secret variable to the Client secret setting:",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP The query variable must be named payment_intent_client_secret in WeWeb because that's the name of the query string Stripe will pass when creating the client secret. If you choose a different name in WeWeb, the browser won't be able to recognize the query string provided by Stripe."
                ]
            },
            "https://docs.weweb.io/plugins/extensions/stripe.html#confirm-payment-workflow": {
                "title": "Confirm payment workflow ​",
                "content": "Finally, on the form container, we will trigger a workflow On submit to confirm the payment action and redirect the user to a checkout page when they submit the payment form:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/stripe.html#fake-payment": {
                "title": "Fake payment ​",
                "content": "In order to move forward with the tutorial, you will need to fake a payment intent with a fake card. Read more about simulating payments in the Stripe documentation .\nOnce you've entered fake payment details, you can submit the form to trigger the workflow:\nYou should be redirected to the checkout page.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/stripe.html#add-a-checkout-page": {
                "title": "Add a checkout page ​",
                "content": "On the checkout page, we'll create a workflow that triggers on page to retrieve the user's payment intent:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/stripe.html#action-1-retrieve-the-payment-intent": {
                "title": "Action 1: Retrieve the payment intent ​",
                "content": "We will add the Retrieve payment intent action and bind this to the payment_intent_client_secret variable we created earlier.\nIt will look something like this:\nIf you've named your variable correctly and faked a payment with a fake Stripe card, you should be able to see the the payment_intent_client_secret query string in the URL, which is retrieved by WeWeb in the payment_intent_client_secret variable:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/stripe.html#action-2-store-the-payment-intent": {
                "title": "Action 2: Store the payment intent ​",
                "content": "After testing Action 1, we will create an Action 2 to store the payment intent in a variable of type Object.\nWe will choose a Change variable value action and bind it to the result of the previous action in the workflow:\nAgain, we need to test this action if we want to update the variable.\nThen, we could use the information from the variable to style the checkout page.\nFor example:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/stripe.html#before-publishing": {
                "title": "Before publishing ​",
                "content": "When you publish your application, the Stripe - payment element will not be rendered on the page by default because it can only be rendered if a payment intent is found and, when the browser first loads the page, the client intent will not have been created yet.\nIn order to ensure the Stripe payment element is rendered on the page, you'll need to bind it's Conditional rendering setting to the payment_intent_client_secret variable:\nThat way, when the workflow is triggered on page load and the payment intent variable updated with the client secret, the Stripe payment element will be rendered on the page.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/stripe.html#video-mini-course": {
                "title": "Video Mini-Course ​",
                "content": "If you want to dig deeper and learn how to develop a full Stripe payment system in WeWeb, you can watch our YouTube series on the topic:\nHow to Implement Stripe Checkout in a WeWeb app\nHow to Implement Stripe Subscriptions in a WeWeb app\nHow to Implement Stripe Elements in a WeWeb app",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/extensions/weweb-email.html",
        "page_title": "WeWeb Email | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/extensions/weweb-email.html#add-plugin": {
                "title": "Add plugin ​",
                "content": "To start working with the WeWeb Email plugin, go to the Plugins > Extensions menu:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/weweb-email.html#send-email": {
                "title": "Send email ​",
                "content": "Once you've added the WeWeb Email plugin to your project, you will have access to the Send an email no-code workflow action:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/weweb-email.html#plugin-limits": {
                "title": "Plugin limits ​",
                "content": "The WeWeb Email plugin was developed to allow you to add an email component to your app quickly and securely at the beginning of a project .\nThis plugin will let you send an email through an action in a workflow.\nHowever, as your project grows, you will quickly feel limited because:\nyou can't customize the sender, you can only send text, and a maximum of 10 emails/hour.\nAs you scale your app, you will want to transition to a dedicated email integration via your backend. For example, you could work with Xano's Sendgrid extension or configure Supabase to send emails.\nNo matter what backend and email service you choose, you will be able to use WeWeb workflows to trigger those emails.\nTIP The WeWeb Team is currently exploring the possibility of developing native integrations with popular emailing tools like Sendgrid, Mailgun, and others. If it's something you'd be interested in, don't hesitate to let us know here which provider you would prioritize.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP The WeWeb Team is currently exploring the possibility of developing native integrations with popular emailing tools like Sendgrid, Mailgun, and others. If it's something you'd be interested in, don't hesitate to let us know here which provider you would prioritize."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/extensions/mapbox.html",
        "page_title": "Mapbox | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/extensions/mapbox.html#display-map": {
                "title": "Display map ​",
                "content": "To display a Mapbox map on a WeWeb page, you'll need to:\nadd the plugin to your project drag-and-drop the Mapbox element on a page copy/paste a Mapbox API token in the settings of the Mapbox element you dropped on your page",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/mapbox.html#_1-add-the-plugin": {
                "title": "1. Add the plugin ​",
                "content": "From the Plugins > Extensions menu:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/mapbox.html#_2-drag-and-drop-the-mapbox-element": {
                "title": "2. Drag-and-drop the Mapbox element ​",
                "content": "From the Add > Plugins menu, you can drag-and-drop the Mapbox element on the page of your choice:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/mapbox.html#_3-copy-paste-a-mapbox-api-token": {
                "title": "3. Copy/paste a Mapbox API token ​",
                "content": "Click on the map you just dropped, go to its Settings tab, and paste your Mapbox API token :\nAnd voilà! A default map should appear if the token is valid.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/mapbox.html#style-options": {
                "title": "Style options ​",
                "content": "This plugin is tailored for advanced users Most of the options you can find in this plugin can be bound. But they require a specific data type that is specific to Mapbox' API. We strongly recommend following their tutorial on how to design a map using their studio : https://docs.mapbox.com/help/tutorials/create-a-map-with-data-visualization-component/\nMap style – This option lets you change the \"look and feel\" of the map. You can select Mapbox predefined styles here or create your own and bind it.\nMap projection – The type of projection you want to use for your map.\nLogo position – Where to place the Mapbox logo on your map.\nDefault markers color – The color used to mark positions on the map (default is red).\nDisable popups – Choose On to disable the native Mapbox popup. Useful if you want full design freedom to display your own custom popups on marker click or mouse enter for example.\nPopup hide close button – Enable to hide the close button of the native Mapbox popup.\nPopup stays open on click – Enable to force users to click on the close button to close the popup.\nPopup close on move – The native Mapbox marker popup will close itself when the user's mouse moves away from a marker.\nPopup max width – Allows you to customize the max-width of the native Mapbox popup\nTIP If you feel limited by the native Mapbox marker popup, you can design your own custom modal and decide when it is displayed with one of the Mapbox workflow triggers: You can also use the x/y position in the domEvent property to choose where the modal is displayed relative to a marker:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/mapbox7.CcRRvRar.png",
                    "https://docs.weweb.io/assets/mapbox9.8AhuxFoF.png"
                ],
                "tips": [
                    "TIP If you feel limited by the native Mapbox marker popup, you can design your own custom modal and decide when it is displayed with one of the Mapbox workflow triggers: You can also use the x/y position in the domEvent property to choose where the modal is displayed relative to a marker:"
                ]
            },
            "https://docs.weweb.io/plugins/extensions/mapbox.html#settings-options": {
                "title": "Settings options ​",
                "content": "API access token – Your Mapbox API key .\nLatitude, Longitude and Zoom – Determines the part of the map on Earth where that will be displayed to your users at first. More documentation available here .\nScroll zoom – Enable to let users zoom on the map by scrolling over it.\nTrack resize – Enable to let users resize the map by \"snapping\" it with two fingers (mobile or touchpad).\nMarkers draggable – Enable to let users drag and drop markers on the map.\nFixed markers bounds – Enable to prevent users from drag and dropping markers outside of a specific are (to be configured in the markers settings).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/mapbox.html#workflow-triggers": {
                "title": "Workflow triggers ​",
                "content": "You can trigger workflows on the Mapbox element:\nFor example, you could use the On marker click trigger to display a custom marker popup.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/mapbox.html#add-markers": {
                "title": "Add markers ​",
                "content": "Here, you can setup one or more markers using the Mapbox API:\nContent: the name that will appear on the marker Latitude / Longitude: the marker's position on the world map Color: the marker default color (will override previous settings for this) Draggable: enable to let users drag and drop this marker (will override previous settings for this)\nTIP While you can add markers manually, the power of WeWeb comes when you bind the markers to a collection. In the example below, you can see we bound our markers to a list of items in an Airtable collection and mapped the fields of these items to the name and coordinates needed by the Mapbox plugin: Note that the plugin expects an array of objects, so a list of items. This is why we bound to the collection data and not the collection.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/mapbox6.-Vig6TdQ.png"
                ],
                "tips": [
                    "TIP While you can add markers manually, the power of WeWeb comes when you bind the markers to a collection. In the example below, you can see we bound our markers to a list of items in an Airtable collection and mapped the fields of these items to the name and coordinates needed by the Mapbox plugin: Note that the plugin expects an array of objects, so a list of items. This is why we bound to the collection data and not the collection."
                ]
            },
            "https://docs.weweb.io/plugins/extensions/mapbox.html#add-sources-and-layers": {
                "title": "Add sources and layers ​",
                "content": "Advanced options to customize your map. The best way to use them is by using Mapbox studio to create them in nocode, and then export them and bind them in WeWeb.\nMapbox tutorial available here: https://docs.mapbox.com/help/tutorials/create-a-map-with-data-visualization-component/",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/mapbox.html#mapbox-center-variable": {
                "title": "Mapbox center variable ​",
                "content": "When you add the Mapbox element on a page, a new Mapbox - center variable will be created.\nThis variable includes the coordinates that correspond to the center of the map you defined in the Settings of the element:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/mapbox.html#mapbox-instance-variable": {
                "title": "Mapbox instance variable ​",
                "content": "When you add the Mapbox element on a page, a new Mapbox - instance variable will be created:\nThis allows you to access the map instance as a variable.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/mapbox.html#access-mapbox-library": {
                "title": "Access Mapbox library ​",
                "content": "You can access the mapboxgl library with this code: wwLib.wwPlugins.mapbox.mapboxgl :",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/websockets/supabase-realtime/intro-to-supabase-realtime.html",
        "page_title": "Supabase realtime | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/websockets/supabase-realtime/intro-to-supabase-realtime.html#what-is-realtime": {
                "title": "What is realtime? ​",
                "content": "Realtime is a feature that allows your app to show live updates instantly, without making incessant API calls.\nFor example, in a chat window with lots of messages, it wouldn't be efficient to keep checking for new updates through traditional API requests every few seconds.\n✅ Common use cases for Realtime: chat applications, collaborative tools, and live notifications.\n❌ When not to use Realtime: low interaction applications, high data volume, and complex transactional systems.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/supabase-realtime/intro-to-supabase-realtime.html#supabase-realtime-features": {
                "title": "Supabase realtime features ​",
                "content": "Supabase provides three categories of realtime functionalities:\nBroadcast : Send ephemeral messages from client to clients with low latency. For example, to track users' cursors in a collaborative tool. Presence : Track and synchronize shared state between clients. For example, to show how many users are currently online. Postgres Changes : Listen to Postgres database changes and send them to authorized clients. For example, to notify users of a new comment in one of their projects.\nYou can learn more about these concepts in Supabase's user docs.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/supabase-realtime/intro-to-supabase-realtime.html#how-realtime-works-in-theory": {
                "title": "How realtime works in theory? ​",
                "content": "Before you dive into setting up realtime in a WeWeb project, it can be helpful to get a little bit of an overview of how realtime works.\nThe general idea is the following:\nA realtime channel allows a client (the user's browser) and server (Supabase) to send and receive realtime events. Those events can be ephemereal (Broadcast) or permanent (Database changes). If users want to receive or send events in a channel, they first need to subscribe to that channel (via a WeWeb workflow action). Once they've subscribed to a channel, users can broadcast messages to that channel (via a WeWeb workflow action). They can also listen to events sent by other users in that channel (via a WeWeb workflow triggered on page or app load).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/supabase-realtime/intro-to-supabase-realtime.html#support-chat-example": {
                "title": "Support chat example ​",
                "content": "Taking the example of a support chat, here's how you could build it in WeWeb.\nWhen a user clicks on the support icon of your website, you would trigger:\nthe Subscribe to channel action so they join the chat channel. the Presence state action so they can see how many support team members are online. the Broadcast a message action to send a message in the chat.\nYou would also have an app workflow that:\nlistens for messages from other users in the chat channel. updates a variable with those messages.\nYou'd then use that variable to display those messages on the page.\nThat's the theory.\nLearn more about how Supabase realtime works in practice:\nSubscribe to and unsubscribe from a channel Send and receive messages Send and receive presence information",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/change-language.html",
        "page_title": "Change language | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/change-language.html#how-it-works": {
                "title": "How it works: ​",
                "content": "When you add a new language, all text content becomes translatable between your default language and added languages:\nThere are two ways to change languages in WeWeb:\nUsing the Language dropdown element Using the Change language action in a workflow\nYou can trigger the action through workflows, such as on a button click or when a specific condition is met. When the action is executed, the content on the page updates to the selected language, provided the necessary translations have been set up.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/data/intro-to-collections.html",
        "page_title": "Intro to collections | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/data/intro-to-collections.html#pre-requisites": {
                "title": "Pre-requisites ​",
                "content": "WARNING Before you can create a new collection of data in WeWeb, you first need to have installed at least one data source plugin , e.g. Xano, Supabase, REST API, etc. Once you have added a data source plugin, you will be able to create a collection to fetch data from that source.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/data/intro-to-collections.html#create-a-collection": {
                "title": "Create a collection ​",
                "content": "To create a collection, go to the Data tab in the left sidebar, then click on + New to start setting up the collection.\nThe setup process is different for every data source plugin, but it revolves around the following steps:\nGive your collection a name Select the data source plugin you want to use Select the connection mode Configure how you want to fetch the data Fetch the data Apply any frontend sort, filter or pagination\nLet's look at an example:\nTo deep-dive into how to setup a collection for each data source plugin, check out the following guides:\nAirtable REST API Xano Supabase Algolia",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/data/intro-to-collections.html#how-to-use-a-collection": {
                "title": "How to use a collection ​",
                "content": "Collections are typically used to display data in a list or a grid. To do so, you can use the Collection list element, or any div.\nTo learn more about how to display a collection, check out the following guide .\nBut in the end, collection are simple arrays of data that can be used in any workflow or formula.\nThey look like this inside the data explorer:\nLet's deep dive into this:\nfirst, you'll find the collection as a whole. It contains your data, and some metadata about the collection (like the number of items, the total number of items, etc.) that WeWeb created. secondly, you'll find the data property. This is the array of data without any metadata .\nTIP Some elements require to be bound to the collection, others to the collection's data only, depending on if they use the metadata or not. If your binding doesn't seem to work, please try it again by binding only the data property!\ndata[index] shows the data for the item at the index index in the collection. It's useful to bind to a specific item in the collection. To change the item, you can use the index dropdown next to the data property. Length is the number of items there are in the collection.\nTIP To know if a collection is empty, use the Length property. If it's equal to 0 , the collection is empty!\nisFetching is a boolean that tells you if the collection is currently fetching data. It's useful to display a loading state while the data is being fetched. isFetched is a boolean that tells you if the collection has already been fetched.\nTIP To display a loading state while your collection is being fetched, you can use a loading GIF or SVG, and bind its display property to the collection's isFetching property.\nlimit is the max index for the items that are currently displayed in the collection, given any active frontend filter, sort or pagination. total is the total number of items in the collection, given any active frontend filter, sort or pagination. offset is the index of the first item in the collection, given any active frontend filter, sort or pagination.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Some elements require to be bound to the collection, others to the collection's data only, depending on if they use the metadata or not. If your binding doesn't seem to work, please try it again by binding only the data property!",
                    "TIP To know if a collection is empty, use the Length property. If it's equal to 0 , the collection is empty!",
                    "TIP To display a loading state while your collection is being fetched, you can use a loading GIF or SVG, and bind its display property to the collection's isFetching property."
                ]
            },
            "https://docs.weweb.io/data/intro-to-collections.html#optimize-collection-load": {
                "title": "Optimize collection load ​",
                "content": "By default, a collection is:\nfetched automatically when a user navigates to a page that uses that collection, and is preserved (not fetched again), when a user navigates to other pages in the app.\nTo optimize the performance and UX of your web app, you can change that default behavior in the Fetch data step of the collection setup:\nFetch this collection automatically tells WeWeb if it should fetch the collection on every page load, or if you want to fetch it manually. If you want to fetch it manually, you can trigger the Fetch collection workflow action.\nPreserve on navigation tells WeWeb if it should keep the collection in memory when the user navigates to a new page. If you want to fetch the collection again, you can trigger the Fetch collection workflow action.\nThere may be use cases where you want to change these default settings.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/data/intro-to-collections.html#why-disable-automatic-fetch": {
                "title": "Why disable automatic fetch? ​",
                "content": "If you have a collection that you don’t need immediately on page load, you should consider disabling the automatic fetch to improve performances. For example, you might want to fetch a collection when the user opens a modal on a page and not on page load.\nIf you disable the automatic fetch on a collection, you'll need to remember to trigger a workflow that fetches the collection every where you need it in the app.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/data/intro-to-collections.html#why-disable-preserve-on-navigation": {
                "title": "Why disable preserve on navigation? ​",
                "content": "A common use case where you don't want to preserve on navigation: a collection that fetches a single item selected on a previous page (if you preserve on navigation, there might be a blink where the info from the previously selected item appears while the API call takes place to fetch the info of the new selected item)\nThis is especially problematic if the collection data concerns a specific user with potentially private information. You want to make sure that data is not preserved on navigation in case 2 users connect to your app using the same browser.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/data/intro-to-collections.html#collection-modes": {
                "title": "Collection modes ​",
                "content": "TIP To build dynamic web applications, we highly recommend creating Dynamic collections. However, at times, when you need to pre-render content or bypass API rate limits from a data source, you may want to consider working with a Static or Cached collection instead.\nStatic : the collection will be fetched once, on our servers, while the app is built. Everytime this collection is used in your app, the data will be pre-rendered (better for SEO, can slow down the publish process). Dynamic : the collection will be fetched on the client side, when the app is loaded. This is the best option if you want to fetch data that changes often (like a list of products). Cached : the collection will be fetched on the client side, but from our servers. This is the best option if you want to fetch data that changes often, but you want to avoid hitting any API rate limit (but you'll need to refresh the data yourself when it changes).",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP To build dynamic web applications, we highly recommend creating Dynamic collections. However, at times, when you need to pre-render content or bypass API rate limits from a data source, you may want to consider working with a Static or Cached collection instead."
                ]
            },
            "https://docs.weweb.io/data/intro-to-collections.html#frontend-vs-backend-filters": {
                "title": "Frontend vs Backend filters ​",
                "content": "When setting up a collection, the Sort, Filter and Pagination step can be before or after the fetching one.\nIf you set it before, it's called a backend filter . It means that the data is fetched from the 3rd-party API, already filtered, sorted and paginated by the server.\nIf you set it after, it's called a frontend filter . It means that the data is fetched from the 3rd-party API, then filtered, sorted and paginated on the client side:\nWhy do some plugins have backend filters (like Supabase) when other have frontend filters (like Airtable)? Well, it depends on the tools' API capabilities, and how they handle pagination, sorting and filtering. Some APIs are very limited, and don't allow to filter, sort or paginate the data on the server side. In that case, WeWeb will have to fetch all the data, then filter, sort and paginate it on the client side.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "Why do some plugins have backend filters (like Supabase) when other have frontend filters (like Airtable)? Well, it depends on the tools' API capabilities, and how they handle pagination, sorting and filtering. Some APIs are very limited, and don't allow to filter, sort or paginate the data on the server side. In that case, WeWeb will have to fetch all the data, then filter, sort and paginate it on the client side."
                ]
            },
            "https://docs.weweb.io/data/intro-to-collections.html#when-to-use-frontend-vs-backend-filters": {
                "title": "When to use frontend vs backend filters? ​",
                "content": "If you have a small collection, without any private data: use a frontend filter. It's the easiest to setup, and it's the fastest. If you have a big collection, or need to fetch private data: use a backend filter. It's a bit more complicated to setup, but it's the more secure.\nWARNING Keep in mind that any data fetched from a 3rd-party API is visible. It's not because you have a frontend filter and that the data is not visible to the user in your app, that it's not visible at all. Indeed, anyone can inspect the HTML of your app, and see the data that is fetched from the 3rd-party API. If you need security: use a backend filter and make sure to use a backend with secured endpoints or RLS on the database. Learn more about adding security to the web-apps you build with no-code tools .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/data/intro-to-collections.html#filter-options": {
                "title": "Filter options ​",
                "content": "Pagination is the number of items that are displayed per page. It's useful if you have lot of data to display, and you want to split it into multiple pages (using the Pagination element). Filter is a formula that filters the data. It's useful if you want to display only a subset of the data.\nLet's look at an example:\nHere, we're filtering the data to only display companies where their name contains the letter t or, (where their domain contains www and their number_of_employees is greater than 100 ).\nAs you can see, you can create groups of filters using condition groups .\nFor each of these groups or conditions, you can set them under certain conditions (using the Apply if... ). For example, when a variable is true or false in your app.\nYou can also use the AND and OR operators to combine filters.\nThe toggles are Ignore if empty options that tell WeWeb not to apply the filter if the value is empty.\nSort is a formula that sorts the data. It's useful if you want to display the data in a specific order (like ascending or descending order for alphabetical or numerical values, etc).",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-faq.html",
        "page_title": "Referral FAQ | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-faq.html#how-do-i-refer-my-friends-to-weweb": {
                "title": "How do I refer my friends to WeWeb? ​",
                "content": "Just share your unique referral link, which you can find in your Referral Dashboard:\nAll your friends will need to do is click on that link, and they'll be guided through the sign-up process.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-faq.html#what-is-the-referral-link": {
                "title": "What is the referral link? ​",
                "content": "The referral link is an easy way to share WeWeb with others. Rewarding your friends for trying WeWeb and you for making a successful referral.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-faq.html#how-much-do-i-get-paid-by-participating-in-the-weweb-referral-program": {
                "title": "How much do I get paid by participating in the WeWeb Referral Program? ​",
                "content": "WeWeb current promotion pays a 10% referral to you and 10% discount incentive to your potential referral.\nWeWeb Agency plan holders receive a 20% referral and 10% discount incentive to any self-serve plans available via the billing portal. ( Note: Enterprise plans do not include discounts).\nWeWeb pays the referral % as long as the new customer is subscribed to a WeWeb paid plan with a maximum payout time frame of 12 months (Note: Agency plan holders do not have a 12 month limitation on payout timeframes).\nWhen calculating the amount receivable by you, we deduct our Stripe fees of 4%. As an example, if you refer us a customer who subscribes to a monthly scale plan, you will be eligible to 10% or 20% of $179 x (1 - 4%) = 10% or 20% of $171,84.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-faq.html#what-is-considered-a-successful-referral": {
                "title": "What is considered a successful referral? ​",
                "content": "Standard Referral\nA referral is successful when:\nA user new to WeWeb signs up using your unique referral link, and... Successfully pays a minimum of one month’s subscription. Both referrer and referee are not the same entity or person.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-faq.html#how-will-i-know-when-i-ve-successfully-referred-someone": {
                "title": "How will I know when I've successfully referred someone? ​",
                "content": "You can track the status of your referrals directly from your Referral dashboard.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-faq.html#my-referral-forgot-to-use-my-referral-link-is-there-a-way-to-track-it-back-to-my-account": {
                "title": "My referral forgot to use my referral link. Is there a way to track it back to my account? ​",
                "content": "We’re unable to track referrals back to your account if they did not use your referral link at the time they signed up.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-faq.html#when-and-how-will-i-get-paid": {
                "title": "When and how will I get paid? ​",
                "content": "You will be eligible for payment once your referral has been a paid WeWeb customer with a maturity date of 30 days and a minimum payout of $100. Once you’re eligible for your first payment, you can request for payment on your referral dashboard.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/referral-program/referral-faq.html#some-users-have-no-subscriptions-what-does-that-mean": {
                "title": "Some users have no subscriptions - what does that mean? ​",
                "content": "If a user doesn’t have any subscriptions, it just means they are a free account. This information is still useful because free accounts have the potential to convert into paid subscriptions.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/editor/logs.html",
        "page_title": "Logs | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/editor/logs.html#workflow-debugging": {
                "title": "Workflow debugging ​",
                "content": "When you are working with workflows, it can be helpful to look at the logs of what's happening when you execute the workflow:\nIn the example above, we can see that:\nour backend returned an error, the error was caused by a user trying to login with invalid credentials, the workflow moved on to the error branch as a result, and started going through the actions in the error branch.\nTIP Before testing a workflow, try clearing the logs to get a nice clean view of what is happening:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/logs-clear.BZXE51g9.gif"
                ],
                "tips": [
                    "TIP Before testing a workflow, try clearing the logs to get a nice clean view of what is happening:"
                ]
            },
            "https://docs.weweb.io/editor/logs.html#ux-performance-audit": {
                "title": "UX & performance audit ​",
                "content": "When you develop an app, things can start getting complex quickly.\nIn order to scale your projects, it helps to audit the UX and performance of your pages on a regular basis.\nFor example, you can use the Logs panel to check that:\nonly essential data collections are fetched on page load, and variables are updated in the order you would expect.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/logs.html#example-1-flow-of-actions": {
                "title": "Example 1 - flow of actions ​",
                "content": "If a displayError variable is updated before an errorMessage variable, you might see an unwanted blink before the text of the errorMessage is updated.\nChanging the order of these actions will greatly improve the experience of your users.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/logs.html#example-2-collections-fetched": {
                "title": "Example 2 - collections fetched ​",
                "content": "On one page, we couldn't figure out why the list of jobs always appeared as empty on page load, only to be populated when the user interacted with filters on the page.\nIt turns out we were fetching an old collection on page load ( jobs instead of jobs_ ):\nThe jobs_ collection was only fetched On change when the user interacted with a filter on the page.\nAfter identifying the problem, we were able to get rid of the old collection (decluttering our developer environment along the way) and optimize the loading of the jobs_ collection.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/settings-billing-code-export/code-export-api.html",
        "page_title": "How to use WeWeb Public API | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/settings-billing-code-export/code-export-api.html#key-benefits": {
                "title": "Key benefits ​",
                "content": "Automated deployments : integrate WeWeb projects into your CI/CD pipelines. Version control : programmatically manage different versions of your WeWeb applications. Multi-environment support : easily deploy to staging and production environments. Scalability : efficiently manage deployments across multiple domains or server instances. Customized workflows : tailor the deployment process to fit your organization's specific needs.\nThe WeWeb Public API offers significant productivity gains for teams handling complex deployment scenarios.\nInstead of manually downloading the application code and/or then manually deploying it to a web server running on your infrastructure, you can trigger custom deployment scripts from within the WeWeb Editor.\nCreate a fully automated DevOps environment By leveraging this API, you can create a fully automated DevOps environment to reduce manual tasks, minimize human error, and ensure consistent deployments across your infrastructure.\nThis documentation provides detailed information on authentication, available endpoints, and typical usage patterns to help you integrate WeWeb deployments into your existing systems and workflows.\nWARNING The WeWeb Public API has a rate limit of 3 calls per seconds and will return 429 Too many requests error if the limit is hit.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "Create a fully automated DevOps environment By leveraging this API, you can create a fully automated DevOps environment to reduce manual tasks, minimize human error, and ensure consistent deployments across your infrastructure."
                ]
            },
            "https://docs.weweb.io/settings-billing-code-export/code-export-api.html#access-to-weweb-public-api": {
                "title": "Access to WeWeb Public API ​",
                "content": "Please contact the WeWeb team to get access to WeWeb Public API.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/code-export-api.html#authentication": {
                "title": "Authentication ​",
                "content": "WeWeb Public API authentication is done using an Authorization header in every requests.\nThe value of this header should be Bearer <YOUR WORKSPACE PRIVATE KEY> .\nYou workspace Private Key can be found under the Settings tab in your workspace.\nYou can generate a new Private Key at any time but this will invalidate the old one.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/code-export-api.html#available-requests": {
                "title": "Available requests ​",
                "content": "The WeWeb Public API allows you to make the following requests:",
                "code_snippets": [
                    {
                        "code": "{\n\t\"message\": \"Fetching data\",    //Progress message\n\t\"status\": \"deploying\",    //Status of the deployment. Can be : deploying / deployed / failed\n\t\"version\": 33,    //Version of current publish\n\t\"createdAt\": \"2022-12-12T16:13:47.142Z\"    //Date of creation\n}",
                        "language": "unknown"
                    },
                    {
                        "code": "{\n\t\"message\": \"Fetching data\",    //Progress message\n\t\"status\": \"deploying\",    //Status of the deployment. Can be : deploying / deployed / failed\n\t\"environment\": \"production\",    //Target environment\n\t\"version\": 33,    //Version of current publish\n\t\"logs\": \"deploy logs\",    //Full logs of the deployment\n\t\"rawZip\": true,    //rawZip option entered on deploy start\n    \"builtZip\": true,    //builtZip option entered on deploy start\n    \"githubEnabled\": false,    //githubEnabled option entered on deploy start\n\t\"createdAt\": \"2022-12-12T16:13:47.142Z\"    //Date of creation\n}",
                        "language": "unknown"
                    },
                    {
                        "code": "{\n\t\"success\": true,    //Success, can be `true` or `false`\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/code-export-api.html#monitoring-a-publication": {
                "title": "Monitoring a publication ​",
                "content": "Check the status field in the response to determine when the publication is complete. The value will be deployed when the publication is finished.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/code-export-api.html#typical-auto-deploy": {
                "title": "Typical auto deploy ​",
                "content": "A typical auto deploy script should be:\n1. Start the publication of a project with \"builtZip\" set to true. 2. Store the version provided by the previous request 3. While the project is publishing, check the publication status of a project. The publication is done when the progress is 100 and status is \"published\". 6. Download project files ZIP by version using the version provided in the start publication step 7. Save the downloaded ZIP file 8. Extract the download zip file to your weweb-server storage at the right place (defined by FILES_PATH) 9. Activate the published version in you weweb-server using the version provided in the start publication step",
                "code_snippets": [
                    {
                        "code": "1. Start the publication of a project with \"builtZip\" set to true.\n 2. Store the version provided by the previous request\n 3. While the project is publishing, check the publication status of a project. The publication is done when the progress is 100 and status is \"published\".\n 6. Download project files ZIP by version using the version provided in the start publication step\n 7. Save the downloaded ZIP file\n 8. Extract the download zip file to your weweb-server storage at the right place (defined by FILES_PATH)\n 9. Activate the published version in you weweb-server using the version provided in the start publication step",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/settings-billing-code-export/project-settings/backups.html",
        "page_title": "Backups | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/settings-billing-code-export/project-settings/backups.html#backups-tab": {
                "title": "Backups tab ​",
                "content": "From your workspace dashboard, you can access a project's backups by going to the project's Settings > Backups :\nIn the example above, you can see:\nwe have several commits of the project over two different days there are many commits are automatic, and there is one manual commit with a custom message some commits reference a version in their name (v1) and (v2)\nWe can:\nhide automatic commits, search for a specific commit, preview a specific version of the Editor, and rollback to a specific version of the Editor.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/backups.html#automatic-commits": {
                "title": "Automatic commits ​",
                "content": "WeWeb generates automatic commits of your project Editor:\nonce a day if you're on a Starter plan, once an hour if you're on a Scale or Enterprise plan, and every time you publish your app in staging or in production.\nTIP The commits that are linked to a publication will display the publication version in their name. In the example below, in the Deployments tab, you can see we published a v3 of our app in staging. As a result, an automatic commit of the Editor is available in the Backups tab (with the (v3) reference in its name):",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/backups2.CXyqJVoi.gif"
                ],
                "tips": [
                    "TIP The commits that are linked to a publication will display the publication version in their name. In the example below, in the Deployments tab, you can see we published a v3 of our app in staging. As a result, an automatic commit of the Editor is available in the Backups tab (with the (v3) reference in its name):"
                ]
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/backups.html#manual-commits": {
                "title": "Manual commits ​",
                "content": "When you're inside a project, you can create a manual commit of the Editor with a custom message to describe the update by going to the Commit button inside the Editor:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/css-and-styling/responsive-design.html",
        "page_title": "Responsive Design | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/css-and-styling/responsive-design.html#three-breakpoints": {
                "title": "Three breakpoints ​",
                "content": "In WeWeb, you can customize the design at three breakpoint levels: desktop, tablet, and mobile:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/responsive-design.html#top-down-approach": {
                "title": "Top down approach ​",
                "content": "When you customize a CSS property on a breakpoint, that style will be applied to all the smaller breakpoints:\nsetting a font color on desktop will also apply on tablets and mobile devices setting a font weight on tablet will also apply on mobile, but not on desktop setting a font size on mobile will only apply on mobile, not on desktop or tablet",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/responsive-design.html#add-responsive-style": {
                "title": "Add responsive style ​",
                "content": "To design responsively, switch between breakpoints in the top navigation menu, then change a style in the right sidebar.\nYou'll be able to see responsive styles when hovering them. A green icon will appear next to the property name and, if you click on it, you'll see on what breakpoint the change was made:\nTIP You can also access the information about a user's browser, including the breakpoint they're on, and use it to style responsively. In the example below, we are saying that we only want to show the name column of a data grid when the browser breakpoint has the default value, i.e. when the user is on desktop: Though it can be helpful in some cases such as the data grid example described above, note that this approach is harder to debug because it's hard to see if a responsive style is applied to an element just by looking at the style panel in the WeWeb editor.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/responsive4.p5uzJehJ.png"
                ],
                "tips": [
                    "TIP You can also access the information about a user's browser, including the breakpoint they're on, and use it to style responsively. In the example below, we are saying that we only want to show the name column of a data grid when the browser breakpoint has the default value, i.e. when the user is on desktop: Though it can be helpful in some cases such as the data grid example described above, note that this approach is harder to debug because it's hard to see if a responsive style is applied to an element just by looking at the style panel in the WeWeb editor."
                ]
            },
            "https://docs.weweb.io/css-and-styling/responsive-design.html#delete-responsive-style": {
                "title": "Delete responsive style ​",
                "content": "If you hover a CSS style and click on one of the tablet or mobile icons, you'll remove the responsive style for that breakpoint:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/responsive-design.html#make-your-designs-responsive": {
                "title": "Make your designs responsive ​",
                "content": "To make your designs adapt to different screen sizes, ensure that your layout and components adjust smoothly across all breakpoints. Here are some best practices to help you achieve responsive designs in WeWeb:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/responsive-design.html#use-relative-units": {
                "title": "Use Relative Units ​",
                "content": "Instead of using fixed pixel values ( px ) for widths, heights, margins, and paddings, opt for relative units like percentages ( % ), viewport width ( vw ), viewport height ( vh ), or em and rem . This allows elements to scale proportionally with the screen size.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/responsive-design.html#leverage-flexbox-and-grid-layouts": {
                "title": "Leverage Flexbox and Grid Layouts ​",
                "content": "Utilize CSS Flexbox and Grid to create flexible and responsive layouts:\nFlexbox is ideal for one-dimensional layouts (rows or columns). Grid is perfect for two-dimensional layouts (both rows and columns). These layout models adapt naturally to different screen sizes, ensuring your content remains organized.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/responsive-design.html#avoid-fixed-widths-and-heights": {
                "title": "Avoid Fixed Widths and Heights ​",
                "content": "Setting fixed widths and heights can cause elements to overflow or not resize properly on smaller screens. Instead, use max-width , min-width , max-height , and min-height properties to allow elements to resize within specified limits.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/responsive-design.html#check-parent-containers": {
                "title": "Check Parent Containers ​",
                "content": "If you notice that only part of your page resizes while another part remains the same, it might be because:\nFixed Dimensions on Parent Elements : Ensure parent containers don't have fixed widths or heights that prevent child elements from resizing. Overflow Properties : Check if overflow is set to hidden , which can restrict content from adjusting its size. Positioning Issues : Elements with position: absolute or position: fixed might not respond to changes in screen size.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/responsive-design.html#hide-elements-on-mobile": {
                "title": "Hide elements on mobile ​",
                "content": "To not display an element on tablet or mobile, DO NOT delete it .\nInstead, we invite you to follow standard web development practices and edit:\nCSS display property, or conditional rendering setting.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/libraries/dependencies.html",
        "page_title": "Library dependencies | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/libraries/dependencies.html#what-is-a-dependency": {
                "title": "What is a dependency? ​",
                "content": "In web development, encountering dependencies is inevitable when working with libraries.\nWhen using WeWeb libraries, there are three types of dependencies to be aware of:\nPlugin dependencies. Library dependencies. Coded component dependencies.\nWhen you publish, add or update a library in WeWeb, it's important to be aware of these dependencies.\nIn the example below, you can see that this library has two dependencies, one to the Date plugin, and one to the Starter Kit library:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/dependencies.html#plugin-dependencies": {
                "title": "Plugin dependencies ​",
                "content": "A plugin dependency occurs when a component, class, or template within the library relies on a plugin.\nFor example, if Library A includes a date picker component that requires the Date plugin, you'll need to add the Date plugin to your project for Library A to function correctly.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/dependencies.html#library-dependencies-1": {
                "title": "Library dependencies ​",
                "content": "A library dependency occurs when one library depends on another library.\nFor example, if Library C uses items from Library D (such as templates, classes, colors, etc.), you'll need to add Library D to your project to fully leverage Library C's capabilities.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/dependencies.html#coded-component-dependencies": {
                "title": "Coded component dependencies ​",
                "content": "A coded component dependency occurs when the library uses a specific version of a coded component.\nFor this type of dependency, there is no action required on your side. When you add or update a WeWeb library that uses coded components, we will automatically import or update the coded component to your project.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/websockets/supabase-realtime/database-changes.html",
        "page_title": "React to database changes | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/websockets/supabase-realtime/database-changes.html#pre-requisites": {
                "title": "Pre-requisites ​",
                "content": "Before users of your WeWeb app can listen and react to Supabase realtime database changes, there are two pre-requisites:\nIn Supabase, enable realtime on the table you want to monitor. In a WeWeb workflow, subscribe to a realtime channel where message events can come and go.\nPlease refer to the related documentation if you haven't done so already.\nOnce that's done, you can think of reacting to database changes.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/supabase-realtime/database-changes.html#listen-for-database-changes": {
                "title": "Listen for database changes ​",
                "content": "If we want users in the channel to receive database change events, we need to create a page or app workflow that is triggered when there's a new realtime database change event in a channel.\nWARNING Workflows that listen to realtime events must be executed at page or app level because you are essentially saying: when this app or this specific page is open in a browser, I want the browser to listen for events so it can react to it.\nIn the example below, we setup a workflow on a page that updates a notification counter:\nThe workflow listens for realtime Database changes . It is triggered every time there's an INSERT event in the releases channel we subscribed to previously . Every time there's such a new event, we update a variable in our app.\nWARNING Note that users will only receive events of channels they have subscribed to. If the user has not subscribed to the releases channel, the workflow will not be triggered.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html",
        "page_title": "Passing Context to AI | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#adding-context-to-your-prompts": {
                "title": "Adding Context to Your Prompts ​",
                "content": "You can enhance your AI prompts by providing specific context from various sources in your project:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#frontend-context-types": {
                "title": "Frontend Context Types ​",
                "content": "The AI can accept various types of context from your project:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#using-variables-and-project-data": {
                "title": "Using Variables And Project Data ​",
                "content": "Click the plus icon (\"+\") in the chat input area\nThe context binding menu will appear, displaying all available data in your project\nSelect the specific data points you want to include as context\nYour selected items will appear in the context panel within the chat\nWhen you send your prompt, the AI will focus specifically on the data you've provided, helping it generate more targeted and relevant responses.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/passing-context-to-ai-plus-icon.CVd9VagJ.png",
                    "https://docs.weweb.io/assets/passing-context-to-ai-context-window.ByXRTQYs.png",
                    "https://docs.weweb.io/assets/passing-context-to-ai-select-data.CdzKqqRR.png",
                    "https://docs.weweb.io/assets/passing-context-to-ai-data-displayed.DGZR41Di.png"
                ],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#adding-images-as-context": {
                "title": "Adding Images as Context ​",
                "content": "Images provide powerful visual context for the AI. There are two ways to add images:\nClick the image icon in the chat input area Select the file you want to upload from your computer The selected image will appear in the chat\nCopy an image from any source (screenshot, file explorer, browser, etc.) Click in the chat input area Paste the image using keyboard shortcut (Ctrl+V or Cmd+V) or right-click and select Paste The pasted image will appear in the chat\nAny subsequent prompts will include your image(s) as context\nThis feature is especially valuable when:\nRecreating designs from visual references Asking for UI improvements based on existing layouts Troubleshooting visual issues in your application",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#adding-elements-as-context": {
                "title": "Adding Elements as Context ​",
                "content": "There are two ways to pass elements as context:\nClick on the element on the page, or Click on the element in the layout tree\nThis direct element selection is especially helpful when:\nAsking for styling of particular elements Attempting to create logic for specific elements",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#automatic-context-from-workflows-and-formulas": {
                "title": "Automatic Context From Workflows And Formulas ​",
                "content": "When you have a formula window or workflow open:\nThe contents of the open formula window or workflow are automatically passed as context to the AI Any prompts you make while these are open will include them as context\nThis automatic context passing makes it easier to get help with complex formulas or workflows without having to manually explain what you're working on.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#adding-custom-components-as-context": {
                "title": "Adding Custom Components As Context ​",
                "content": "Like elements, there are two ways to pass in custom components as context:\nClick on the component on the page, or Click on the component in the layout tree\nWhenever you pass in a custom component like this, the element will also be passed in like so:\nThe reason for this is that there may be cases where the AI needs to only modify the current selected properties or styling of the component, and not need to edit the actual code of the component in order to acheive the desired outcome. Because of this, the element is provided to the AI to help provide all needed context.\nPassing in a custom component better allows the AI to:\nUpdate the properties being passed into the component Edit the source code of the component if it is deemed the functionality needs to be extended",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#backend-context-types": {
                "title": "Backend Context Types ​",
                "content": "You can also pass backend-related context to the AI to get more specific guidance on data operations:\nWARNING For now, the AI is only be able to interact with your backend if you are using Supabase via the native Supabase plugins in the editor. To learn more about how to integrate Supabase in your project, you can refer to the dedicated documentation\nAdding context from your backend all happens from the backend panel:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#passing-tables-as-context": {
                "title": "Passing Tables As Context ​",
                "content": "Click the Tables tab in the backend panel Select the table you want to pass as context The selected table will appear as context in the chat",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#passing-functions-as-context": {
                "title": "Passing Functions As Context ​",
                "content": "Click the Functions tab in the backend panel Select the function you want to pass as context The selected function will appear as context in the chat",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#passing-apis-as-context": {
                "title": "Passing APIs As Context ​",
                "content": "Click the API tab in the backend panel Select the API you want to pass as context The selected API will appear as context in the chat",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#passing-secrets-as-context": {
                "title": "Passing Secrets As Context ​",
                "content": "Click the Secrets tab in the backend panel Select the secret you want to pass as context The selected secret will appear as context in the chat",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#best-practices": {
                "title": "Best Practices ​",
                "content": "To get the most out of context-enhanced AI interactions:\nCombine context types : For complex questions, provide both data and visual context Clear unneeded context : Remove context items that are no longer relevant by clicking the \"×\" next to them Start simple : Begin with minimal context and add more if the AI needs additional information",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#example-use-cases": {
                "title": "Example Use Cases ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#formula-assistance": {
                "title": "Formula Assistance ​",
                "content": "Open the formula editor, then ask the AI:\nThe AI will have context of your current formula and make the appropriate changes.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#design-recreation": {
                "title": "Design Recreation ​",
                "content": "Upload an image of a design, then prompt:\nThe AI will analyze the image and recreate the design on the current page.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#data-manipulation": {
                "title": "Data Manipulation ​",
                "content": "Select a data collection as context, then ask:\nThe AI will create a card to show the data and automatically bind the repeating of the card to the filtered collection.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/passing-context-to-ai.html#workflow-optimization": {
                "title": "Workflow Optimization ​",
                "content": "With a workflow open, prompt:\nThe AI will analyze your workflow and available variables, and then implement the needed logic.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/binding-filtering/binding-concept.html",
        "page_title": "Binding data | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/binding-filtering/binding-concept.html#binding-concept": {
                "title": "Binding concept ​",
                "content": "In WeWeb, binding consists in displaying external data in your app. This is is often parsed JSON coming from 3rd-party APIs or tools like Airtable or Xano.\nYou can also use formulas to manipulate this data.\nWhen bound, the data is displayed in the app. It can be displayed as text, as an image, as a link, as a list, etc. Everytime the data is updated, the app is updated too.\nTIP Outside of texts and images, all the CSS properties or elements settings can also be bound. Meaning you can control your app behavior and design from an external source.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Outside of texts and images, all the CSS properties or elements settings can also be bound. Meaning you can control your app behavior and design from an external source."
                ]
            },
            "https://docs.weweb.io/binding-filtering/binding-concept.html#binding-simple-data": {
                "title": "Binding simple data ​",
                "content": "Let's take a simple example. Let's say you want to display the current logged-in user name in your app.\nTo do this, you would need to bind a text element to the name property of the user object:\nAnother example would be to display an image coming from a REST API:\nLastly, you can also bind a CSS property to any value, in this example, a variable in your app:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/binding-filtering/binding-concept.html#binding-an-array-of-data": {
                "title": "Binding an array of data ​",
                "content": "You can also bind an array of data. This is useful when you want to display a list of items.\nThe main use-case would be to display a list of items coming from an API. Let's say you want to display a list of companies coming from an API:\nSome explanations are needed here.\nThe companies array (collection) is bond to the main container. Then, the first container's child (here, the card) gets repeated for every element in the array.\nThen, every element in the child can be bound to a field in the array's element. For example, the image element is bound to the logo field of the company object.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/binding-filtering/binding-concept.html#using-formulas-in-bindings": {
                "title": "Using formulas in bindings ​",
                "content": "You can also use formulas in bindings. This is useful when you want to manipulate data before displaying it.\nFor example, let's say you want to display a text composed of two or more fields. You could use the concatenate formula to do this:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/libraries/intro-to-libraries.html",
        "page_title": "Intro to libraries | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/libraries/intro-to-libraries.html#why-use-libraries": {
                "title": "Why use libraries ​",
                "content": "Colors, spacings, and typographies allow you to build user interfaces with a consistent look-and-feel, while templates and components help you build faster.\nTo access the library of your project:\nOpen the Assets menu in the top bar Click Library\nYou will now see the library of your project:\nIf you start with a blank project, it will be empty but you can add:\nComponents. Templates. Classes. Spacings, colors, and typographies.\nTIP Each WeWeb project has its own library, but you can: share that library with the rest of your workspace, and add other libraries from your workspace to a project. Learn more about sharing libraries in WeWeb .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Each WeWeb project has its own library, but you can: share that library with the rest of your workspace, and add other libraries from your workspace to a project. Learn more about sharing libraries in WeWeb ."
                ]
            },
            "https://docs.weweb.io/libraries/intro-to-libraries.html#typographies": {
                "title": "Typographies ​",
                "content": "In the fourth tab of the Library panel, inside the Typographies section, you can create and edit typographies so that all text elements bound to a typography are updated accordingly when a typography is updated:\nIn the example below, you can see:\nIn the Typographies section, we created the Small typography in the Label folder. We bound that typography in the Styles tab of the selected text on the page.\nTIP When creating a typography, we recommend using a default font: That way, users will be able to use the library without needing to add a specific font to their project. If you associate a typography to a specific font, users will need to have that font installed in their project for the library to work as expected. Otherwise, when the project is published, the font displayed on the page will fall back to the browser's default font.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/default-font-example.DCEpmbvb.png"
                ],
                "tips": [
                    "TIP When creating a typography, we recommend using a default font: That way, users will be able to use the library without needing to add a specific font to their project. If you associate a typography to a specific font, users will need to have that font installed in their project for the library to work as expected. Otherwise, when the project is published, the font displayed on the page will fall back to the browser's default font."
                ]
            },
            "https://docs.weweb.io/libraries/intro-to-libraries.html#colors": {
                "title": "Colors ​",
                "content": "In the fourth tab of the Library panel, inside the Colors section, you can add and organize colors that you can then bind to the CSS color property in the Styles tab of the right panel.\nIn the example below, we bound the text of one of our labels to the Blue 600 color in our project library:\nYou can also use library colors in formulas:\nIn the example above, the text color will be different if it's in a primary or secondary button.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/intro-to-libraries.html#spacings": {
                "title": "Spacings ​",
                "content": "In the fourth tab of the Library panel, inside the Spacings section, you can add and organize spacing styles that you can then bind to the CSS properties in the Styles tab of the right panel:\nIn the example above, we bound the corner radius of our label container to a 16px spacing.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/intro-to-libraries.html#classes": {
                "title": "Classes ​",
                "content": "In the third tab of the Library panel, you will be able to see all the style classes in your library.\nWhile you won't be able to rename or delete classes through this panel, it can be helpful to get an overview of what classes are used in an external library or to check if a class is attached to a specific library.\nLearn more about working with CSS classes in WeWeb .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/intro-to-libraries.html#components": {
                "title": "Components ​",
                "content": "In the first tab of the Library panel, you will find reusable components that you can use to build a UI that has a consistent look-and-feel, without having to no-code the same functionalities multiple times.\nLearn more about WeWeb components .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/intro-to-libraries.html#templates": {
                "title": "Templates ​",
                "content": "In the second tab of the Library panel, you will find section and element templates that you can use as UI building blocks to design the frontend of your apps faster:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/intro-to-libraries.html#how-to-add-a-template-in-a-library": {
                "title": "How to add a template in a library ​",
                "content": "To save an element or section as a template, select it on the page, and click on the Save to library icon:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/intro-to-libraries.html#how-to-add-a-template-on-a-page": {
                "title": "How to add a template on a page ​",
                "content": "Once you have saved templates to your project library, you will be able to drag-and-drop them on the page.\nGo to Add > Assets to view available templates and components:\nTIP Elements with a green icon are components.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Elements with a green icon are components."
                ]
            },
            "https://docs.weweb.io/libraries/intro-to-libraries.html#rename-library-item": {
                "title": "Rename library item ​",
                "content": "In the Library panel, select the tab where the item is located, select the item you wish to rename, rename it and save it:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/intro-to-libraries.html#delete-library-item": {
                "title": "Delete library item ​",
                "content": "In the Library panel, select the tab where the item is located, hover over the item you want to delete, click on the three dots next to it and click on delete:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/intro-to-libraries.html#templates-vs-components": {
                "title": "Templates vs components ​",
                "content": "When you drag-and-drop a template on a page, it will create a copy of the template. If you later make a change to the template, those changes will not be reflected in the copies you created before.\nWhen you drag-and-drop a component on a page, it will create a new instance of the component. If you make a change to the component, those changes will be reflected in all the instances of the component you created before.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/auth-systems/weweb-auth.html",
        "page_title": "WeWeb authentication | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/auth-systems/weweb-auth.html#plugin-limitations": {
                "title": "Plugin limitations ​",
                "content": "At WeWeb, we specialize in frontend development. The WeWeb Auth plugin was built on top of Amazon Cognito to help you build a proof-of-concept app with basic authentication needs.\nWARNING The WeWeb Auth plugin is helpful to test an idea inside the WeWeb Editor or with a small user base on a published app. It is not intended to build a web-app that scales with a large user base or complex roles and permissions.\nPlugin limitations include:\nthe number of user signup emails you can send is limited to 20/day. the number of password recovery emails you can send is limited to 20/day. the list of users cannot be synced with backend.\nTo develop a secure web-app that scales, we recommend integrating an external authentication system, using:\none of our native integrations (e.g. Xano Auth , Supabase Auth , Auth0 ), or one of our backend-agnostic plugins (e.g. token-based auth , OpenID ).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/weweb-auth.html#add-the-plugin": {
                "title": "Add the plugin ​",
                "content": "To add WeWeb Auth, go to Plugins > Authentication > WeWeb Auth .\nLeave the default Configuration options and choose the page where users are redirected when they are not signed in. For example, a login page:\nTIP Note that, if you click on the Configuration options, you'll see the template emails we send out when you invite new users to join your app. If you'd like to change those template emails, please use the contact us link to let us know.\nWARNING If you remove the WeWeb Auth plugin from your project, it will delete all users, roles, and groups from WeWeb. You will not be able to retrieve this information after removing the plugin.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Note that, if you click on the Configuration options, you'll see the template emails we send out when you invite new users to join your app. If you'd like to change those template emails, please use the contact us link to let us know."
                ]
            },
            "https://docs.weweb.io/plugins/auth-systems/weweb-auth.html#manage-users": {
                "title": "Manage users ​",
                "content": "In the Auth panel, you can add users one by one manually or import a CSV file with a list of users:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/weweb-auth.html#add-users": {
                "title": "Add Users ​",
                "content": "Attributes The email address is required. All other attributes are optional.\nNote that, for now, you can only add string attributes. So if you select the image attribute, you will need to pass it a URL in string format.\nPassword For each user, you can generate a password or set one manually. If you set one manually, it will need to be at least 6 characters long.\nInvitation email Here you decide if you want to send an invitation email to the user or not.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/weweb-auth.html#update-user": {
                "title": "Update user ​",
                "content": "In the Auth > Users sub-menu, you can select a user to edit their info, attributes, password, and user roles.\nNote that, while you can update a user's password, you cannot see their current password for obvious security and privacy reasons.\nYou can also:\nBlock a user. Blocked users will not be able to authenticate to your WeWeb app. Unblock a blocked user. Copy a user's ID. Delete a user. Deleted users will not be able to authenticate to your WeWeb app.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/weweb-auth.html#user-roles-user-groups": {
                "title": "User roles & user groups ​",
                "content": "To assign a role to a user, go to Auth > Users and select the user you want to assign a role to:\nTo gate content in WeWeb based on user roles and permissions, you will need to:\nopen the Auth panel, go to the Roles tab, create user roles, create user groups, and restrict access to pages based on user groups.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/weweb-auth.html#how-user-groups-work": {
                "title": "How user groups work ​",
                "content": "A user group is a combination of user roles.\nLet's say you're building a web app for a car rental company. You could have 3 user roles:\nAdmin , for employees, Customers , and Premium , for employees and loyal customers.\nAnd 2 user groups:\nAdmin , that would allow you to gate content so non-employees can't access it Premium customer , that would display the best cars to premium customers\nWARNING It's important to understand that a user needs to have all the roles listed in the user group. In the example below, the members of the Premium customer user group must have both the Customer and the Premium roles associated with their user profile:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/private-page3.Bq7upkPc.png"
                ],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/weweb-auth.html#private-pages": {
                "title": "Private pages ​",
                "content": "One of the main uses for user groups is to gate content.\nWhen you setup the WeWeb Auth plugin, an Authenticated users user group will be created by default even if you don't define additional user groups.\nYou can use this user group to restrict access to a page:\nIf you have defined user roles, you can add user groups that refer to those user roles and restrict access to pages further:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/weweb-auth.html#signup-login-logout-flows": {
                "title": "Signup, login, logout flows ​",
                "content": "Once you have added the WeWeb Auth plugin, you'll want users to be able to:\nsignup, login, logout, change their password, update their user profile, etc.\nYou can do this with dedicated WeWeb Auth workflow actions:\nYou can build your own designs or use the WeWeb Auth UI elements in the Add menu to get started:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/debugging.html",
        "page_title": "Debugging workflows | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/debugging.html#the-workflow-debugger": {
                "title": "The Workflow Debugger ​",
                "content": "If you're experiencing issues with a Workflow, the easiest way to find out why it's not working is to test the entire Workflow.\nIn the example below, we see that the issue comes from the first action – which is highlighted in red – and if we look into the API's response , we can see the issue is that the user tried to login with invalid credentials:\nIf you're working with a more complex Workflow, you can test an individual Action instead of the entire Workflow.\nIn the example below, we test the first action and see the same API response informing us that the user tried to login with invalid credentials:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/debugging.html#status-codes": {
                "title": "Status Codes ​",
                "content": "When you test your Workflow, the Debugger will display a status code for every API request you make.\nIt would be impossible to go through all the status codes you may encounter but let's review the ones you'll encounter most often.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/debugging.html#_200-success": {
                "title": "200 Success ​",
                "content": "When your API request was processed as expected, you'll get a 200 success message.\nFor example, when you successfully created a new record in your database:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/debugging.html#_401-unauthorized": {
                "title": "401 Unauthorized ​",
                "content": "When the server will not process your request because it lacks valid authentication credentials.\nFor example, when you try to create a new record in a table that's protected by an auth system without providing valid auth credentials:\nThe solution: check the credentials you are using to authenticate and try again.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/debugging.html#_403-forbidden": {
                "title": "403 Forbidden ​",
                "content": "When the server understood the request but refuses to fulfill it.\nFor example, when a normal user tries to perform an action that is reserved to users with an admin role.\nThe solution: make sure you are testing the Workflow with a user who has the right to perform the action.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/debugging.html#_422-invalid-value": {
                "title": "422 Invalid value ​",
                "content": "When the server doesn't like the data type you're sending\nIn the example below, you can see the Mileage value we send on the left is a string (\"7864\") and returns an error whereas the value we send on the right is an integer (506) and returns a success message:\nThe solution: make sure you are sending the data in a format that is expected by your database.\nIn the example above, we mistakenly used a Short answer input on our first tried and finally got a success message when we changed the input type to Number .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/debugging.html#_429-too-many-requests": {
                "title": "429 Too many requests ​",
                "content": "Something that can happen often when you are using third-party APIs is that you can run into API rate limits.\nWhen that happens, you will see a 429 status error message.\nThis has nothing to do with a mistake you made but everything to do with rate limits imposed by the API you're using.\nWhen that happens, you might want to read your API provider's documentation to check if there's something you can optimize on your side or if you can upgrade your plan with them to set higher limits.\nTIP If you are working with an Airtable Collection in Dynamic Mode, you will probably run into this at least once so it's a good error code to keep in mind.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP If you are working with an Airtable Collection in Dynamic Mode, you will probably run into this at least once so it's a good error code to keep in mind."
                ]
            },
            "https://docs.weweb.io/workflows/debugging.html#network-error": {
                "title": "Network error ​",
                "content": "Some REST APIs, like the Rick & Morty API or Google Maps, accept client-side requests, i.e. requests from your users browsers.\nBut many REST APIs, like Twitter, only accept server-side requests.\nBy default, being a frontend builder, WeWeb's REST API plugin makes client-side requests.\nIn the example below, you can see Twitter returns a Network error when we use the default configuration of a REST API request:\nThis is known as a CORS issue . You can fix it by enabling the Proxy the request to bypass CORS issues option:\nWARNING When you enable the Proxy the request to bypass CORS issues option, WeWeb will proxy the request to bypass CORS errors but the information will still be visible in the client. This option is not meant to keep private tokens private. You should never use private API keys in REST API calls made through the client.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/debugging.html#debugging-checklist": {
                "title": "Debugging Checklist ​",
                "content": "Ok, now that we've gone through a few examples of errors you can run into when working with workflows (and/or making API calls), let's recap the questions that will help you uncover mistakes and fix errors.\nAm I hitting API rate limits? Did I bind the correct variable to each key? Do my form input types match the field types in my database? Does the API request I am making require authentication headers? Does the API I am working with accept client-side requests or do I need to enable the server-side option? Do I have the correct trigger on the correct element? (e.g. \"on submit\" if I'm using a \"Form Container\") Did I use the correct API endpoint URL? Did I use the correct API request method? (e.g. POST, GET, DELETE) Do the names of my keys in WeWeb match the names of my keys in my backend? (bearing in mind these are case sensitive)",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/settings-billing-code-export/workspace-settings/design-system-tab.html",
        "page_title": "The Design System Tab | WeWeb Documentation",
        "sections": {}
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/upload-file.html",
        "page_title": "Upload file (via WeWeb's CDN) | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/upload-file.html#file-upload-elements": {
                "title": "File upload elements ​",
                "content": "In WeWeb, you can work with two file upload element:\none where the user browses through their folders to select a file, and one where the user can drag-and-drop their files on the page\nYou will find both in the Add menu if you look for \"file\" or upload\" in the global search bar:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/upload-file.html#file-upload-workflow": {
                "title": "File upload workflow ​",
                "content": "In the example below, our users fill out a form and upload a resume to apply to a job.\nWhen they submit the form:\nwe upload the user's file to WeWeb's CDN we make an API request to create a record in our backend then close the application popup",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/upload-file.html#_1-upload-the-user-s-file-to-weweb-s-cdn": {
                "title": "1. Upload the user's file to WeWeb's CDN ​",
                "content": "In the screenshot above, you can see that:\nwe selected the Upload file action, decided what file(s) we wanted to upload by selecting the component variable of our file upload element, and tested the action to upload the file and generate the URL of where it is hosted on WeWeb's CDN.\nWARNING Before moving to the next step, make sure to click on Test action . This will generate the URL of where the file can be found. We will need this URL when we create the job application record in our backend in step 2.\nTIP If you copy the URL generated by the Upload file action and paste it in a web browser, you’ll be able to see the image and where it is hosted.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP If you copy the URL generated by the Upload file action and paste it in a web browser, you’ll be able to see the image and where it is hosted."
                ]
            },
            "https://docs.weweb.io/workflows/actions/upload-file.html#_2-we-map-form-inputs-to-our-database": {
                "title": "2. We map form inputs to our database ​",
                "content": "In the case of the file upload, we bind the resume field in our database to the URL value returned by the first action of our workflow.\nNote that, because we are sending a URL to our backend, we need to make sure that the resume field type in our database is a string.\nTIP To view and use the result from a previous action in a workflow, make sure to Test action first. The result from the previous action will be empty otherwise and you won't be able to bind it.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP To view and use the result from a previous action in a workflow, make sure to Test action first. The result from the previous action will be empty otherwise and you won't be able to bind it."
                ]
            },
            "https://docs.weweb.io/workflows/actions/upload-file.html#multiple-file-upload": {
                "title": "Multiple file upload ​",
                "content": "You can choose to upload multiple files at once in the file upload elements' specific settings:\nWhen you enable multiple file upload, the upload action will return an array of items (i.e. a list of URLs) instead of a single item (i.e. a single URL).\nKeep that in mind as you build your workflow and send the result of the upload action to your database.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/upload-file.html#delete-uploaded-files": {
                "title": "Delete uploaded files ​",
                "content": "To delete files that your users uploaded to the WeWeb CDN via your WeWeb app, go to the Auth menu, and open the File Storage panel:\nTIP To manage images and files you uploaded to your WeWeb project, go to the More menu, and open the Images or Files panel. Learn more about managing project files .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP To manage images and files you uploaded to your WeWeb project, go to the More menu, and open the Images or Files panel. Learn more about managing project files ."
                ]
            },
            "https://docs.weweb.io/workflows/actions/upload-file.html#upload-progress": {
                "title": "Upload progress ​",
                "content": "Each file upload element comes with a progress variable:\nBy default, the value is 0 . It increases as the files are uploaded. When the upload is complete, the value is 100 .\nYou can use this variable to display a loader or progress bar when files are being uploaded:\nTIP Displaying a loader or progress bar when a file is being uploaded is a UX best practice because it helps the user understand something is happening.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Displaying a loader or progress bar when a file is being uploaded is a UX best practice because it helps the user understand something is happening."
                ]
            },
            "https://docs.weweb.io/workflows/actions/upload-file.html#file-size": {
                "title": "File size ​",
                "content": "When you upload a file through an upload element, the result from the File upload action will include the file size :\nIn the example above, you can see we use this information to tell the user how big the file they uploaded is.\nWe could also use it to check that the user isn't trying to upload files that are too big and display a warning when they do.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/upload-file.html#bypass-weweb-s-cdn": {
                "title": "Bypass WeWeb's CDN ​",
                "content": "The Upload file action uploads your files to WeWeb's CDN.\nIf you want to upload files directly to your backend without going through WeWeb's CDN, you will need to:\nuse the Encode file as Base64 workflow action instead, then make a request to send the encoded file to your backend.\nLearn how to upload files directly to your backend .",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/components/component-dropzones.html",
        "page_title": "Component dropzones | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/components/component-dropzones.html#working-with-dropzones": {
                "title": "Working with dropzones ​",
                "content": "A typical use case for dropzones would be an input form. Imagine you have a form component and use multiple instances of it in your application. This component has 3 input fields, and you want these 3 fields to be present in every instance of it.\nBut let's say there is one instance of this component where you need to include an additional rich text input field:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/component-dropzones.html#create-a-component-dropzone": {
                "title": "Create a component dropzone ​",
                "content": "While all other instances of this component remain the same, you can customize this specific instance. To create and customize a component dropzone:\nCreate a form and convert it into a component following the steps described here: https://docs.weweb.io/components/intro-to-components.html\nOpen the component editor by double-clicking the component on your canvas or by clicking on the three dots in the component menu and selecting Edit Once in the Edit mode, click on the Add button.\nSelect the Dropzone element at the very top of the Elements list, drag and drop it to your component\nThat’s it! Your component dropzone is defined. All instances of this component will now include this dropzone.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/component-dropzones.html#adding-elements-to-dropzones": {
                "title": "Adding elements to dropzones ​",
                "content": "TIP If you wish to add elements into a dropzone, make sure you are not in Edit mode for the component containing the dropzone. You are only able to add elements into dropzones if you are not editing the component.\nTo customize a specific instance with additional elements:\nSelect the instance of the component you want to customize with the rich text element. Click on the arrow on the left side of the component in the elements tree to expand it\nAdd the rich text element by clicking on the Add button and dragging and dropping it into the dropzone on your canvas or in the element tree\nThe customization is complete. Only this instance of the component will include the rich text input, all other instances will remain the same",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP If you wish to add elements into a dropzone, make sure you are not in Edit mode for the component containing the dropzone. You are only able to add elements into dropzones if you are not editing the component."
                ]
            },
            "https://docs.weweb.io/components/component-dropzones.html#execute-dropzone-workflow": {
                "title": "Execute dropzone workflow ​",
                "content": "Component workflows help you organize and encapsulate functionality in one place. However, you might want to execute these workflows from outside the component or specifically from a dropzone.\nSuppose you have created a component workflow:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/component-dropzones.html#configuring-workflow-execution": {
                "title": "Configuring workflow execution ​",
                "content": "When creating a component workflow, you have two execution options:\nAllow execution from outside - enables the workflow to be triggered from anywhere using the Execute component action action Allow execution from dropzone - permits the workflow to be triggered specifically from elements within your dropzone",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/component-dropzones.html#using-execute-dropzone-workflow": {
                "title": "Using execute dropzone workflow ​",
                "content": "To trigger a component workflow from your dropzone:\nSelect your dropzone element Add a new workflow (e.g., On Change) Add the Execute dropzone workflow action Choose the component workflow you want to execute\nThis approach lets you maintain organized component logic while still allowing flexible execution from dropzone elements when needed.\nTIP Remember to enable the appropriate execution permission (outside or dropzone) in your component workflow settings before attempting to trigger it.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Remember to enable the appropriate execution permission (outside or dropzone) in your component workflow settings before attempting to trigger it."
                ]
            },
            "https://docs.weweb.io/components/component-dropzones.html#pass-data-to-dropzones": {
                "title": "Pass data to dropzones ​",
                "content": "To share component properties with your dropzone elements:\nEnter component Edit mode to select your dropzone Navigate to the Dropzone data section in the Settings tab Locate the Data property:\nBind the component properties you want to make available in your dropzone\nThis allows elements within your dropzone to access and use the component's properties, enabling better integration between your component and its customizable areas.\nTIP You can pass multiple properties at once by binding them as an object.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP You can pass multiple properties at once by binding them as an object."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/css-and-styling/classes.html",
        "page_title": "CSS Classes | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/css-and-styling/classes.html#classes-subclasses": {
                "title": "Classes & subclasses ​",
                "content": "​ Suppose you have a desire to integrate something like Bootstrap ​ ​\nA web developer would have to do something like this ​\nhtml < button type = \"button\" class = \"btn btn-primary\" >Primary</ button > < button type = \"button\" class = \"btn btn-secondary\" >Secondary</ button > < button type = \"button\" class = \"btn btn-success\" >Success</ button > < button type = \"button\" class = \"btn btn-danger\" >Danger</ button > < button type = \"button\" class = \"btn btn-warning\" >Warning</ button > < button type = \"button\" class = \"btn btn-info\" >Info</ button > < button type = \"button\" class = \"btn btn-light\" >Light</ button > < button type = \"button\" class = \"btn btn-dark\" >Dark</ button > < button type = \"button\" class = \"btn btn-link\" >Link</ button >\n​ In this code, each button is assigned two CSS classes:\nthe first class, btn , is common to all buttons, the second class (or subclass) determines the specific style of each button (e.g. Primary, Danger, Warning)\nIn WeWeb, you could approach this in 2 different ways.",
                "code_snippets": [
                    {
                        "code": "<button type=\"button\" class=\"btn btn-primary\">Primary</button>\n<button type=\"button\" class=\"btn btn-secondary\">Secondary</button>\n<button type=\"button\" class=\"btn btn-success\">Success</button>\n<button type=\"button\" class=\"btn btn-danger\">Danger</button>\n<button type=\"button\" class=\"btn btn-warning\">Warning</button>\n<button type=\"button\" class=\"btn btn-info\">Info</button>\n<button type=\"button\" class=\"btn btn-light\">Light</button>\n<button type=\"button\" class=\"btn btn-dark\">Dark</button>\n<button type=\"button\" class=\"btn btn-link\">Link</button>",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/classes.html#option-1-create-a-default-class-style-subclasses": {
                "title": "Option 1: create a default class & style subclasses ​",
                "content": "In this case, create a btn class and a btn-primary subclass attached to the btn class:\nThis approach has the benefit of being super simple to maintain. The downside of option 1 is that, in WeWeb, you can only have one sub-class per class.\nWe did this to help you build in a way that is efficient and maintainable while addressing 90% of use cases but if you find this too restrictive, please don't hesitate to reach out to us to share your specific use case.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/classes.html#option-2-create-a-default-class-style-classes-with-state-subclasses": {
                "title": "Option 2: create a default class & style classes with state subclasses ​",
                "content": "In this case, in addition to the btn class, you'd create:\na class for each style (i.e. btn-primary , btn-secondary , etc.) with multiple subclasses for states on each class (e.g. hover , focus and disable )\nThis approach allows you to have as many classes as you want on an element (though we encourage you to stay lean for readibility and maintainability purposes).\nIt has the added benefit of enabling you to save and re-use states across elements in a subclass.\nWARNING The order of classes matters: the style of the bottom class will override the style of classes above. If you want the btn-primary class to inherit styles from the btn class, it needs to be placed below its parent class.\nNote that ​we made the decision to offer you the capability to reuse styles in a manner that closely aligns with how developers do it.\nOur aim is to offer you the flexibility to manage your design systems according to your preferences. There is no single prescribed approach for doing so.\nInstead, there are numerous best practices available. We encourage you to take the time to explore and identify the approach that suits you best, and then maintain consistency by adhering to it throughout your project. ​\nWe are constantly seeking to iterate and improve WeWeb. If you have any suggestions or request to improve this feature, please do not hesitate to share it with us . ​",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/classes.html#create-a-class": {
                "title": "Create a class ​",
                "content": "When creating a \"parent\" class for an element, ask yourself: what are the common style properties I want to feature on this element by default?\nFor example, the default style of a button could include:\npadding text size font weight alignment borders transitions\n​Once you're happy with the default style of your default element, go to Select or create a class to create your first class: ​ ​\nIn the example below, we called it btn – stands for \"button\" – and selected the CSS properties we styled:\n​ ​",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/classes.html#save-changes": {
                "title": "Save changes ​",
                "content": "We didn't want to enable autosave when styling a class because of the risk of updating something by mistake that impacts other elements in the project.\nWhen editing the CSS property of a class, you will see a light gray background appear around the name of the property you just changed.\nOnce you save the change (by going to the pencil icon of the class and clicking on \"Save\"), you will see a yellow/orange background around the name of the properties you saved: ​",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/classes.html#re-use-styles": {
                "title": "Re-use styles ​",
                "content": "Once you've created a class, you'll most likely want to apply it to other elements.\nYou can do this by simply selecting the class when you're on an element: ​ ​",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/classes.html#class-combos": {
                "title": "Class combos ​",
                "content": "In our Bootstrap example, we saw that each button had two classes.\nAs with code, we can have two classes on a single element in WeWeb.\nIf you don't want two classes to conflict with each other in an unexpected way, it's important that you select only the properties you want to update when styling a class.\nIn the example below, we added the btn-primary class and edited the style specific to that button, i.e.\n​ ​\n​\n​\nWhen saving our changes on the btn-primary class, we selected only those 3 properties to ensure it didn't potentially conflict with the style of our btn class: ​ ​\nTIP Remember, the last class in the list will override the classes above so, if we saved font-size property with 14px on btn-primary and decided later to change the font-size to 12px on all buttons with the btn class, the change we inadvertendly saved on btn-primary would mean our change on btn wouldn't be effective on elements with both classes.\n​",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Remember, the last class in the list will override the classes above so, if we saved font-size property with 14px on btn-primary and decided later to change the font-size to 12px on all buttons with the btn class, the change we inadvertendly saved on btn-primary would mean our change on btn wouldn't be effective on elements with both classes."
                ]
            },
            "https://docs.weweb.io/css-and-styling/classes.html#subclasses": {
                "title": "Subclasses ​",
                "content": "To add a subclass to a WeWeb class, simply click on Create subclass below the class you are working on.\nA common use case involves adding a state as a subclass.\nIn order to do that, we can start by adding a state to our element (for example hover ): ​ ​\nAnd make sure we are on that state when styling the element. In the example below, we are on an element with both the btn and btn-primary classes and we can see above the class names that the Hover state is selected: ​\nSince the background color of the button will change on hover depending on the type of button (not all buttons), we'll add a hover subclass to the btn-primary class (not btn ):\nAnd change only the background-color and border CSS properties:\n​\nWe now have 2 classes and one subclass applied: ​ ​\nTo accomplish the same result as our Bootstrap model, we'd need to repeat this process with all the button states we wanted (e.g. hover, focus, and disable), on each button type (i.e. Warning, Success, etc.) to obtain a list of classes that looks something like this: ​ ​\nTIP You cannot have sub-subclasses. We chose this approach because we believe it is the most user-friendly to get started and most maintainable as your project grows in complexity. After extensive user interviews in beta testing, we have yet to come across a use case where this is an issue. If you feel stifled by this implementation, please reach out in the WeWeb community to let us know more about your use case.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP You cannot have sub-subclasses. We chose this approach because we believe it is the most user-friendly to get started and most maintainable as your project grows in complexity. After extensive user interviews in beta testing, we have yet to come across a use case where this is an issue. If you feel stifled by this implementation, please reach out in the WeWeb community to let us know more about your use case."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/supabase/database-select.html",
        "page_title": "Database | Select | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/supabase/database-select.html#fetching-data-with-select": {
                "title": "Fetching data with Select ​",
                "content": "The Database | Select workflow action allows us to get data from our tables. While this is similar to fetching data at the collection level , Database | Select gives us advanced options, namely:\nCount the results : get the total number of matching rows Order the results : sort data by chosen fields Limit the number of rows : return only a specific number of items Limit the query to a range : return rows within a range (useful for pagination) Retrieve one row : get exactly one matching record Retrieve zero or one row : get one record if it exists, nothing if it doesn't Retrieve as CSV : export data in CSV format Using explain : see how the database executes your query (for debugging)\nIn the example below, we are using the Database | Select action in Advanced mode to retrieve data from the properties and property_images tables:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/database-select.html#filters": {
                "title": "Filters ​",
                "content": "To fetch filtered data from Supabase, you can click on Add filter and configure the filter(s) of your choice:\nIn the example above, we have a simple filter to fetch only the properties where the value in the price column is equal to 45000.\nApply if is a toggle switch that controls whether your filter condition is active or not:\nWhen On : the filter (in this case \"price = 450000\") will be applied to your query When Off : the filter is ignored, even though it's set up\nLearn more about Supabase filters in their user documentation.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/database-select.html#count-results": {
                "title": "Count results ​",
                "content": "By default, when you select this option, Supabase will return an object with:\nThe number of items returned (the count ), and The list of items (the data )\nYou can choose to return only the count of items without the list of items switching Return count only to On .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/database-select.html#count-algorithms": {
                "title": "Count algorithms ​",
                "content": "By default, WeWeb will request the Exact count of items to Supabase, but you can ask Supabase to returned the Planned or Estimated count instead.\nExact : counts everything precisely but slower Planned : uses pre-calculated numbers, faster but might be off Estimated : uses Exact for small data, Planned for large data\nTIP Counting is important in database queries to determine how many records exist in a given context. This is commonly needed in flows like: Search results: displaying \"Found 237 results\" after a search query. Analytics & dashboards: calculating total users, sales, or other metrics. Conditional logic: deciding whether to show \"No items found\" or load more data. Since counting all rows ( Exact ) can slow down large queries, optimized methods ( Planned or Estimated ) help improve performance while providing approximate counts. If you are unsure which count algorithm to choose, Supabase recommends starting with Exact and explore other options when performance becomes an issue. Learn more about Supabase count algorithms .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Counting is important in database queries to determine how many records exist in a given context. This is commonly needed in flows like: Search results: displaying \"Found 237 results\" after a search query. Analytics & dashboards: calculating total users, sales, or other metrics. Conditional logic: deciding whether to show \"No items found\" or load more data. Since counting all rows ( Exact ) can slow down large queries, optimized methods ( Planned or Estimated ) help improve performance while providing approximate counts. If you are unsure which count algorithm to choose, Supabase recommends starting with Exact and explore other options when performance becomes an issue. Learn more about Supabase count algorithms ."
                ]
            },
            "https://docs.weweb.io/workflows/actions/supabase/database-select.html#order-the-results": {
                "title": "Order the results ​",
                "content": "With this option, you can order the items in ascending or descending order:\nIn the example above, the properties are ordered by price, in ascending order. As a result, properties with the lowest price are listed first.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/database-select.html#order-by-referenced-table-value": {
                "title": "Order by referenced table value ​",
                "content": "You can order items based on the value of a related field.\nFor example, in our properties table, we could have a main_image field that references the property_images table.\nIn the Fields step of our select configuration, we used the Advanced mode to fetch the related image_url and display_order values of each property record. Now, we can order our properties based on the display_order of its main image:\nTIP Nulls first is an ordering option in SQL that determines where NULL values should appear when sorting results. For example, if you're ordering properties by price and some properties have no price (NULL): With NULLS FIRST : NULL, $450000, $650000 With NULLS LAST : $450000, $650000, NULL\nWARNING You can only sort by data from linked tables using Database | Select if you've first specified those linked fields in Advanced mode. For example, to sort properties by their main image display order, you must first specify property_images:main_image(image_url, display_order) or main_image:main_image(image_url, display_order) in Advanced mode before you can use display_order as a sorting field.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Nulls first is an ordering option in SQL that determines where NULL values should appear when sorting results. For example, if you're ordering properties by price and some properties have no price (NULL): With NULLS FIRST : NULL, $450000, $650000 With NULLS LAST : $450000, $650000, NULL"
                ]
            },
            "https://docs.weweb.io/workflows/actions/supabase/database-select.html#limit-number-of-rows": {
                "title": "Limit number of rows ​",
                "content": "With this option, you can limit the number of rows returned by Supabase. In the example below, you can see Supabase only returns 5 items as requested (from index 0 to 4):\nThis can be very helpful when setting up custom pagination. You can bind the limit to a variable that is updated when a user clicks on a load more button for example.\nTIP You can also limit the number of rows returned in a field referencing another table. Learn more about adding a limit on a referenced table .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP You can also limit the number of rows returned in a field referencing another table. Learn more about adding a limit on a referenced table ."
                ]
            },
            "https://docs.weweb.io/workflows/actions/supabase/database-select.html#limit-range": {
                "title": "Limit range ​",
                "content": "With this option, you can ask Supabase to return a range of items with a start index and end index, for example from 0 to 2:\nThis can be very helpful when setting up custom pagination. You can bind the limit to a variable that is updated when a user clicks on a paginator element for example.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/database-select.html#retrieve-one-row": {
                "title": "Retrieve one row ​",
                "content": "Returns first row of the query.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/database-select.html#retrieve-as-csv": {
                "title": "Retrieve as CSV ​",
                "content": "A CSV is basically just a spreadsheet file - like Excel, but simpler. Getting your Supabase data as a CSV is useful because:\nYou can open it in Excel or Google Sheets to:\nLook through your data easily Make charts and reports Share data with team members who don't use technical tools\nIt's like getting a snapshot of your data that you can:\nSave for your records Email to others Use in other software Print or present\nThe data retrieved from Supabase as a CSV uses ,, to separate rows.\nYou can download this data in a nicely formatted CSV file by\nAdding the CSV plugin to your WeWeb project , Testing your Supabase action first to get a result you can use in the following Download data as CSV action Binding the Supabase action result from the Events tab with a split formula to the Data field of the Download data as CSV action.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/database-select.html#explain": {
                "title": "Explain ​",
                "content": "EXPLAIN is a PostgreSQL command that can help you understand and optimize how your queries are performing.\nThis is an advanced backend feature that we recommend learning through the user documentation of Supabase and its underlying technology PostgreSQL .",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html",
        "page_title": "Add a custom domain | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html#_1-choose-a-subdomain": {
                "title": "1. Choose a subdomain ​",
                "content": "Here, you'll have to type the subdomain and domain name you want to use:\nFor example, type in www.mydomain.com if you want to host your website on the www subdomain or app.mydomain.com if you want to publish your app on the app subdomain.\nWARNING WeWeb doesn’t support naked domain like mydomain.com for the moment. Be sure to use a subdomain. The most common one is www but you could use app or dashboard or any other subdomain that you see fit. For example, WeWeb serves apps on the support , academy and marketplace subdomains of weweb.io .\nTIP When you purchase a domain name with a registar, you don't need to purchase an SSL certificate. WeWeb will provide one for you and update it automatically on a yearly basis as long as you've added the CNAME record in the DNS (see below).",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP When you purchase a domain name with a registar, you don't need to purchase an SSL certificate. WeWeb will provide one for you and update it automatically on a yearly basis as long as you've added the CNAME record in the DNS (see below)."
                ]
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html#_2-update-your-dns-records": {
                "title": "2. Update your DNS records ​",
                "content": "Once you've told WeWeb on what subdomain you want to host your app, you will be provided with information to create two DNS records, both CNAME records:\nthe first will tell the DNS where to find the SSL certificate of your app (so it uses https ) the second will tell the DNS where to find your app\nTIP Thinking of the DNS (which stands for Domain Name System) as \"the phonebook of the Internet\" can be helpful because it reminds us the DNS needs to know at what address (IP or URL) it can find information related to our websites.\nTo update the DNS with these new records, you'll need to find the appropriate section in your domain registar (e.g. Cloudflare, GoDaddy, etc.)\nEach registar will have its own way of referring to what WeWeb calls Name and Value . For example, Cloudflare refers to Name and Content while Namecheap refers to Host and Value .\nIn the end, no matter what your registar calls these fields, the two CNAME records in your DNS should look something like this:\nIn the example above, you can see we chose to redirect our app users to the www subdomain. If we had chosen to publish our app on app.joycekettering.rocks , you would see app here instead of www .\nTIP Some registars will refer to the TTL value in seconds like WeWeb (1800) and others in minutes (30) while others don't give you the option to customize it and simply set it to Auto by default. All three approaches are fine and will not affect the end-result.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Thinking of the DNS (which stands for Domain Name System) as \"the phonebook of the Internet\" can be helpful because it reminds us the DNS needs to know at what address (IP or URL) it can find information related to our websites.",
                    "TIP Some registars will refer to the TTL value in seconds like WeWeb (1800) and others in minutes (30) while others don't give you the option to customize it and simply set it to Auto by default. All three approaches are fine and will not affect the end-result."
                ]
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html#_3-wait-for-dns-propagation": {
                "title": "3. Wait for DNS propagation ​",
                "content": "Once you've added the CNAME records to the DNS, you'll have to wait.\nWARNING Depending on your registar, it can take up to 48 hours for the new CNAME records to take affect. You can check the progress on the DNS checker website\nOnce DNS records are fully propagated, you should be able to access your app when you type its address with the subdomain (e.g. www.yourdomain.com ) and the Value found in DNS fields in WeWeb should appear in green with a success hint saying Your DNS is setup correctly :",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html#_4-redirect-root-domain-optional": {
                "title": "4. Redirect root domain (optional) ​",
                "content": "If you chose to publish your WeWeb app on the www subdomain, you will most likely want to setup a redirection from your root domain to that subdomain so that users who type in yourdomain.com are redirected to the www.yourdomain.com .\nTo do this, you will need to create an alias record on the DNS. You can do this:\nin your domain registar or, if your domain registar doesn't support root domain redirection, through a third-party Delivery Network System like Cloudflare .\nFor option 1, we recommend you refer to your domain registar's documentation to check if they have the ability to provide naked domain redirects for https . Many don't because their redirect server can’t provide SSL service.\nFor such cases, we recommend using CloudFlare to handle your DNS settings and setup a permanent 301 redirection from your root domain to the subdomain of your app (e.g. www or app ).\nAt the time of writing, Cloudflare allows you to do this on a free plan. We have detailed the process in the Namecheap section . While the process to update nameservers will vary from one registar to another, the logic will be the same.\nTIP In most cases, if you published your WeWeb app to a subdomain other than www (e.g. app or academy ), it's because you already have a website using the www subdomain. If that's the case, think twice before redirecting your root domain to another subdomain. Users who type in a root domain name usually expect to land on the www subdomain. Sending them to one of your apps and not your main website could be very confusing.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP In most cases, if you published your WeWeb app to a subdomain other than www (e.g. app or academy ), it's because you already have a website using the www subdomain. If that's the case, think twice before redirecting your root domain to another subdomain. Users who type in a root domain name usually expect to land on the www subdomain. Sending them to one of your apps and not your main website could be very confusing."
                ]
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html#cloudflare": {
                "title": "Cloudflare ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html#dns-records": {
                "title": "DNS records ​",
                "content": "To create the two required CNAME records in Cloudflare:\non the Website tab of your dashboard, select the project you want to configure select DNS > Records in the side menu click on Add record create two CNAME records using the values provided in WeWeb\nWARNING Make sure the Proxy status is disabled and says DNS only on both records.\nIt can take up to 48 hours for the new CNAME records to take affect. You can check the progress on the DNS checker website\nOnce DNS records are fully propagated, your website should be live on your domain.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html#root-domain-redirection": {
                "title": "Root domain redirection ​",
                "content": "If you chose to publish your WeWeb app on the www subdomain, you will most likely want to setup a redirection from your root domain (e.g. yourdomain.com ) to that subdomain (i.e. www.yourdomain.com ).\nThere are two steps to do this in Cloudflare while still supporting the https SSL certificate:\ncreate an alias for the root domain, and create a page rule to redirect traffic on the root domain to the https page on the subdomain",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html#alias-record": {
                "title": "Alias record ​",
                "content": "To create a root domain alias in Cloudflare, add a new CNAME record with the Proxy status enabled that makes the root domain an alias of your www subdomain:\nWARNING For this record, make sure the Proxy status is Proxied .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html#page-rule": {
                "title": "Page rule ​",
                "content": "To create a root domain redirection page rule in Cloudflare:\nmake sure you're in the right project go to Rules > Page Rules type in the root domain with a /* wildcard at the end to include all the pages on the domain (e.g. yourdomain.com/* ) choose the Forwarding URL setting with a 301 - Permanent redirect to ensure the redirection is permanent type in the URL where users should be redirected. This time, make sure it: starts with https:// at the beginning and the subdomain you want to redirect to (usually https://www. ), and ends with /$1 so the redirection URL is dynamic (i.e. so that if someone types in yourdomain.com/dashboard , they are redirected to the dashboard page, not just the homepage of your app) don't forget to save and deploy the page rule\nOnce you save the page rule, it should look something like this (make sure the Action option is enabled):\nTIP In most cases, if you published your WeWeb app to a subdomain other than www (e.g. app or academy ), it's because you already have a website using the www subdomain. If that's the case, think twice before redirecting your root domain to another subdomain. Users who type in a root domain name usually expect to land on the www subdomain. Sending them to one of your apps and not your main website could be very confusing.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP In most cases, if you published your WeWeb app to a subdomain other than www (e.g. app or academy ), it's because you already have a website using the www subdomain. If that's the case, think twice before redirecting your root domain to another subdomain. Users who type in a root domain name usually expect to land on the www subdomain. Sending them to one of your apps and not your main website could be very confusing."
                ]
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html#namecheap": {
                "title": "Namecheap ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html#dns-records-1": {
                "title": "DNS Records ​",
                "content": "To add the two required CNAME records in Namecheap go to Domain List > Manage :\nIn the Advanced DNS menu, click on Add new record and copy/paste the information from your WeWeb project. It should look something like this:\nBoth records should be of Type CNAME Replace Host by the Name value in WeWeb Replace Value by the Data value in WeWeb You can leave the TTL value as Automatic\nOnce you've saved the changes, it can take up to 48 hours for the new CNAME records to take affect. You can check the progress on the DNS checker website . Once DNS records are fully propagated, your website should be live on your domain.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html#root-domain-redirection-1": {
                "title": "Root domain redirection ​",
                "content": "If you chose to publish your WeWeb app on the www subdomain, you will most likely want to setup a redirection from your root domain (e.g. yourdomain.com ) to that subdomain (i.e. www.domain.com ).\nTIP In most cases, if you published your WeWeb app to a subdomain other than www (e.g. app or academy ), it's because you already have a website using the www subdomain. If that's the case, think twice before redirecting your root domain to another subdomain. Users who type in a root domain name usually expect to land on the www subdomain. Sending them to one of your apps and not your main website could be very confusing.\nAt the time of writing, Namecheap does not support naked domain redirects for https because their redirect server can’t provide SSL service. You can, however, use Cloudflare on a free plan to handle your DNS settings and setup a permanent 301 redirection from your root domain to the www subdomain.\nIn your Cloudflare account, when you add a site, you are invited to:\ntype in the domain name of the website, and choose a plan.\nAssuming your domain name was not purchased on or transferred to Cloudflare, you will then be invited to replace the default nameservers of your domain registar (in this case Namecheap) with Cloudflare nameservers:\nIn Namecheap, you can do this by going to your Domain list and clicking on Manage , then choosing the Custom DNS option in the Nameservers section of the page:\nWARNING Once you've updated the nameservers in your domain registar, you can click on the Check nameservers button in Cloudflare to speed up the process but updating the nameservers can take a few hours regardless: Be patient. Cloudflare will send you an email and update the project dashboard once its done:\nOnce this process is complete, you should be able to see your DNS records in Cloudflare.\nHowever, you'll still want to:\nensure the two CNAME records provided by WeWeb are properly setup in Cloudflare create a new CNAME record to alias the root domain create a page rule to redirect users from your root domain to the www subdomain\nPlease refer to our step-by-step Cloudflare guide to ensure your DNS records are setup properly and create a redirection page rule.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/naked-domain4.CTu9TJTX.png",
                    "https://docs.weweb.io/assets/naked-domain5.Cz2nExYo.png"
                ],
                "tips": [
                    "TIP In most cases, if you published your WeWeb app to a subdomain other than www (e.g. app or academy ), it's because you already have a website using the www subdomain. If that's the case, think twice before redirecting your root domain to another subdomain. Users who type in a root domain name usually expect to land on the www subdomain. Sending them to one of your apps and not your main website could be very confusing."
                ]
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html#godaddy": {
                "title": "GoDaddy ​",
                "content": "In your GoDaddy dashboard, go to My Products where you will find your list of domain names.\nClick on DNS for the domain you want to add to WeWeb:\nOn the DNS management page, click on Add :\nAdd 2 records like the following images:\nBoth records should be of Type CNAME Replace Host by the Name value displayed in WeWeb Replace Points to by the Data value displayed in WeWeb",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html#ovh": {
                "title": "OVH ​",
                "content": "On your dashboard, go to Domain names , then click on the domain you want to link to WeWeb:\n👉 Click on DNS Zone:\n👉 Click on Add an entry to add two entries like the following images:\nBoth records should be of Type CNAME Replace Sub-domain by the Name value displayed in WeWeb Replace Target to by the Data value displayed in WeWeb",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html#google": {
                "title": "Google ​",
                "content": "Go to My domains in your Google domains dashboard, then click Manage next to the domain you want to add to WeWeb:\nClick on DNS and scroll to Custom resource records :\nAdd 2 records like the following image:\nBoth records should be of Type CNAME Replace Name (@) by the Name value displayed in WeWeb Replace Data (Domain name) to by the Data value displayed in WeWeb",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/custom-domain.html#gandi": {
                "title": "Gandi ​",
                "content": "Go to Domain in your Gandi dashboard, and click on the domain you want to connect to WeWeb:\nClick on DNS Records > Add :\nAdd 2 records like the following images:\nBoth records should be of Type CNAME Replace Name by the Name value displayed in WeWeb Replace Hostname to by the Data value displayed in WeWeb",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/download-csv.html",
        "page_title": "Download CSV | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/download-csv.html#add-plugin": {
                "title": "Add plugin ​",
                "content": "In the Plugins > Extensions section, you can add the CSV plugin:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/download-csv.html#download-csv-action": {
                "title": "Download CSV action ​",
                "content": "When you add this to your WeWeb project, you will unlock access to the Download data as CSV action in workflows.\nWARNING The Data field in the Download data as CSV action expects an array of items, even if there's only one item in the list. In the example above, we used a split formula to separate rows and bind the Data to an array.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/formulas/text.html",
        "page_title": "Text Formulas | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/formulas/text.html#capitalize": {
                "title": "capitalize ​",
                "content": "This formula will capitalize each word inside a string, meaning it'll replace the first letter of each word by its capitalized counterpart.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#example": {
                "title": "Example ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#concatenate": {
                "title": "concatenate ​",
                "content": "The concatenate formula will regroup multiple strings intro one. It's like adding texts to each other.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#example-1": {
                "title": "Example ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#contains": {
                "title": "contains ​",
                "content": "This formula will return a boolean ( true or false ) according to if a text is present inside another one.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#example-2": {
                "title": "Example ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#indexof": {
                "title": "indexOf ​",
                "content": "indexOf will return the index of the position of a substring inside a text. If the substring isn't in the initial text, it will return -1 .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#example-3": {
                "title": "Example ​",
                "content": "Let's take the text \"hello world\" , if we were to search the position of the substring \"world\" inside it, indexOf will return 6 as \"world\" begins on the sixth index (remember, spaces and special characters do count in strings!).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#lower": {
                "title": "lower ​",
                "content": "This formula will lowercase a given string.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#example-4": {
                "title": "Example ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#split": {
                "title": "split ​",
                "content": "The split formula will separate a text into an array, based on a given separator.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#example-5": {
                "title": "Example ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#subtext": {
                "title": "subText ​",
                "content": "Given a certain text, this formula will return part of it from a given startIndex up to an optional endIndex (not included).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#example-6": {
                "title": "Example ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#textlength": {
                "title": "textLength ​",
                "content": "The textLength formula will return the length of a text, meaning its number of characters (spaces and special characters included).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#example-7": {
                "title": "Example ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#totext": {
                "title": "toText ​",
                "content": "Given a number, a boolean or an array, this formula will return it as a text value.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#example-8": {
                "title": "Example ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#uppercase": {
                "title": "uppercase ​",
                "content": "This formula will return an uppercased version of a string.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/text.html#example-9": {
                "title": "Example ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html",
        "page_title": "Storage | Upload a file | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html#supabase-bucket": {
                "title": "Supabase bucket ​",
                "content": "A bucket is a container for files within Supabase Storage, similar to a folder on your computer. Each bucket can be configured as public (accessible to everyone) or private (restricted access), and can have its own set of permissions and policies controlling who can upload, download, or modify files within it.\nBefore attempting to setup file upload in your WeWeb app, make sure everything is setup correctly in your Supabase project.\nIn the example above, we:\nGo to the Storage section of Supabase Create a new storage bucket Name it your-bucket Decide that everyone can see the files added to this bucket Decide that there will be no restrictions on file size or format Save our new bucket",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html#private-or-public": {
                "title": "Private or public? ​",
                "content": "Create a public bucket if you want everyone to be able to view the files that are stored in that bucket. For example, product images that are meant to be seen and shared easily.\nCreate a private bucket if you want to be able to restrict who sees the files in a bucket. For example, purchase orders or invoices that are meant to be seen by authorized personel.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html#supabase-policies": {
                "title": "Supabase policies ​",
                "content": "If you want users of your WeWeb app to upload files to a Supabase bucket, you will need to create a Supabase policy to that effect:\nIn the example above, we are saying that users need to be authenticated to INSERT or UPDATE a record in the your-bucket bucket.\nTIP This is just one approach possible. You need to decide what conditions a user needs to meet to have the right to insert or update files in a bucket and right policies accordingly. Learn more about Supabase policies .\nWARNING Public buckets allow everyone to read (i.e. SELECT ) data from the bucket. You will still need to do create INSERT , UPDATE , and DELETE policies if you want users to be able to add, update, or delete files in a public bucket.\nNow for the upload workflows in WeWeb.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP This is just one approach possible. You need to decide what conditions a user needs to meet to have the right to insert or update files in a bucket and right policies accordingly. Learn more about Supabase policies ."
                ]
            },
            "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html#upload-elements": {
                "title": "Upload elements ​",
                "content": "To enable file uploads in your WeWeb app, you can work with the Upload file element or the Drag & Drop files element:\nIn the element settings, you can decide if users should be allowed to upload one or more files:\nTIP Upload elements may come with a pre-built workflow that uploads files to WeWeb's CDN and allows you to send file URLs to the backend of your choice. Since you want to upload files directly to Supabase, feel free to remove pre-built workflows to start from scratch:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/supabase-storage-workflow-delete.DRUU6iN4.png"
                ],
                "tips": [
                    "TIP Upload elements may come with a pre-built workflow that uploads files to WeWeb's CDN and allows you to send file URLs to the backend of your choice. Since you want to upload files directly to Supabase, feel free to remove pre-built workflows to start from scratch:"
                ]
            },
            "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html#test-data": {
                "title": "Test data ​",
                "content": "Before creating the upload to Supabase workflow, we recommend going to preview mode and uploading one or more files so that you have test data to work with when binding data in your workflow:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html#single-file-upload": {
                "title": "Single file upload ​",
                "content": "On the file upload element, create a workflow that triggers the Storage | Upload a file action On change :\nYou will be invited to define what bucket the file should be sent to, the name of the file, and the file object itself.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html#from-bucket": {
                "title": "From bucket ​",
                "content": "This is where you will input the name of the Supabase bucket where the file should be stored. In our case, we called it your-bucket .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html#path": {
                "title": "Path ​",
                "content": "This is the name of the uploaded file with its extension:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html#file": {
                "title": "File ​",
                "content": "This is the file object itself (notice how the Current value is an object with a lot of information about the file that was uploaded):\nThat's it! If you test your workflow and go back to your Supabase bucket, you should see the file in storage.\nIf you run into errors, make sure to go back to our section on Supabase RLS policies above.\nTIP When dealing with multiple inputs on the same page, renaming the file upload element in your layout can help you bind data more easily.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/supabase-storage-rename-input.Ctv-SK0q.png"
                ],
                "tips": [
                    "TIP When dealing with multiple inputs on the same page, renaming the file upload element in your layout can help you bind data more easily."
                ]
            },
            "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html#multiple-file-upload": {
                "title": "Multiple file upload ​",
                "content": "To allow multiple file uploads, ensure you have selected Multiple in the upload element settings:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html#loop-through-files": {
                "title": "Loop through files ​",
                "content": "Then, on the file upload element, create a workflow On change that loops through the value component variable:\nTIP By default, when you're using the Drag & Drop files element, it will be called Input File Drop - multiple - value like in our example above but, if you are using a different element or renamed the element in the layout, it will have a different name. For example here, the fact that we renamed the element Uploaded pictures in our layout is reflected in the name of the component variable: What's important is that you select the component variable that refers to the value of the files uploaded. In the case of the multiple file upload, that variable should be an array.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/supabase-storage-upload-variable.D9_fhl_c.png"
                ],
                "tips": [
                    "TIP By default, when you're using the Drag & Drop files element, it will be called Input File Drop - multiple - value like in our example above but, if you are using a different element or renamed the element in the layout, it will have a different name. For example here, the fact that we renamed the element Uploaded pictures in our layout is reflected in the name of the component variable: What's important is that you select the component variable that refers to the value of the files uploaded. In the case of the multiple file upload, that variable should be an array."
                ]
            },
            "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html#test-workflow": {
                "title": "Test workflow ​",
                "content": "Before adding the Supabase Storage | Upload a file action, we recommend uploading a couple of files in preview mode and testing your workflow:\nWARNING This step is very important. If you skip it, it will be much harder for you to bind data in the next step.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html#upload-action": {
                "title": "Upload action ​",
                "content": "Once you have uploaded a couple of files in preview mode and tested your workflow, you can add a Supabase Storage | Upload a file action.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html#from-bucket-1": {
                "title": "From bucket ​",
                "content": "This is where you will input the name of the Supabase bucket where the file should be stored. In our case, we called it your-bucket .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html#path-1": {
                "title": "Path ​",
                "content": "This is the name of the uploaded file with its extension:\nHere, because the user uploaded multiple files, we have to bind to the name inside the current item of the loop action of our workflow.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/storage-upload-file.html#file-1": {
                "title": "File ​",
                "content": "This is the file object itself (notice how the Current value is an object with a lot of information about the file that was uploaded):\nHere, because the user uploaded multiple files, we have to the current item of the loop action of our workflow.\nThat's it! If you test your workflow and go back to your Supabase bucket, you should see the file in storage.\nIf you run into errors, make sure to go back to our section on Supabase RLS policies above.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/loops.html",
        "page_title": "Loops | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/loops.html#iterator-for-loop": {
                "title": "Iterator (for loop) ​",
                "content": "An Iterator is like a helper that repeats an action for each item in a list. You pass a list of data and it automatically performs the same action on each item, one after another, until it has processed every item in your list.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/loops.html#example": {
                "title": "Example: ​",
                "content": "Imagine building a travel planning app. A user types in three cities they want to visit: \"Paris\", \"London\" and \"Tokyo\"\nTo show these cities on a map, you need their exact coordinates. A city name alone isn't enough - maps need numbers like (48.8566, 2.3522) for Paris. So your Iterator would:\nTake \"Paris\" first Ask a geocoding API \"what are the coordinates for Paris?\" Put a pin on the map at those coordinates Move on to \"London\" and do the same thing Finally handle \"Tokyo\"\nIn the example above, you can see that:\nWe loop through a list of city names Based on the current item we are looping through which can be accessed through the Events tab, we make a dynamic API call to OpenCage to get the coordinates of the city We update a selectedCityMarkers variable that we will then bind to our map element to display markers on the selected cities\nWithout an Iterator, you'd need to do this manually for each city. The Iterator automates this repetitive process, handling each city in your list one after another.\nIn the video below, we demonstrate how to configure an Iterator to get coordinates for multiple cities using an API call in more detail:\nTIP The video demo shows getting city coordinates, but you can apply this same pattern to any scenario where you need to process a list of items one by one.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP The video demo shows getting city coordinates, but you can apply this same pattern to any scenario where you need to process a list of items one by one."
                ]
            },
            "https://docs.weweb.io/workflows/loops.html#accessing-loop-information": {
                "title": "Accessing loop information ​",
                "content": "Inside an Iterator loop, you can access information about the current iteration through the Events tab. Click on the Events tab in your formula editor to see these loop-specific values:\nAction.loop.index : The position of the current item in the list (starting at 0) Action.loop.item : The current item being processed Action.loop.items : The entire list of items being processed\nTIP You will only be able to see the available loop information after the loop has ran at least once. After binding your list of data to the loop, you can either test your loop action or test the entire workflow to then be able to access the loop information.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP You will only be able to see the available loop information after the loop has ran at least once. After binding your list of data to the loop, you can either test your loop action or test the entire workflow to then be able to access the loop information."
                ]
            },
            "https://docs.weweb.io/workflows/loops.html#while": {
                "title": "While ​",
                "content": "A While loop continues running an action as long as a specified condition is true. Unlike an Iterator that processes a list, a While loop checks a condition before each iteration and continues running until that condition becomes false.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/loops.html#example-1": {
                "title": "Example: ​",
                "content": "Imagine you're building a game where a player needs to reach a certain score to advance. Here's how a While loop would work:\nSet a condition (like \"score < 100\") Check the condition If true, run the actions inside the loop Check the condition again Continue this cycle until the condition becomes false\nTo set up a While loop:\nAdd a While loop action to your workflow Set the condition to check (must be a boolean true/false) Add the actions you want to repeat inside the loop\nWARNING Always ensure your condition will eventually become false, or your loop will run indefinitely. If your loop never ends, it could freeze your page or cause poor performance.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/loops.html#loop-control": {
                "title": "Loop Control ​",
                "content": "Loop control actions allow you to change how a loop executes, giving you more precise control over your workflow. There are three main ways to control loop execution: Break loop , Continue loop , and Pass through condition .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/loops.html#break-loop": {
                "title": "Break loop ​",
                "content": "A Break loop action stops the loop immediately when its condition is met. This action only works inside Iterator or While loops and will skip any remaining iterations, continuing with the next action after the loop.\nIn the example below, we loop through a list of cities [\"Paris\", \"London\", \"Tokyo\"] . Our Break loop condition is set to Action.loop.item = \"London\" . The workflow logs \"Paris\", then \"London\", but when it reaches \"London\" the break condition becomes true and the loop stops. Since the loop ends at \"London\", \"Tokyo\" is never logged.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/loops.html#continue-loop": {
                "title": "Continue loop ​",
                "content": "The Continue loop action skips the current loop iteration when its condition is met and moves on to the next item. This action only works inside Iterator or While loops.\nIn the example below, we loop through a list of cities [\"Paris\", \"London\", \"Tokyo\"] . Our Continue loop condition is set to Action.loop.item = \"London\" . The workflow logs \"Paris\", skips all actions when it hits \"London\", then processes and logs \"Tokyo\". As a result, you'll only see \"Paris\" and \"Tokyo\" in the logs.\nWARNING Place the Continue loop action at the beginning of your loop actions. Any actions placed before Continue loop will still execute before the skip occurs.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/loops.html#pass-through-condition": {
                "title": "Pass through condition ​",
                "content": "A Pass through condition controls which actions in your workflow execute. When the condition is false, all following actions are skipped. When true, the workflow continues normally. While Pass through condition works in loops like Continue does, it can also be used anywhere in your workflow as a checkpoint to control which actions should run.\nFor instance, If a user doesn't have permission ( false ), all following actions are skipped. If they do have permission ( true ), the workflow continues executing the next actions.\nTIP Position your Pass through condition before any actions you want to conditionally execute. Actions placed before Pass through condition will always run regardless of the condition. This action can be used outside loops",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Position your Pass through condition before any actions you want to conditionally execute. Actions placed before Pass through condition will always run regardless of the condition. This action can be used outside loops"
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/pages/static-collection-page.html",
        "page_title": "Static collection pages | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/pages/static-collection-page.html#use-case": {
                "title": "Use case ​",
                "content": "Let's say you have a collection of products.\nOn your homepage, you'll display all of the products of this collection, but then redirect each of them to a page with more information about each product.\nYou will then create a static collection page, and bind it to the products collection.\nThis page will then duplicate itself for each product, and display the product's information.\nWARNING To create a static collection page, you need to have a collection setup in your app, with the static mode.\nTIP Static collection pages are statically generated when you push the app to production. This means that they will be generated only once, and then they will be served directly from the CDN. This is why they are so fast and good for SEO.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Static collection pages are statically generated when you push the app to production. This means that they will be generated only once, and then they will be served directly from the CDN. This is why they are so fast and good for SEO."
                ]
            },
            "https://docs.weweb.io/pages/static-collection-page.html#create-a-static-collection-page": {
                "title": "Create a static collection page ​",
                "content": "Some explanations:\nYou have to bind a static collection to the page. This is the collection that will be used to duplicate the page for each item in the collection. You have to bind the page path , which is a field in the collection, to the page path. This is the field that will be used to generate the URL of the page. For example, if you have a collection of products, and you want to create a page for each product, you can bind the page path field to the product name field. This way, the URL of the page will be https://your-app.com/product-name .\nThen, on every element or workflow in this page, you'll be able to access the data of the item that is currently displayed:\n(here, we show you how to bind a title, and we've done the same for the domain and the image, hence the final result)",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/static-collection-page.html#link-to-a-static-collection-page": {
                "title": "Link to a static collection page ​",
                "content": "First of all, you can link to a static collection page from any collection list that uses the same collection.\nIndeed, WeWeb will automatically know to which instance of the static collection page to redirect to, based on the element in the collection list the user clicked on.\nLet's see how to do it:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/supabase/database-insert.html",
        "page_title": "Database | Insert | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/supabase/database-insert.html#single-insert": {
                "title": "Single insert ​",
                "content": "With the Supabase insert action, you can create a Single record or Multiple records at once.\nWhen creating a single new record in Supabase, all the table fields will be listed by default:\nTIP Fields with a placeholder that starts with Default: will be filled out automatically by Supabase if left empty.\nYou can choose to select only the fields that you need upon creation of the record:",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Fields with a placeholder that starts with Default: will be filled out automatically by Supabase if left empty."
                ]
            },
            "https://docs.weweb.io/workflows/actions/supabase/database-insert.html#multiple-bulk-insert": {
                "title": "Multiple (bulk) insert ​",
                "content": "To insert multiple records at once, you have two options.\nBind the Rows with a list of items\nIn the example above, we are creating two records with the same values for both the make and model fields.\nClick on Add item and bind each Row to an object\nTIP When binding Rows , the Current value should be a list of items (i.e. an array of objects). When binding a single item, i.e. a Row , the Current value should be a single object with key value pairs.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/supabase-data-insert-multiple-format.X6S1RRth.png"
                ],
                "tips": [
                    "TIP When binding Rows , the Current value should be a list of items (i.e. an array of objects). When binding a single item, i.e. a Row , the Current value should be a single object with key value pairs."
                ]
            },
            "https://docs.weweb.io/workflows/actions/supabase/database-insert.html#return-inserted-rows": {
                "title": "Return inserted rows ​",
                "content": "By default, when you successfully insert a new record, Supabase will simply return a success message.\nDepending on your use case, you may want Supabase to include the row(s) just created in its response .\nTo achieve this, you will need to enable the Return inserted rows option when configuring the insert action in WeWeb:\nWARNING If you enable this option, make sure you are testing the workflow with a user that has the rights to SELECT data from this table. Otherwise, you will get an error because you are trying to read data without being authorized to do so. Learn more about implementing Supabase RLS policies .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/database-insert.html#using-explain": {
                "title": "Using explain ​",
                "content": "EXPLAIN is a PostgreSQL command that can help you understand and optimize how your queries are performing.\nThis is an advanced backend feature that we recommend learning through the user documentation of Supabase and its underlying technology PostgreSQL .",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/settings-billing-code-export/cloudflare-self-hosting-guide.html",
        "page_title": "How to self-host on Cloudflare | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/settings-billing-code-export/cloudflare-self-hosting-guide.html#prerequisites": {
                "title": "Prerequisites ​",
                "content": "A Cloudflare account (free) A Starter or Scale WeWeb project subscription",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/cloudflare-self-hosting-guide.html#let-s-start-with-cloudflare-first": {
                "title": "Let’s start with Cloudflare first: ​",
                "content": "On Cloudflare's dashboard, click on the Workers & Pages section.\nMake sure you are on the Overview tab. If you already have another Worker in this section, click on the Create button and then go to the Pages tab. Go to the second section on the page and click on \"Upload assets\".\nGive your project a name and then click on Create project.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/cloudflare-self-hosting-guide.html#weweb": {
                "title": "WeWeb ​",
                "content": "Next, go to your project dashboard in WeWeb. Go to the Deployments tab.\nTIP Your project must have been published at least once before you can export the project files.\nHere, you will see Staging and Production environments:\nTIP In this guide, we will export code from the production environment, but you can also export the staging version of your app if you are on the Scale plan. If you recently made changes on staging and you want to export the app with those changes, promote the staging version to production first.\nClick on the three dots on the right (⫶) and select Download project files. This will download a zip directory of the project files to your device. This zip archive includes the compiled project (a Vue.js application) with all the files necessary for hosting it on Cloudflare.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Your project must have been published at least once before you can export the project files.",
                    "TIP In this guide, we will export code from the production environment, but you can also export the staging version of your app if you are on the Scale plan. If you recently made changes on staging and you want to export the app with those changes, promote the staging version to production first."
                ]
            },
            "https://docs.weweb.io/settings-billing-code-export/cloudflare-self-hosting-guide.html#cloudflare": {
                "title": "Cloudflare ​",
                "content": "Upload the zip archive you just downloaded from WeWeb into the Upload your project assets section. Make sure you select Upload zip before you upload.\nClick the \"Deploy site\" button after all files are successfully uploaded.\nUpon deploying, Cloudflare will provide you with some additional information and options:\nCloudflare site URL Option to add a custom domain\nYou can ignore the other options for now.\n10, If you click on \"Continue to project\", you will be redirected to the Deployments tab of your applications’s Worker:\nYour application is now live and fully self-hosted on Cloudflare!",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/cloudflare-self-hosting-guide.html#making-changes-to-the-self-hosted-application": {
                "title": "Making changes to the self-hosted application ​",
                "content": "Make changes in your app in WeWeb. Publish the application again. Export the code following the steps described earlier. Download new zip file for latest version. In the Overview of Workers & Pages, go to the Deployments tab and click on Create a new deployment.\nSelect your deployment environment Upload the new zip archive. Click on Save and deploy.\nAfter a successful deployment, your changes will be reflected in the self-hosted application.\nTIP Always test your updated application thoroughly after deployment to ensure all changes are correctly reflected and functioning as expected.\nBy following these steps, you can easily export your WeWeb project and self-host it on Cloudflare, as well as keep it updated with any changes you make in WeWeb.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Always test your updated application thoroughly after deployment to ensure all changes are correctly reflected and functioning as expected."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/components/advanced-properties.html",
        "page_title": "Advanced properties | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/components/advanced-properties.html#bindable": {
                "title": "Bindable ​",
                "content": "On : property can accept both fixed values and dynamic values\nOff : property can only accept fixed values",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/advanced-properties.html#responsive": {
                "title": "Responsive ​",
                "content": "On : Different values per screen size Off : Same value across all devices",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/advanced-properties.html#states": {
                "title": "States ​",
                "content": "On : Define values for different states (hover, active, etc.) Off : Single state only",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/advanced-properties.html#classes": {
                "title": "Classes ​",
                "content": "As your project grows and you reuse components across different places, setting up each component's properties one by one can become time-consuming.\nClasses let you:\nConfigure property values once Save them as a reusable class in your WeWeb library Apply that class to any instance of the component\nThink of Classes as presets for your component properties - set up once, reuse everywhere. This not only saves time but also ensures consistency across your project.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/components/advanced-properties.html#a-practical-use-case": {
                "title": "A practical use case ​",
                "content": "Imagine you have an input component that can be reused as a username field, email field, or password field.\nWhen you add another instance of this input to use as a username field, you need to reconfigure all its properties again:\nInstead of manually setting these same properties (label, value, hint text) every time you need a username field in your app, you can:\nToggle the Classes option for each property\nExit the component's Edit mode and save all these username-specific instance properties as a reusable class in your library.\nNext time you need a username input, just add the component and select this class\nThis way, one click applies all the username field settings instead of configuring each property manually. It's especially useful when you're using the same input configuration repeatedly throughout your project.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/formulas/intro-to-formulas.html",
        "page_title": "Intro to formulas | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/formulas/intro-to-formulas.html#binding-formulas": {
                "title": "Binding formulas ​",
                "content": "You can use WeWeb formulas in any binding:\nIn the example above, you can see:\nwe opened the binding explorer, went to the formula tab to look for the pre-built switch formula, and wrote a formula directly in the explorer to format the text on the page based on the value of item in our collection.\nThis formula is local in the sense that, if we wanted to use it elsewhere in our app, we would have to re-write or copy/paste it.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/intro-to-formulas.html#create-a-global-formula": {
                "title": "Create a global formula ​",
                "content": "As your app grows in complexity, we recommend you build global formulas in the Actions tab that you can then use throughout your app:\nIn the example above, you can see:\nin the Actions tab, we created several global formulas, the formatNumber_nocode formula takes a Text input that expects a number in the binding explorer, global formulas can be found in the From project section of the formula tab",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/intro-to-formulas.html#bind-to-a-global-formula": {
                "title": "Bind to a global formula ​",
                "content": "Global formulas are helpful because you can use them everywhere:\nIn the example below, you can see:\nwe opened the binding explorer to a text element, went to the formula tab, used our global formatNumber_nocode formula, and built on top of it to format additional text.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/intro-to-formulas.html#global-vs-local-formulas": {
                "title": "Global vs local formulas ​",
                "content": "In some cases, it makes sense to create formulas that are scoped to a specific element or component.\nIn other cases, it's helpful to create global formulas that you can reuse throughout your app.\nAs a general rule, if you catch yourself re-writing or copy/pasting formulas multiple times, it's a sign you might want to create a global formula instead because, if you need to debug or improve it down the line, you can do it in one place.\nIn addition, using global formulas will allow you to see which ones are being used on a page:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/data-sources/supabase-data.html",
        "page_title": "Supabase data source | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/data-sources/supabase-data.html#plugin-configuration": {
                "title": "Plugin configuration ​",
                "content": "The Supabase plugin connects WeWeb directly to your Supabase project, enabling you to manage your tables, API endpoints, database functions, secrets and integrations right from within the WeWeb interface.\nTo add the plugin in WeWeb:\nNavigate to Back-end > Add Supabase :\nOnce you've added it, you will have the option to connect to your project in Guided or Custom mode for self-hosted Supabase projects:\nGrant the necessary permissions to Supabase.\nBack in WeWeb, you will see that your account is connected and that you will be able to select your existing Supabase project or create a new one:\nUpon clicking on \"Continue\" to confirm the setup, we can see additional plugin information, such as the configuration, and realtime collections:\nTIP Realtime tables allow you to see changes to data immediately when they happen, without needing to refresh the page. By default, Supabase disables realtime on tables for performance reasons. This means: You need to turn on realtime both in Supabase first, then in WeWeb When realtime is on, any changes to your data (like updates, new entries, or deletions) show up instantly for users\nIf we click on the Backend panel, the tables from our database:\nIn this guide, we will be working with the properties and properties_images tables.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Realtime tables allow you to see changes to data immediately when they happen, without needing to refresh the page. By default, Supabase disables realtime on tables for performance reasons. This means: You need to turn on realtime both in Supabase first, then in WeWeb When realtime is on, any changes to your data (like updates, new entries, or deletions) show up instantly for users"
                ]
            },
            "https://docs.weweb.io/plugins/data-sources/supabase-data.html#fetching-data": {
                "title": "Fetching data ​",
                "content": "We can create a collection in WeWeb using Supabase as a data source. This will essentially allow us to get data from specific tables and store them in a collection, which is just a place to store data.\nGo to Data > New Choose Supabase as a Source Select which database table you want to pull data from:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/supabase-data.html#guided-mode": {
                "title": "Guided mode ​",
                "content": "Guided mode will be enabled by default, which is a mode that pre-configures the collection to pull in data from every available table column without requiring manual selection.\nIn the example below, we decided to exclude the data from the created_at , created_by and updated_ columns in our properties table:\nAs a result, our collection will look like this:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/supabase-data.html#advanced-mode": {
                "title": "Advanced mode ​",
                "content": "Advanced mode lets you get information from multiple connected tables at once, rather than just one table at a time.\nTIP In web development, this relational retrieval of informations is termed a 'join'. You can join tables when they have fields that relate to one another, allowing you to retrieve records that have the relation from the joined tables.\nFor example, think of your property listings like this:\nThe properties table stores the basic details of each property with the columns:\nid , address , bathrooms , bedrooms , description , price , square_feet , title\nThe property_images table stores multiple images for each property:\nid , image_url , property_id Each image is linked to its property using property_id image_url is where the actual image link is stored\nThe relationship works because each row in property_images has a property_id that matches an id in the properties table, allowing you to know which images belong to which property.\nA collection can show data from two connected tables. To do this, use this format: name_of_second_table:id(which_columns_you_want)\nIn our properties example, if we wanted to get the related images of a property we would write: property_images:id(image_url)\nThis tells WeWeb to:\nLook at the property_images table Connect it to the main properties table Show only the image_url column from property_images\nSo for each property, you'll see its own details plus its related images, all in one collection:\nTIP In the example above, we used a one-to-many database relationship. One property can have many images, but you can also accomplish one-to-one relationships, that is, one property can have one main image from the property_images table. Suppose you have a column in the properties table called main_image which points to the property_images table. We can get its value by writing main_image: main_image(image_url) :",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/advanced1.B8cIT748.png"
                ],
                "tips": [
                    "TIP In web development, this relational retrieval of informations is termed a 'join'. You can join tables when they have fields that relate to one another, allowing you to retrieve records that have the relation from the joined tables.",
                    "TIP In the example above, we used a one-to-many database relationship. One property can have many images, but you can also accomplish one-to-one relationships, that is, one property can have one main image from the property_images table. Suppose you have a column in the properties table called main_image which points to the property_images table. We can get its value by writing main_image: main_image(image_url) :"
                ]
            },
            "https://docs.weweb.io/plugins/data-sources/supabase-data.html#row-level-security": {
                "title": "Row-Level Security ​",
                "content": "Row-Level Security (RLS) is a security mechanism that controls who can access or modify which rows in a table. Without RLS, anyone with database access can view, update, or delete all rows.\nImagine a school database with a students table. Without RLS, everyone could see all students' records. But with RLS:\nA student can only see their own grades. A teacher can see only their students' grades. The principal can see everyone’s grades.\nBy default, Supabase allows full access to all data so you can quickly set up and test your apps without restrictions. However, once you enable RLS on a table, Supabase blocks all access until you create explicit policies defining who can read or modify data.\nEnable RLS for your table\nDefine policies for the table:\nIn the example below, we have the following policies:\nEnable insert for authenticated users only INSERT Enable read access for all users SELECT Enable delete for property owners DELETE Enable update for property owners UPDATE\nWARNING If RLS is enabled for a table but no policies are defined, WeWeb will not be able to fetch data for your collection. To ensure proper access, always create the necessary policies.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/supabase-data.html#filtering-pagination-sorting": {
                "title": "Filtering, Pagination & Sorting ​",
                "content": "When working with large amounts of data in Supabase, you might need backend filtering, pagination and sorting. WeWeb handles this at the collection level. You don't need to set these up in Supabase - simply select your collection and go to the Query configuration section.\nThis means even with, for example, 50,000 records or more, you can efficiently control how your data is loaded and displayed.\nIn the example below, we are getting only five records because the pagination limit is 5!",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/triggers.html",
        "page_title": "Triggers | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/triggers.html#element-triggers": {
                "title": "Element triggers ​",
                "content": "Element triggers activate when users interact with WeWeb elements:\nOn focus : Fires when an element receives focus (e.g., clicking into an input field) On blur : Fires when an element loses focus (e.g., clicking away from an input field)",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/triggers.html#mouse-events": {
                "title": "Mouse events ​",
                "content": "Mouse-related triggers capture various pointer interactions:\nOn click : Triggers when an element is clicked On double click : Activates upon two rapid successive clicks On right click : Fires when the right mouse button is clicked On mouse down : Triggers when a mouse button is pressed down On mouse up : Fires when a mouse button is released On mouse move : Activates when the mouse pointer moves On mouse enter : Fires when the pointer enters an element's bounds On mouse leave : Triggers when the pointer exits an element's bounds",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/triggers.html#touch-events": {
                "title": "Touch events ​",
                "content": "Touch event triggers support mobile and touch-screen interactions:\nOn touch start : Fires when a touch point is placed on the screen On touch move : Triggers when a touch point moves along the screen On touch end : Activates when a touch point is removed from the screen On touch cancel : Fires when a touch event is interrupted",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/triggers.html#other-events": {
                "title": "Other events ​",
                "content": "Additional triggers for broader interaction scenarios:\nOn scroll : Activates when an element or the window is scrolled",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/triggers.html#lifecycle-events": {
                "title": "Lifecycle events ​",
                "content": "When you visit a webpage, your browser creates something called the DOM (Document Object Model). Think of the DOM as a live representation of your webpage - like a blueprint that shows how all elements (buttons, text, images) are organized and connected. Every time you interact with a webpage, you're actually interacting with its DOM.\nEvery modern web browser includes Developer Tools (often called \"Dev Tools\") that let you inspect the DOM. The most common way to access it is:\nRight-click on any element of a webpage Select \"Inspect\" or \"Inspect Element\"\nThis opens the browser's Dev Tools , usually showing you the \"Elements\" panel:\nWeWeb elements and components go through different stages from initialization to deletion in the DOM - this is called their lifecycle. Events related to component and element lifecycle:\nOn created : Fires when an element is initialized in the DOM On mounted : Triggers after an element is placed and ready to use on the page Before unmount : Executes just before an element is removed from the page\nTIP The 'On created' event is fired before the 'On mounted' event. When an element is 'created', it exists in the DOM but it may not have rendered on the page and/or be ready for user interaction. The 'On mounted' event signifies the element has been rendered on the page and is now ready for user interaction.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP The 'On created' event is fired before the 'On mounted' event. When an element is 'created', it exists in the DOM but it may not have rendered on the page and/or be ready for user interaction. The 'On mounted' event signifies the element has been rendered on the page and is now ready for user interaction."
                ]
            },
            "https://docs.weweb.io/workflows/triggers.html#page-and-app-triggers": {
                "title": "Page and app triggers ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/triggers.html#lifecycle": {
                "title": "Lifecycle ​",
                "content": "On app load (before fetching collections) : The first trigger that fires when your app starts up. Happens before any data is loaded from your database, good for initial setup tasks. On app load : Happens after your app is completely ready and all data has been loaded. Everything is set up and ready to use. On page load (before fetching collections) : Fires when someone opens a page, but before that page's data is loaded. Good for page preparation tasks. On page load : Triggers when a page and all its data is fully loaded and ready. The page is now complete and usable. On page unload : Happens when someone leaves a page - whether going to another page or closing the tab. Good for saving changes or cleanup.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/triggers.html#listeners": {
                "title": "Listeners ​",
                "content": "On page scroll : Triggers when page is scrolled On page resize : Fires when browser window is resized On keydown : Triggers when a keyboard key is pressed On keyup : Fires when a keyboard key is released\nTIP The On page load (before fetching collections) trigger can be helpful when the data you load on the page depends on the current user's information. For example, you might want to display news items that the user has not yet read or load only the data that matches the user's role in the organization. Common use cases for app triggers include but are not limited to: Triggering the display of a cookie banner if applicable, Display a custom alert whenever there is a collection fetch error in your app, Change the color of a top navbar when the user scrolls down any page in your app.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP The On page load (before fetching collections) trigger can be helpful when the data you load on the page depends on the current user's information. For example, you might want to display news items that the user has not yet read or load only the data that matches the user's role in the organization. Common use cases for app triggers include but are not limited to: Triggering the display of a cookie banner if applicable, Display a custom alert whenever there is a collection fetch error in your app, Change the color of a top navbar when the user scrolls down any page in your app."
                ]
            },
            "https://docs.weweb.io/workflows/triggers.html#on-error": {
                "title": "On error ​",
                "content": "The On error workflow triggers when an error occurs at any step of the workflow execution. If any action/step in the workflow fails (e.g., an API call returns an error, or an action encounters an invalid value), the On error branch will execute.\nYou can define specific actions under On error to:\nNotify users of the issue (e.g., display an error message). Log the error for debugging purposes. Retry the failed action or workflow step.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/triggers.html#on-error-vs-on-collection-fetch-error": {
                "title": "On error vs on collection fetch error ​",
                "content": "The on collection fetch error trigger is a special trigger that fires whenever any collection in your application fails to fetch its data. So if you have multiple collections like:\nusers collection products collection orders collection\nAnd you create a workflow starting with the on collection fetch error trigger, that workflow will run whenever any of these collections fails to fetch its data. This is different from the on error tab in a workflow which only handles errors within its specific workflow's actions.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/extensions/open-ai.html",
        "page_title": "OpenAI | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/extensions/open-ai.html#plugin-setup": {
                "title": "Plugin setup ​",
                "content": "When you add the OpenAI plugin to WeWeb, you will be invited to enter your OpenAI API key and, if you wish, you can add prompts at plugin level:\nYou may wonder why we added prompts in the plugin configuration. The answer is simple: this ensures your prompts are secure.\nIndeed, you could make API calls to OpenAI via our REST API plugin but you really shouldn't.\nWhy?\nBecause the calls you make with the REST API plugin are visible in the inspector of the user's browser.\nThis is completely normal by the way.\nHowever, when you make an API call that requires a secret API key or includes sensitive data you want to keep private, it's crucial that you make calls through a backend.\nIn the case of OpenAI, there are 2 pieces of information you want to key private:\nyour secret API key, and your prompts.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/open-ai.html#secured-prompts": {
                "title": "Secured prompts ​",
                "content": "When you build a product on top of AI, the value of the product is in the work you put in designing the system and prompts.\nThat's why it's important that you protect that intelligence by adding your prompts at plugin level.\nLet's compare an API call made with the REST API plugin vs an API call made using WeWeb's native integration with OpenAI.\nFirst, let's make a request to OpenAI with a standard frontend API call:\nIn the example above, you can see:\nin the Network tab of the user's browser, you can find the API request, look at the payload of the request, see the prompt we sent to OpenAI, and the private API key linked to our OpenAI account.\nNow, let's make a request to OpenAI using WeWeb's native integration.\nFirst, we'll want to define the prompts we want to keep private at plugin level:\nThen, we'll make the request using an OpenAI action in a Workflow:\nIn the example above, you can see:\nin the Network tab of the user's browser, you can find the API request, look at the payload of the request, see the id of the prompt we configured at plugin level, but not its content\nSo if we had put in a lot of work coming up with \"Propose a name for a {fill_in_the_blank}\" to make our product unique, we would be very happy we protected that prompt.\nNote that you can see the animal variable we included in our prompt and the value of that variable. That's completely fine since the user just filled out that information themselves. It's not confidential or proprietary information.\nOk, now that we're clear on why we should keep our prompts secure, let's learn how to use OpenAI actions in Workflows.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/open-ai.html#text-completion-example": {
                "title": "Text completion example ​",
                "content": "First, let's have a look at the text completion product.\nHow does it work?\nIn the words of OpenAI: \"You input some text as a prompt, and the model will generate a text completion that attempts to match whatever context or pattern you gave it.\"\nYou can ask a simple question like \"Write a tagline for an ice cream shop\" and it will return something like the answer in highlighted below:\nBut to leverage the true power of OpenAI, you'll often want to spend some time writing the perfect prompt with detailed instructions on the how you want the answer to look.\nLet's look at this example:\nWe go to the Open AI API playground We choose the Complete mode to use text completion We choose the text-davinci-003 model because it's the most recent at the time of writing We set the Temperature to 0 on a scale from 0 to 2 because we want the AI to be mathematical, not creative at all We set the Maximum length of the answer to 2000 characters because we don't want the answer to be restricted to the default 256 We write a prompt that asks OpenAI to return a regular expression patterns for emails in a certain format that we can easily reuse in our app to validate user inputs in an email field, i.e. the regular expression itself and an explanation of how it works We click on Submit Open AI returns an answer\nTIP The Temperature scale in the playground is 0 to 1 but the API actually allows you to go up to 2.\nAs you can see, a lot of thought went into the prompt:\nwe said we wanted users to input email addresses we asked OpenAI to return the regular expression pattern in a specific format we asked OpenAI to include a text to explain how the regex was built\nSo how would it work in WeWeb?\nWell, you would take the prompt you engineered in the OpenAI playground and copy it in the plugin:\nTo add a prompt, you'll need to click on Add item . For each prompt, you can add as many variables as you want.\nWhen you click on Add variable , a new variable will be added to your prompt content with the default {{var1}} value:\nYou'll want to give it a more descriptive name so that, when you build your API request to OpenAI, you remember what value is expected.\nIn our Return Regex prompt above, we had a variable named {{need}} .\nWhen we configure the API call to OpenAI in a Workflow, it's easy for us to replicated what we had in the OpenAI API playground:\nIn the example above, you can see:\nwe're making a request to OpenAI's Complete API based on the text-davinci-003 model using the Return Regex prompt we configured in the plugin binding the {{need}} variable we set in the plugin to a variable on our page with a maximum token of 2000 to ensure we get a reply, and a temperature of 0 to ensure that the reply is not creative\nTo learn more about how to work with these settings, please refer to the OpenAI API documentation .\nTIP OpenAI has many applications and subtleties. When first starting out, we recommend the following approach: engineer your prompts using the OpenAI playground once you're happy with your prompt, configure it in the WeWeb OpenAI plugin then, add a workflow on a button to test an OpenAI action with your prompt and preferred settings finally, build the other steps you need in the workflow and UI to create a great user experience Trying to build the UI and API request at the same time is very challenging. Best ace your prompt in OpenAI first, then test in WeWeb, then design the user experience.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP The Temperature scale in the playground is 0 to 1 but the API actually allows you to go up to 2.",
                    "TIP OpenAI has many applications and subtleties. When first starting out, we recommend the following approach: engineer your prompts using the OpenAI playground once you're happy with your prompt, configure it in the WeWeb OpenAI plugin then, add a workflow on a button to test an OpenAI action with your prompt and preferred settings finally, build the other steps you need in the workflow and UI to create a great user experience Trying to build the UI and API request at the same time is very challenging. Best ace your prompt in OpenAI first, then test in WeWeb, then design the user experience."
                ]
            },
            "https://docs.weweb.io/plugins/extensions/open-ai.html#chat-completion-example": {
                "title": "Chat completion example ​",
                "content": "Now let's look at an example with OpenAI's chat completion features 🙂\nBack in the OpenAI playground, we:\nchanged the Mode to Chat gave the AI a personality and a few instructions simulated a user's first question submitted the question to get an answer from Open AI based on the system's answer, we decided to change a few settings, we chose the latest Model available to us, in this case gpt-4 increased the Temperature to 0.9 so the AI's answer would be more creative decreased the Maximum length to 150 tokens so the answer wouldn't be too long (it's not nice to scroll when you need a screenshot for the user docs ^^)\nTIP Don't be afraid to iterate a few times in the OpenAI playground to adjust your settings before moving to WeWeb.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Don't be afraid to iterate a few times in the OpenAI playground to adjust your settings before moving to WeWeb."
                ]
            },
            "https://docs.weweb.io/plugins/extensions/open-ai.html#chat-completion-system-configuration-in-weweb": {
                "title": "Chat completion system configuration in WeWeb ​",
                "content": "Once you're happy with your setup in the OpenAI playground, you can go back to the OpenAI plugin in WeWeb.\nContrary to the Text completion use case, you won't need to add any prompts at plugin level since the end-users of the chat you build will be asking their own questions.\nHowever, you'll need to add the instructions you came up with to define the AI's System . In the example below, we copy / pasted the personality and instructions we want the chatGPT to follow:\nWARNING When you build a product on top of AI, the value of the product is in the work you put in designing the system and prompts. It's important that you protect that intelligence by adding it at plugin level. Indeed, if you pass the system instructions directly in an API call in WeWeb, that intelligence will be visible to end-users in the Network tab of their browser inspector. However, if you setup secured prompts at plugin level, end-users will only be able to see that an id was called in the browser inspector. They won't have access to the content of the prompt itself.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/open-ai.html#chat-completion-workflow-in-weweb": {
                "title": "Chat completion workflow in WeWeb ​",
                "content": "The first thing to understand when working with the OpenAI's chat completion API is that the API expects to receive a list of message and each message will contain several pieces of information.\nIn developer terms, the chat completion API expects an array of objects :\nWhat you can see in the screenshot above is that:\nthe first item on the list is always the personality and instructions we defined as the system the rest of the list alternatives between messages from the user and answers from the AI assistant\nThis is important because it tells us how we need to structure the input we send to chatGPT to get helpful results.\nIn WeWeb, we'll create a workflow that does the following when a user asks a question:\nwe update our list of messages with the user's question we send that list of messages to OpenAI when OpenAI answers, we update our list of messages with the AI's answer\nThree things to keep in mind:\nif we don't send the expected format (i.e. an array of objects), the API will return an error message, so we need to make sure we include the role and content of each message if we don't send the entire message sequence, the AI will not have the entire context of the conversation if we send the entire message sequence but don't follow the sequential order of the conversation, the AI will not have the right context\nLet's take a look at a simple example to make things clearer.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/open-ai.html#step-1-update-a-messages-array-variable-with-the-user-s-input": {
                "title": "Step 1 - Update a messages array variable with the user's input: ​",
                "content": "Note that we are sending the information shown in the OpenAI documentation for a user message, i.e. {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"}\nThough you may have noticed that we don't include the first system message in our list of messages. This is because the messages variable will need to go back and forth in the frontend (i.e. the user's browser) every time a user asks a question to the AI.\nInstead, what we did is we defined the system in a secured prompt at plugin level and we'll call that system in step 2. That way, its content will not be visible in the user's navigator like the list of user and AI messages:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/open-ai.html#step-2-make-a-request-to-openai-s-api": {
                "title": "Step 2 - Make a request to OpenAI's API: ​",
                "content": "This screenshot shows us that:\nour second action in the workflow uses the chat completion action of the OpenAI plugin with the gpt-4 model with the system we defined in WeWeb's OpenAI plugin secured prompts and sends it the messages variable we have in our project and updated in step 1",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/open-ai.html#step-3-–-update-the-messages-variable-with-the-ai-s-answer": {
                "title": "Step 3 – Update the messages variable with the AI's answer ​",
                "content": "TIP In steps 1 and 3, make sure to insert the new user questions and AI answers at the end of the list of messages . This will enable the AI to have the full context of the conversation in the right order.\nThat's it!\nYou should be good to go 🙂\nTo learn more about how to use OpenAI's Chat completion in WeWeb, we recommend reading OpenAI's API documentation and reverse-engineering WeWeb's TemplateGPT project:",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP In steps 1 and 3, make sure to insert the new user questions and AI answers at the end of the list of messages . This will enable the AI to have the full context of the conversation in the right order."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/create-url-from-base64.html",
        "page_title": "Create URL from Base64 | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/create-url-from-base64.html#input": {
                "title": "Input ​",
                "content": "In the example below, our backend returns an image in Base64 but the info looks like this and is unreadable as is:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/create-url-from-base64.html#output": {
                "title": "Output ​",
                "content": "We can use the Create URL from Base64 action in a workflow to transform the Base64 into a object URL :\nThe result from this action is an object URL:\nWe can use this object URL to reference the file in our app so that users can download it or see it on the page.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/create-url-from-base64.html#example": {
                "title": "Example ​",
                "content": "In the example below, we bound the object URL to an image element to display the image in our app:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/print-pdf.html",
        "page_title": "Print PDF | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/print-pdf.html#how-it-works": {
                "title": "How it works ​",
                "content": "When triggered, this action opens your browser's print dialog, where users can:\nPreview the page layout Choose printer settings Save as PDF Select specific pages to print Adjust margins and scaling",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/print-pdf.html#configuration": {
                "title": "Configuration ​",
                "content": "Since this action uses the browser's built-in print functionality, no additional configuration is required. Simply add it to your workflow and it will open the print dialog when triggered.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/print-pdf.html#common-applications": {
                "title": "Common applications ​",
                "content": "This action is particularly useful for generating printable reports, creating PDF versions of documents, or allowing users to save receipts and confirmations. It's commonly used in:\nReport generation interfaces Invoice printing systems Document management tools Receipt generation after purchases Exporting data views for offline use",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/build-guides/using-the-crm-template.html",
        "page_title": "Learn how to build you own CRM application | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#data-structure": {
                "title": "Data structure ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#deals": {
                "title": "Deals ​",
                "content": "The deals are all the commercial opportunities that a CRM stores. They’re linked to users and companies.\nid integer created_at timestamp title text content text status text tag password user_id integer companies_id integer due_date date",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#companies": {
                "title": "Companies ​",
                "content": "Every CRM revolves around deals that are tied to a contact and a company. That’s why we have to store companies in a separate table, as some deals can be linked to the same company.\nid integer created_at timestamp name text logo image description text",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#contacts": {
                "title": "Contacts ​",
                "content": "A contact is the person attached to a deal, that’s also part of a company. In the case of a CRM, that’s the person you’re “trying to close” on a deal.\nid integer created_at timestamp name text email text company text",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#user": {
                "title": "User ​",
                "content": "The user table store the information about the users of the application. This is where we the information goes when a new user signs up.\nid integer created_at timestamp firstName text lastName text email text password password role text",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#sign-in-sign-up-pages": {
                "title": "Sign in / Sign up Pages ​",
                "content": "These pages allows your users to sign up, sign in and reset their password.\nThe Inputs and Button are components from the Starter Kit . You can change their settings in the properties panel.\nThe Form container , that holds the inputs and buttons, has a workflow Sign in . This workflow is triggered when the form is submitted.\nThe Sign up page was built the same way as the Login page, with a few more inputs and a Sign in workflow.\nThose 2 pages are responsive. In tablet breakpoint, the left content takes up the whole width and the right content is hidden.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#sidemenu": {
                "title": "Sidemenu ​",
                "content": "The Sidemenu contains Item Link components. If you edit the component (1), it will automatically update all instances of it throughout the Sidebar, except the properties that you apply directly on the instance such as its link and its props (2) .\nThe Sidebar component comes with an integer variable menuWidth (located in the Sidemenu folder of the Variables panel). This variable is connected to the width of the Sidebar in the desktop breakpoint. It also defines the left padding of the Deals section.\nThe Sidemenu component is responsive by default! In tablet breakpoint, the sidemenu will be hidden by default, and can be activated with the menu icon in the top menu.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#deals-page": {
                "title": "Deals page ​",
                "content": "This is the page where your user will be able to create and manage deals.The main component on that page is the Kanban .\nA Kanban is made up of Column stacks where the cards can be moved to. In each columns you’ll find: a Header (1), an Item div (2) and a Footer (3).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#bind-data-to-the-kanban": {
                "title": "Bind data to the Kanban ​",
                "content": "The Kanban component is linked to our Deals collection . So each Item of the Kanban will be repeated for each Deal inside of that collection.\nIn the properties pannel, you’ll find a Stacks properties where you can define what column exists in your component. The value of the Stack by needs to match the value of the Stack in order. In this case, it’s the value of my item’s status.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#customize-the-kanban": {
                "title": "Customize the Kanban ​",
                "content": "Cards\nWhen you select any element inside of a card, you’ll see that its content is bound to a formula (1). On the first tab of the formula pannel (2), you have access to the context where you can find all the properties of the current deal.\nHeader\nThe color property of the Square element is bound to a Switch formula that determines the background-color depending on the status.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#add-a-deal": {
                "title": "Add a deal ​",
                "content": "To add a new deal, you can click on the Create deal button . It will display a modal containing a form. This button triggers workflow that opens the New Deal Modal.\nOn submit, that form takes all the information from the inputs in the forms and sends them to the backend. At the end of the workflow, the modal is closed.\nThis nested workflow is a global workflow . This method allows us to have one workflow that can be used at multiple places but managed in one. When you define a global workflow, you can set parameters to be used inside it. This is useful to add different variables and values in different situations.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#change-status": {
                "title": "Change status ​",
                "content": "The Kanban component has a trigger On item moved that detects when the user moves a card. Each time this trigger is fired, we are sending the data to the backend to save the new status of the card.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#display-a-deal-in-a-drawer": {
                "title": "Display a deal in a drawer ​",
                "content": "When the user clicks on a card 2 things are happening: the card becomes active and the drawer opens with the deal’s information.\nThis is made possible with the selectedItem object variable. On click on the card, all the deal’s information is copied inside of the selectedItem variable.\nThe drawer opens with all the data of the current deal.\nInside of the drawer, all the elements content are bound to the selectedItem object keys.\nThe clicked card becomes active.\nThe card has a Selected state (1) that is activated when the Condition (2) is met. In this case, we are looking at the current card id, and checking if the id in the selectedItem matches it. If they are equal, the condition returns true . Inside of the state, you can modify any property that you want. On our card, we modified the background-color to be darker.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#modify-a-deal": {
                "title": "Modify a deal ​",
                "content": "Same as the new deal workflow, you can also edit deals. When you click on Edit button in the drawer, you open the edit modal. With the Init value prop of the Input components , you can pre-fill the input with the current deal information (stored in the selectedItem variable).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#action-bar": {
                "title": "Action bar ​",
                "content": "The Kanban can be filtered by deal owner. To do that, we used a Dropdown Component that acts as a Select component. When you open the dropdown, you have a collection list of all the user from the User collection.\nOn click on a user, the variable dealOwner is set with the user’s id . The second action is a component action linked to the dropdown. It allows us to close it after selection.\nThe dealOwner variable is then use in the Filter setting of the items bound to the Kanban.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#companies-page": {
                "title": "Companies page ​",
                "content": "The Companies list is bound to the Companies collection. Each company has a name, a logo and a description.\nOn that page, we are using 3 workflows to interact with the collection:\nCreate company on the Form submit workflow of the New company modal. Edit company on the Form submit workflow of the Edit company modal. Delete company on the Delete button of the Edit company modal.\nYou have a search input below the Heading that allows you to perform a backend filter. The filter is set directly on the Xano endpoint. The input trigger the workflow on change. That means the collection refetched every time the input value changes, with the new query parameter.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#contacts-page": {
                "title": "Contacts page ​",
                "content": "The contact list is bound to the Contacts collection. A contact has a name, a company and an email.\nOn that page, we are using 2 workflows to interact with the collection:\nCreate contact on the Form submit workflow of the modal after clicking on Add contact. Edit contact on the Form submit workflow of the modal after clicking on a contact. Delete contact on the Delete contact button of the Edit modal\nYou also have the ability search for a contact with the Search input that applies a frontend filter on the list. This means, all results are still loaded in the browser but not on the page. This time, the filter was made on the Collection parameters .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#settings-page": {
                "title": "Settings page ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/using-the-crm-template.html#build-your-own-crm": {
                "title": "Build your own CRM! ​",
                "content": "This template get you started building your customized CRM using WeWeb as the frontend and the backend of your choice!",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/css-and-styling/states.html",
        "page_title": "States | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/css-and-styling/states.html#how-to-create-a-state": {
                "title": "How to create a State ​",
                "content": "To create a new CSS state, click on the element you want to create the state on, then on Default > Add State :",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/states.html#how-to-configure-a-state": {
                "title": "How to configure a state ​",
                "content": "When the state if created, open its tab and set 3 options:\nthe state's name the condition under which the state should trigger, which is bindable and should return true when the state is to be active, false otherwise whether to apply the state the the element's children or not\nWhen the state is selected at the top of the style sidebar, any CSS changes that you'll do will be only applied for this state.\nExample: here the color and display will only change when the state Please Click Me! is activated:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/states.html#how-to-apply-a-state-to-an-element-s-children": {
                "title": "How to apply a State to an element's children ​",
                "content": "When Apply to children is set to On , you can use the state on any of the element's children by simply using it. It should be called {{Parent}}:{{State name}} .\nFor example, if a button has a state called Please Click Me! , an icon inside this button can use the same state which would be called Button:Please Click Me! :",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/states.html#focus-state": {
                "title": "Focus state ​",
                "content": "The button and input elements recognize the focus state if you add it as a custom state on the element.\nIn the example below, we have a focus state on an input that changes the border color when a user navigates to the input:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/websockets/xano-realtime/history.html",
        "page_title": "Get channel history | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/websockets/xano-realtime/history.html#pre-requisite": {
                "title": "Pre-requisite ​",
                "content": "In order to get history, we first need to enable Message History in the settings of our Xano Realtime channel settings:\nXano can retrieve up to 1,000 of the most recent messages per channel when accessing Message History. For our demo example, you can select any number of messages available on the list.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/history.html#overview": {
                "title": "Overview ​",
                "content": "Now we want our users to see past messages from other users once they join our chatroom. To achieve this, we will:\nadd a Request history action create a workflow to listen for the history event type process history data to extract messages merge historical messages with current messages update UI to display combined message history",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/history.html#request-history-action": {
                "title": "Request history action ​",
                "content": "In your Realtime | Open channel action , set Get history on join to On . This will enable new users to see past messages when they join:\nAdd the Realtime | Request history action after your Open channel action, provide the channel name, and test the action:\nWe can see the Request History action succeeded, but where exactly is the history data?\nThe Request history action doesn't immediately give you the message history. Instead, it asks Xano to prepare the history. Once ready, Xano sends this history through a separate history event, which we need to listen for to receive and use the historical messages.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/history.html#listen-for-history-events": {
                "title": "Listen for history events ​",
                "content": "To ensure we can access our requested history, we can create a new page or app workflow that listens for the history event:\nWARNING Workflows that listen to realtime events must be executed at page or app level because you are essentially saying: when this app or this specific page is open in a browser, I want the browser to listen for events so it can react to it.\nThis workflow will listen to history events from the selected Xano channel.\nWe can store information from this event in a WeWeb variable and display it in our UI.\nIn the example below, we created a history array variable and saved the history part of the event we received from Xano:\nWe can then use our WeWeb variable to display history data in our UI in whichever way we like.\nTIP Note that the history array sent by Xano contains a lot of information that you may or may not need, depending on your use case: Feel free to tweak what you save to the WeWeb variable to adjust to your needs.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/xano-realtime-history-array.rIRMlWw0.png"
                ],
                "tips": [
                    "TIP Note that the history array sent by Xano contains a lot of information that you may or may not need, depending on your use case: Feel free to tweak what you save to the WeWeb variable to adjust to your needs."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/css-and-styling/css-grid.html",
        "page_title": "CSS grid | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/css-and-styling/css-grid.html#why-use-css-grids": {
                "title": "Why use CSS grids ​",
                "content": "CSS grids are a powerful tool to build complex, responsive layouts on the web.\nFor example, designing a complex layout like this would be complex with a flex display but is fairly easy with a grid display:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-grid.html#css-grid-basics": {
                "title": "CSS grid basics ​",
                "content": "UNDERSTANDING CSS GRID BASICS The following article aims to explain how to use CSS grid properties in the WeWeb editor. If you're new to CSS grids, we recommend you take the time to understand how CSS grids work in general. We have selected 4 free resources that can help you with this: Learn CSS Grid helpfully lists and illustrates all available grid CSS properties CSS Grid Garden is an fun, interactive way to understand CSS grid properties MDN's docs explains the basic concepts of grid layouts Grid by Example includes numerous examples of grid layouts with the underlying HTML & CSS to reverse-engineer how each was built",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "UNDERSTANDING CSS GRID BASICS The following article aims to explain how to use CSS grid properties in the WeWeb editor. If you're new to CSS grids, we recommend you take the time to understand how CSS grids work in general. We have selected 4 free resources that can help you with this: Learn CSS Grid helpfully lists and illustrates all available grid CSS properties CSS Grid Garden is an fun, interactive way to understand CSS grid properties MDN's docs explains the basic concepts of grid layouts Grid by Example includes numerous examples of grid layouts with the underlying HTML & CSS to reverse-engineer how each was built"
                ]
            },
            "https://docs.weweb.io/css-and-styling/css-grid.html#grid-container": {
                "title": "Grid container ​",
                "content": "In the Style tab of WeWeb containers, you will find grid and inline-grid under the Display property options:\nWhen a container has a grid or inline-grid display, all the children of that container become grid items.\nLearn more about the grid container .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-grid.html#grid-direction": {
                "title": "Grid direction ​",
                "content": "Grids can have a horizontal (\"row\") or vertical (\"columns\") direction:\nIn the example above, we have 3 containers that can be displayed as rows or columns.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-grid.html#grid-column-row-size": {
                "title": "Grid column & row size ​",
                "content": "By default, each column or row will have the same width and height respectively.\nYou can, however, be explicit and set a fixed width or height to create more complex layouts:\nIn CSS, this corresponds to the grid-template-rows and grid-template-columns properties.\nIn WeWeb, you have a couple of options to work with these properties:\nuse the no-code interface of WeWeb as shown in the columns example above, or bind the Rows or Columns settings in WeWeb to CSS values as shown in the rows example below.\nIn the example above, you can see we have an array of 5 values that defines the height of the 5 rows in our grid.\nLearn more about explicit grid templates",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-grid.html#grid-gaps": {
                "title": "Grid gaps ​",
                "content": "Grid gaps (also called \"gutters\") are an elegant way of handling spacing:\nLearn more about grid gaps .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-grid.html#grid-items-span-position": {
                "title": "Grid items span & position ​",
                "content": "For each item in a grid, you can define its:\nspan: how many row or column units does it span, position: where should it be placed in the row or column\nLet's look at a few examples.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-grid.html#example-1": {
                "title": "Example 1 ​",
                "content": "In both cases, the grid container is configured as follows:\nDirection : Row Columns : auto-generated Rows : auto-generated Width : 100% Height : 500px\nThe grid on the left has no additional settings on the grid items. The grid on the right contains grid items where we specified the span or position.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/css-grid.html#example-2": {
                "title": "Example 2 ​",
                "content": "In all three cases, the grid container is configured as follows:\nDirection : Column Columns : 3 columns of 1fr Rows : 3 rows of 1fr Width : 100% Height : auto\nThe grid at the top has no additional settings on the grid items.\nGrid item A of the middle grid has a Column position of 2/4 .\nGrid item A of the bottom grid has a Row span of 2 and a Column position of 2/4 .\nTIP In the example above, notice that each grid has 4 vertical lines. When we give the Column position property a 2/4 value, it means that the grid item should take up the space between vertical line 2 and vertical line 4 in the grid. Learn more about positioning items by grid line number .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP In the example above, notice that each grid has 4 vertical lines. When we give the Column position property a 2/4 value, it means that the grid item should take up the space between vertical line 2 and vertical line 4 in the grid. Learn more about positioning items by grid line number ."
                ]
            },
            "https://docs.weweb.io/css-and-styling/css-grid.html#troubleshooting": {
                "title": "Troubleshooting ​",
                "content": "As mentioned above, this article aims to explain how to use CSS grid properties in the WeWeb editor.\nIf you're new to CSS grids, we recommend you take the time to understand how CSS grids work in general.\nWe have selected 4 free resources that can help you with this:\nLearn CSS Grid helpfully lists and illustrates all available grid CSS properties CSS Grid Garden is an fun, interactive way to understand CSS grid properties MDN's docs explains the basic concepts of grid layouts Grid by Example includes numerous examples of grid layouts with the underlying HTML & CSS to reverse-engineer how each was built\nIf you're still stuck after this, don't hesitate to reach out in the WeWeb Community ! Make sure to include visuals that show:\nthe end result you're trying to achieve, and the styles settings you have applied to your grid container and grid items.\nWe'll do our best to help 🙂",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/settings-billing-code-export/project-settings/project-settings.html",
        "page_title": "Project Settings | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/settings-billing-code-export/project-settings/project-settings.html#deployments": {
                "title": "Deployments ​",
                "content": "In the Deployments tab, you will be able to:\npublish your app, preview a previous version of the Editor, rollback to a previous version of the Editor.\nLearn more about WeWeb Deployments",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/project-settings.html#domain": {
                "title": "Domain ​",
                "content": "In the Domain tab, you will be able to connect a custom domain to your WeWeb app.\nLearn how to add a custom domain to your project",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/project-settings.html#backups": {
                "title": "Backups ​",
                "content": "In the Backups tab of a project, you can see all the different versions of the Editor that you can potentially rollback to.\nLearn more about WeWeb Backups",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/project-settings.html#self-hosting": {
                "title": "Self-Hosting ​",
                "content": "See documentation on self-hosting here .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/project-settings.html#plans": {
                "title": "Plans ​",
                "content": "The Plans tab is where you can upgrade or downgrade your pricing plan according to your projects' needs.\nFor example, if you're ready to publish and want to move away from the Free plan.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/project-settings.html#settings": {
                "title": "Settings ​",
                "content": "In the Settings tab, you can:\nChange the project name Setup a webhook that will get POSTed to when the app is pushed to production Delete the project (beware, this will be permanent and we won't be able to recover your project)",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/project-settings.html#safe-mode": {
                "title": "Safe mode ​",
                "content": "If your app crashes or behaves strangely when you open a project in the Editor, we recommend opening the project in safe mode.\nTo open a project in safe mode, you'll:\nneed to be on the Projects tab of your WeWeb workspace, click on the Settings of the project you want to debug, click on the three dots icon next to the Open Editor button, and choose if you want to debug with workflows and/or formulas disabled\nThis will allow you to test your project:\nwith all workflows disabled, or with all workflows and formulas disabled.\nThis can help you identify what you need to debug in your app.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/change-variable-value.html",
        "page_title": "Change variable value | WeWeb Documentation",
        "sections": {}
    },
    {
        "url": "https://docs.weweb.io/formulas/object.html",
        "page_title": "Objects Formulas | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/formulas/object.html#createobject": {
                "title": "createObject ​",
                "content": "This formula helps you create JavaScript objects using nocode. List pairs of keys and values that will be transformed into an object.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/object.html#example": {
                "title": "Example ​",
                "content": "Let's say we want to create this object using a formula:\njs { name : \"quentin\" , age : 29 , job : \"growth\" }\nWe would do it in WeWeb like so:",
                "code_snippets": [
                    {
                        "code": "{\n    name: \"quentin\",\n    age: 29,\n    job: \"growth\"\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/object.html#getkeyvalue": {
                "title": "getKeyValue ​",
                "content": "This formula will return the value for a given key in an object.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/object.html#example-1": {
                "title": "Example ​",
                "content": "Taking back our previous object, now stored in a person variable:\njs { name : \"quentin\" , age : 29 , job : \"growth\" }\nLet's say we want to get back the value for the job key. We would do it like this:",
                "code_snippets": [
                    {
                        "code": "{\n    name: \"quentin\",\n    age: 29,\n    job: \"growth\"\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/object.html#compare": {
                "title": "compare ​",
                "content": "This formula will check if two objects are equal, meaning if they have the same key and values.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/object.html#example-2": {
                "title": "Example ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/object.html#keys": {
                "title": "keys ​",
                "content": "The keys formula will return all keys from a given object as an array.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/object.html#example-3": {
                "title": "Example ​",
                "content": "Using our previous person object:\njs { name : \"quentin\" , age : 29 , job : \"growth\" }\nUsing the keys formula will give us:",
                "code_snippets": [
                    {
                        "code": "{\n    name: \"quentin\",\n    age: 29,\n    job: \"growth\"\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/object.html#omit": {
                "title": "omit ​",
                "content": "Given an object, this formula will return it without some listed keys.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/object.html#example-4": {
                "title": "Example ​",
                "content": "Using our previous person object:\njs { name : \"quentin\" , age : 29 , job : \"growth\" }\nLet's say we want to remove the age from it. We'll use omit for this:",
                "code_snippets": [
                    {
                        "code": "{\n    name: \"quentin\",\n    age: 29,\n    job: \"growth\"\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/object.html#pick": {
                "title": "pick ​",
                "content": "This formula will do the exact opposite as omit . Meaning it will return an object with certain given keys only.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/object.html#example-5": {
                "title": "Example ​",
                "content": "Let's say we want to do the same as the previous example , but using pick . We would do:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/object.html#setkeyvalue": {
                "title": "setKeyValue ​",
                "content": "setKeyValue will add a given key with a given value to an object.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/object.html#example-6": {
                "title": "Example ​",
                "content": "Using our previous person object:\njs { name : \"quentin\" , age : 29 , job : \"growth\" }\nWe want to add a country key to it. Here's how we would do it:",
                "code_snippets": [
                    {
                        "code": "{\n    name: \"quentin\",\n    age: 29,\n    job: \"growth\"\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/object.html#values": {
                "title": "values ​",
                "content": "This formula will return all the values from a given object as an array.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/object.html#example-7": {
                "title": "Example ​",
                "content": "Using our previous person object:\njs { name : \"quentin\" , age : 29 , job : \"growth\" }\nHere's how to list all of the values:",
                "code_snippets": [
                    {
                        "code": "{\n    name: \"quentin\",\n    age: 29,\n    job: \"growth\"\n}",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/websockets/supabase-realtime/broadcast-message.html",
        "page_title": "Broadcast (and receive) a message | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/websockets/supabase-realtime/broadcast-message.html#pre-requisites": {
                "title": "Pre-requisites ​",
                "content": "Before users of your WeWeb app can send and receive Supabase realtime broadcast messages, they need to subscribe to a realtime broadcast channel .\nOnce that's done, they can start sending & receiving realtime broadcast messages.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/supabase-realtime/broadcast-message.html#broadcast-a-message": {
                "title": "Broadcast a message ​",
                "content": "To allow users to send messages in a channel, use the Broadcast a message action:\nIn the example above, you can see:\nWe triggered the Broadcast a message action. To send a message to a channel we named room1 . We said these messages should be called a chat event. We configured the payload of the event to be an object with the user's name and the text from a chat input.\nNote that the Event name can be whatever you like. It's important you remember it if you want to filter on specific events later, when you start listening and reacting to events.\nWARNING The Channel name should match a channel that the user already subscribed to.\nWhen the Broadcast a message action is successful, the workflow Logs will simply inform you that the message was sent:\nThe action sends the realtime event to the channel but that's it.\nReceiving (and displaying) messages is a separate matter.",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/supabase-realtime-broadcast-message-error.fxgARhg5.png"
                ],
                "tips": []
            },
            "https://docs.weweb.io/websockets/supabase-realtime/broadcast-message.html#receive-broadcast-events": {
                "title": "Receive broadcast events ​",
                "content": "If we want users in the channel to receive messages from other users, we need to create a page or app workflow that is triggered when there's a new realtime broadcast event in a channel.\nWARNING Workflows that listen to realtime events must be executed at page or app level because you are essentially saying: when this app or this specific page is open in a browser, I want the browser to listen for events so it can react to it.\nIn the example below, we setup a workflow on a page with a chatroom:\nThe workflow is triggered when there's a new broadcast event in the room1 channel. To help us debug things, we used the Logs action and bound it to the entire workflow Event object. Then we updated a variable with the payload of the workflow Event .\nTIP Note that, the preview of the Event object and event payload in the workflow editor displays placeholder information. When you test your setup in preview mode, the payload of the broadcast event you receive here will match the Payload value you defined when you created the Broadcast a message action before:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/supabase-realtime-broadcast-message.CzSaS67q.png"
                ],
                "tips": [
                    "TIP Note that, the preview of the Event object and event payload in the workflow editor displays placeholder information. When you test your setup in preview mode, the payload of the broadcast event you receive here will match the Payload value you defined when you created the Broadcast a message action before:"
                ]
            },
            "https://docs.weweb.io/websockets/supabase-realtime/broadcast-message.html#display-broadcast-events": {
                "title": "Display broadcast events ​",
                "content": "Broadcast events are ephemereal by design (see Supabase docs on the topic).\nTo display these events in your WeWeb app, you'll want to update a variable every time there's a new event and bind that variable to an item on your page. That way, your UI can react dynamically to the event it receives.\nFor example, in the case of a live collaboration tool that tracks cursor positions, you might have a cursors array variable with a seperate objet for every active user. Each object would include the user's cursor position. On your page, you could use that variable to move cursor icons around the page based on each user's position.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/supabase-realtime/broadcast-message.html#realtime-debugger": {
                "title": "Realtime debugger ​",
                "content": "In Supabase, you can open the Realtime page to check if messages go through ok:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/extensions/npm.html",
        "page_title": "NPM | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/extensions/npm.html#add-plugin": {
                "title": "Add plugin ​",
                "content": "To start working with npm packages in your project, go to Plugins > Extensions :\nThis plugin will allow you to load popular utility libraries from npm and utilize them directly in the editor.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/npm.html#plugin-limitations": {
                "title": "Plugin limitations ​",
                "content": "Any type of npm package can be installed, as long as it:\nis available on unpkg.com , and is packed in a UMD file, adds an instance to the window, and correctly instructs unpkg about what file to serve.\nHowever, it's crucial to understand that not all loaded packages will be functional.\nFor the loaded library to be usable, it must be registered in the window. This import method is unique to each library, even though most libraries utilize this method.\nAfter adding a library, you must specify the name of the instance it exposes. This allows weweb to establish a connection and incorporate it into the no-code interface.\nIn the example provided, the xlsx (or SheetJS) library can be accessed through the XLSX instance (in uppercase):\nMost of the time, you'll find the instance name in the library documentation.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/npm.html#e-g-parse-a-csv": {
                "title": "E.g. parse a CSV ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/npm.html#code-snippets": {
                "title": "Code snippets ​",
                "content": "If you'd like to reproduce the exact same use case, here are the code snippets we used:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/npm.html#users-collection": {
                "title": "users collection ​",
                "content": "javascript return [ { user: \"jane\" , age: 28 , active: true }, { user: \"barney\" , age: 25 , active: true }, { user: \"fred\" , age: 40 , active: false }, ];",
                "code_snippets": [
                    {
                        "code": "return [\n  { user: \"jane\", age: 28, active: true },\n  { user: \"barney\", age: 25, active: true },\n  { user: \"fred\", age: 40, active: false },\n];",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/npm.html#csv-variable": {
                "title": "csv variable ​",
                "content": "csv Country, Population (Millions), Area (Square Kilometers) United States, 331.4, 9, 525, 067 Canada, 37.8, 9, 984, 670 Brazil, 212.6, 8, 515, 767 Australia, 25.8, 7, 692, 024 China, 1443.7, 9, 596, 961 India, 1393.4, 3, 287, 263 Russia, 145.9, 17, 125, 191 United Kingdom, 67.1, 242, 495 Germany, 83.1, 357, 022 France, 67.1, 551, 695",
                "code_snippets": [
                    {
                        "code": "Country,Population (Millions),Area (Square Kilometers)\nUnited States,331.4,9,525,067\nCanada,37.8,9,984,670\nBrazil,212.6,8,515,767\nAustralia,25.8,7,692,024\nChina,1443.7,9,596,961\nIndia,1393.4,3,287,263\nRussia,145.9,17,125,191\nUnited Kingdom,67.1,242,495\nGermany,83.1,357,022\nFrance,67.1,551,695",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/npm.html#e-g-generate-a-qr-code": {
                "title": "E.g. generate a QR code ​",
                "content": "In this video, Ray Deck of StateChange uses WeWeb's NPM plugin to build a QR code generator:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/supabase/invoke-edge-function.html",
        "page_title": "Edge Functions | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/supabase/invoke-edge-function.html#pre-requisites": {
                "title": "Pre-requisites ​",
                "content": "To use Edge Functions in WeWeb, you'll need to create them on your local machine first, then upload them to Supabase. After that, you can invoke them in your WeWeb workflows using the Invoke Edge function action.\nTIP You need to create Edge Functions locally because Supabase doesn't provide a web editor for function development. Local development also lets you test your functions and fix any issues before uploading them to Supabase's servers.\nBefore starting, ensure you have:\nThe latest version of the Supabase CLI to create and upload functions from your computer. Docker Desktop for a secure, isolated environment. A text editor like Visual Studio Code for writing and editing functions.\nTIP Docker Desktop replicates Supabase's server environment locally. Edge Functions must run in the exact same conditions locally as they will on Supabase's servers. Without this isolation, your computer's specific setup could make functions work locally but fail when deployed.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP You need to create Edge Functions locally because Supabase doesn't provide a web editor for function development. Local development also lets you test your functions and fix any issues before uploading them to Supabase's servers.",
                    "TIP Docker Desktop replicates Supabase's server environment locally. Edge Functions must run in the exact same conditions locally as they will on Supabase's servers. Without this isolation, your computer's specific setup could make functions work locally but fail when deployed."
                ]
            },
            "https://docs.weweb.io/workflows/actions/supabase/invoke-edge-function.html#process-overview": {
                "title": "Process overview ​",
                "content": "Assuming you have all of the above, the process to invoke a Supabase Edge Function in your WeWeb app will go as follows:\nCreate a project folder on your computer where you run Supabase locally . Create the function and edit it. Deploy the function to your Supabase project . Invoke the Supabase function in your WeWeb app.\nLet's go through this step by step.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/invoke-edge-function.html#setup-your-workspace": {
                "title": "Setup Your Workspace ​",
                "content": "Create a folder (e.g., my_project ) and open it in Visual Studio Code: Open the terminal (command window) in VS Code:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/invoke-edge-function.html#set-up-supabase-locally": {
                "title": "Set up Supabase locally ​",
                "content": "Type supabase init in the terminal. This creates a new Supabase workspace in your folder. Say yes when VS Code asks to set up some helpful tools (for Deno, which runs code).\nThis creates a bunch of new files in the my_project folder. Some files are for VS Code, and others are for the local Supabase setup.\nTIP Deno is a tool that runs JavaScript code outside of browsers, enabling edge functions to work. It acts as an interpreter, helping functions communicate with servers.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Deno is a tool that runs JavaScript code outside of browsers, enabling edge functions to work. It acts as an interpreter, helping functions communicate with servers."
                ]
            },
            "https://docs.weweb.io/workflows/actions/supabase/invoke-edge-function.html#create-a-function": {
                "title": "Create a function ​",
                "content": "Next, to create an Edge function in your project, run the command supabase functions new your-function-name .\nThis creates a new file where you'll write your function.\nThe index.ts file comes with an Edge function boilerplate that you can use as a starting point to write your own functions.\nTIP Supabase Edge functions are written in TypeScript. This is what the .ts file extension stands for. Learn more about how to write Supabase Edge functions .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Supabase Edge functions are written in TypeScript. This is what the .ts file extension stands for. Learn more about how to write Supabase Edge functions ."
                ]
            },
            "https://docs.weweb.io/workflows/actions/supabase/invoke-edge-function.html#test-and-deploy": {
                "title": "Test and deploy ​",
                "content": "Open Docker Desktop. Run supabase start to test your function locally. WARNING Ensure Docker Desktop is running. Otherwise, you'll encounter errors like: In the terminal, run supabase functions deploy your-function-name to deploy the function and then enter your Supabase project ID (found in project settings). Check Supabase dashboard to confirm upload, and that's it!",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/supabase/invoke-edge-function.html#invoke-the-function": {
                "title": "Invoke the function ​",
                "content": "In WeWeb, you can call Supabase Edge functions by:\nSelecting the Invoke an Edge function action in a workflow. Entering the function name (e.g., your-name-function ). Configuring the request: Method : Choose the appropriate HTTP method (e.g., POST , GET ). Authorization headers : Include a valid token to authenticate the request. Body (for POST ): Include a JSON object (e.g., { \"name\": \"Joyce\" } ).\nWhen tested, the response will match the format defined in the Supabase Edge function, such as:\nTIP Authorization headers ensure only authorized clients (e.g., your WeWeb app) can access the Supabase Edge Function. They include tokens (e.g., JWT or API keys) to authenticate requests, which is essential for sensitive operations like database access or payments.\nTIP Use POST for sending data or performing actions that modify data (e.g., creating a record, processing a payment). Use GET for retrieving data or performing read-only operations (e.g., fetching a list of items). Use PUT or PATCH for updating data, and DELETE for removing data.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Authorization headers ensure only authorized clients (e.g., your WeWeb app) can access the Supabase Edge Function. They include tokens (e.g., JWT or API keys) to authenticate requests, which is essential for sensitive operations like database access or payments.",
                    "TIP Use POST for sending data or performing actions that modify data (e.g., creating a record, processing a payment). Use GET for retrieving data or performing read-only operations (e.g., fetching a list of items). Use PUT or PATCH for updating data, and DELETE for removing data."
                ]
            },
            "https://docs.weweb.io/workflows/actions/supabase/invoke-edge-function.html#cors": {
                "title": "CORS ​",
                "content": "CORS (Cross-Origin Resource Sharing) is a safety feature that checks if your app is allowed to request data from different places. You might see CORS errors when connecting to Supabase edge functions.\nTo resolve CORS issues, simply add this object to your edge function:\ntypescript // At the top of your edge function file (index.ts): const corsHeaders = { 'Access-Control-Allow-Origin' : '*' , 'Access-Control-Allow-Headers' : 'authorization, content-type' } //Inside your edge function's response handler (where you return data to the frontend), modify your response to include these CORS headers: // This is where you modify the response to include CORS headers return new Response ( JSON . stringify (data), { headers: { ... corsHeaders, 'Content-Type' : 'application/json' } })\nTIP CORS headers are set by the server (Edge Function) , not the frontend. Use 'Access-Control-Allow-Origin': '*' to allow all domains or specify your app's domain (e.g., https://yourapp.com ) for better security. These headers act as a basic security pass, allowing your app to communicate with the Edge Function.\nTIP To optimize Edge Functions, consider breaking down tasks into smaller functions. Example: Instead of trying to process an entire video with one edge function, you could have Function 1 to extract video frames Function 2 to analyze visual content Function 3 to transcribe audio",
                "code_snippets": [
                    {
                        "code": "// At the top of your edge function file (index.ts):\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, content-type'\n}\n//Inside your edge function's response handler (where you return data to the frontend), modify your response to include these CORS headers:\n\n// This is where you modify the response to include CORS headers\nreturn new Response(JSON.stringify(data), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n})",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": [
                    "TIP CORS headers are set by the server (Edge Function) , not the frontend. Use 'Access-Control-Allow-Origin': '*' to allow all domains or specify your app's domain (e.g., https://yourapp.com ) for better security. These headers act as a basic security pass, allowing your app to communicate with the Edge Function.",
                    "TIP To optimize Edge Functions, consider breaking down tasks into smaller functions. Example: Instead of trying to process an entire video with one edge function, you could have Function 1 to extract video frames Function 2 to analyze visual content Function 3 to transcribe audio"
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/execute-component-action.html",
        "page_title": "Execute component action | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/execute-component-action.html#components-created-with-the-editor": {
                "title": "Components created with the editor ​",
                "content": "Components are designed to be self-contained with their own variables and workflows. By default, component workflows are encapsulated and only accessible from within the component to maintain clean separation of concerns and prevent unwanted external interference.\nTo make a workflow available as an action that can be triggered from outside the component, select the component workflow and enable Allow execution from outside . This allows the workflow to be triggered from anywhere using the Execute component action action.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/execute-component-action.html#built-in-elements": {
                "title": "Built-in elements ​",
                "content": "Some WeWeb elements come with pre-configured actions . For example, the default WeWeb video element comes with 3 actions that help you control video playback:\nIn the example below, we used the component actions configured in the default WeWeb video element to build our own custom controls:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/execute-component-action.html#coded-components-adding-actions": {
                "title": "Coded components: adding actions ​",
                "content": "In WeWeb, you can import custom Vue.js components with your own config file. If you need inspiration, our components are open source .\nLearn more about developing custom components with Aurélie and Q:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/encode-file-as-base64.html",
        "page_title": "Encode file as Base64 | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/encode-file-as-base64.html#what-is-it-for": {
                "title": "What is it for ​",
                "content": "The Encode file as Base64 allows you to:\ntake a file that was uploaded by a user, and, encode in the Data URL or Base64 format.\nDepending on your use case you will choose one output type or another.\nThe Encode file as Base64 is very useful if you want to upload files directly to your backend without going through WeWeb's CDN, and without resorting to custom code.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/actions/encode-file-as-base64.html#how-it-works": {
                "title": "How it works ​",
                "content": "In the example below, we created a workflow on a file upload element:\nadded the Encode file as Base64 action, decided what file we wanted to encode by selecting the component variable of our file upload element, chose to receive the encoded file in Data URL , and tested the action to see the result of the action\nThen we made a couple of requests to our backend to upload the file there and create a new record in one of our database tables.\nTIP The requests you make in your workflow and the format you choose for the output of the Encode file as Base64 action will depend on what you need to do with the file afterwards or where you want to send it. In the example below, we show you how to use it to upload a file directly to Xano:",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP The requests you make in your workflow and the format you choose for the output of the Encode file as Base64 action will depend on what you need to do with the file afterwards or where you want to send it. In the example below, we show you how to use it to upload a file directly to Xano:"
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/pages/sitemap.html",
        "page_title": "Sitemap | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/pages/sitemap.html#auto-generated-sitemap": {
                "title": "Auto-generated sitemap ​",
                "content": "When you publish a WeWeb app, an XML sitemap is generated automatically with all the public, static pages of your app.\nYou can view it at subdomain.yourdomain.com/sitemap.xml .\nIt will look something like this:\nxml <? xml version = \"1.0\" encoding = \"UTF-8\" ?> < urlset xmlns = \"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml = \"http://www.w3.org/1999/xhtml\" > < url >< loc >https://www.joycekettering.rocks/onboarding/</ loc >< lastmod >2024-07-12</ lastmod >< changefreq >monthly</ changefreq >< priority >0.5</ priority >< xhtml:link rel = \"alternate\" hreflang = \"en\" href = \"https://www.joycekettering.rocks/onboarding/\" /></ url > < url >< loc >https://www.joycekettering.rocks/post_login_page/</ loc >< lastmod >2024-07-12</ lastmod >< changefreq >monthly</ changefreq >< priority >0.5</ priority >< xhtml:link rel = \"alternate\" hreflang = \"en\" href = \"https://www.joycekettering.rocks/post_login_page/\" /></ url > < url >< loc >https://www.joycekettering.rocks/new-password/</ loc >< lastmod >2024-07-12</ lastmod >< changefreq >monthly</ changefreq >< priority >0.5</ priority >< xhtml:link rel = \"alternate\" hreflang = \"en\" href = \"https://www.joycekettering.rocks/new-password/\" /></ url > < url >< loc >https://www.joycekettering.rocks/forgot-password/</ loc >< lastmod >2024-07-12</ lastmod >< changefreq >monthly</ changefreq >< priority >0.5</ priority >< xhtml:link rel = \"alternate\" hreflang = \"en\" href = \"https://www.joycekettering.rocks/forgot-password/\" /></ url > </ urlset >\nIn the example above, taken from https://www.joycekettering.rocks/sitemap.xml , you can see the sitemap includes 4 pages:\n/onboarding /post_login_page /forgot-password /new-password\nThe app actually contains more pages but these pages are either:\nprivate pages, or dynamic pages.\nAs a result, there are not included in the auto-generated sitemap.\nThis is because WeWeb assumes that you want to keep private pages private from search engines and, when you publish dynamic collection pages, the information regarding those pages are in your backend, not WeWeb.",
                "code_snippets": [
                    {
                        "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n<url><loc>https://www.joycekettering.rocks/onboarding/</loc><lastmod>2024-07-12</lastmod><changefreq>monthly</changefreq><priority>0.5</priority><xhtml:link rel=\"alternate\" hreflang=\"en\" href=\"https://www.joycekettering.rocks/onboarding/\" /></url>\n<url><loc>https://www.joycekettering.rocks/post_login_page/</loc><lastmod>2024-07-12</lastmod><changefreq>monthly</changefreq><priority>0.5</priority><xhtml:link rel=\"alternate\" hreflang=\"en\" href=\"https://www.joycekettering.rocks/post_login_page/\" /></url>\n<url><loc>https://www.joycekettering.rocks/new-password/</loc><lastmod>2024-07-12</lastmod><changefreq>monthly</changefreq><priority>0.5</priority><xhtml:link rel=\"alternate\" hreflang=\"en\" href=\"https://www.joycekettering.rocks/new-password/\" /></url>\n<url><loc>https://www.joycekettering.rocks/forgot-password/</loc><lastmod>2024-07-12</lastmod><changefreq>monthly</changefreq><priority>0.5</priority><xhtml:link rel=\"alternate\" hreflang=\"en\" href=\"https://www.joycekettering.rocks/forgot-password/\" /></url>\n</urlset>",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/sitemap.html#custom-sitemap": {
                "title": "Custom sitemap ​",
                "content": "If the default WeWeb sitemap does not fulfill all your requirements, you can upload your own custom sitemap.\nGo to More > Files , and upload your custom sitemap:\nName the file as you with but make sure:\nit has an .xml extention its path is set to /sitemap.xml\nThis will ensure that when you publish your WeWeb app, the auto-generated sitemap is overwritten by the custom sitemap you uploaded.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/pages/multi-page-sections.html",
        "page_title": "Multi-page sections | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/pages/multi-page-sections.html#weweb-apps-are-spas": {
                "title": "WeWeb apps are SPAs ​",
                "content": "When you publish a WeWeb app, you publish a standard Vue.js Single-Page Application.\nSingle-Page Applications are great to build smooth user experiences where users can navigate seemlessly between different views in the app.\nTIP Compared to Multi-Page Applications, SPAs achieve increased speed and responsiveness because, instead of loading all the content of a page on page load, it only loads new content.\nFor example, when a user navigates from page A to page B, the navigation menu that was loaded when the user arrived on page A is not loaded a second time when they arrive on page B.\nTo leverage that feature of Single-Page Applications in WeWeb, you would need to create a new instance of a multi-page section.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Compared to Multi-Page Applications, SPAs achieve increased speed and responsiveness because, instead of loading all the content of a page on page load, it only loads new content."
                ]
            },
            "https://docs.weweb.io/pages/multi-page-sections.html#multi-page-sections-1": {
                "title": "Multi-page sections ​",
                "content": "In WeWeb, you can add multi-page sections by going to the Add > Multi-page sections menu:\nOnce you're on the Multi-page sections menu, you can drag a section that exists on one page, and drop it on the current page.\nWhen you do this, you will be invited to choose between creating an instance or creating a copy of that section:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/multi-page-sections.html#benefits-of-instances": {
                "title": "Benefits of instances ​",
                "content": "When you create a new instance of a section, the changes you make on one instance of the section will be reflected in all the other instances of that section.\nCreate a new instance if you want the section to remain the same on all pages no matter what changes you make.\nWhen you publish your app, the section will be loaded once. Other instances of the section will not be reloaded.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/multi-page-sections.html#benefits-of-copies": {
                "title": "Benefits of copies ​",
                "content": "When you create a new copy of a section, the changes you make in the original will not be reflected in the copy, and vice versa.\nCreate a new copy if you want to take inspiration from an existing section but want the new section to be independent of the other.\nWhen you publish your app, both sections will be loaded.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/pages/multi-page-sections.html#instance-vs-copy-example": {
                "title": "Instance vs copy example ​",
                "content": "In the example below, you can see that we chose to:\ncreate a new instance of the sidebar menu because we don't want to have to reload this menu when the user navigates to a new page, create new copies of the header and content sections because these sections will be different on each page and should be loaded when the user navigates to the new page",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/websockets/xano-realtime/intro-to-xano-realtime.html",
        "page_title": "Intro to Xano realtime | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/websockets/xano-realtime/intro-to-xano-realtime.html#what-is-realtime": {
                "title": "What is realtime? ​",
                "content": "Realtime is a feature that allows your app to show live updates instantly, without making incessant API calls.\nFor example, in a chat window with lots of messages, it wouldn't be efficient to keep checking for new updates through traditional API requests every few seconds.\nXano Realtime is powered by Websockets, which is a technology that keeps a constant connection open, so updates flow continuously between the client (i.e. the user’s browser) and server (in this case Xano) without delays.\n✅ Some common use cases for Realtime: chat applications, collaborative tools, and live notification systems.\n❌ When not to use Realtime: low interaction applications, high data volume, and complex transactional systems.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/intro-to-xano-realtime.html#pre-requisites": {
                "title": "Pre-requisites ​",
                "content": "To start using Xano realtime in a WeWeb project, there are a few pre-requisites:\nEnable realtime in your Xano instance. Configure the Xano data source plugin in WeWeb. Create a realtime channel in Xano.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/intro-to-xano-realtime.html#enable-realtime-in-xano": {
                "title": "Enable realtime in Xano ​",
                "content": "Go to your Xano instance. Access your workspace Dashboard . Click on the three dots in the upper right corner. Select Realtime Settings . Enable Realtime status .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/intro-to-xano-realtime.html#enable-realtime-in-weweb": {
                "title": "Enable realtime in WeWeb ​",
                "content": "Assuming you have already added the Xano data source plugin to your WeWeb project and enabled realtime in your Xano instance, you will be able to connect the realtime server of your Xano instance to your WeWeb project.\nTo connect your WeWeb project to Xano's realtime server, you will need to add its connection hash to the Xano data source plugin configuration.\nCopy the realtime Connection Hash from Xano's Realtime Settings menu, and paste it in WeWeb, in the configuration of your Xano data source plugin:\nAnd voilà! Your WeWeb frontend and Xano realtime server are now connected 😀\nNow we can create realtime channels in Xano that our WeWeb frontend can interact with.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/intro-to-xano-realtime.html#configure-channels-in-xano": {
                "title": "Configure channels in Xano ​",
                "content": "You can think of a channel as a dedicated room where specific real-time interactions or conversations happen.\nLet’s go back to the Xano's Realtime Settings to create a public channel. We'll name it room1 :",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/intro-to-xano-realtime.html#nested-channels": {
                "title": "Nested channels ​",
                "content": "Note that, in the Channel target settings, you can enable nested channels:\nIf you enable nested channels, a /* path will automatically be added to your main channel name after you save it:\nThis allows you to dynamically create and organize sub-channels under the main channel.\nFor example, in a chat app, you could have chat/* , allowing for chat/sports , chat/tech , etc.\nLearn more about leveraging nested channels in Xano .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/intro-to-xano-realtime.html#permissions": {
                "title": "Permissions ​",
                "content": "Each channel needs to have permissions defined to ensure that they remain secure and behave in the way that you expect.\nFor the purposes of this tutorial, we’ll keep it simple and open with the following permissions:\nAnonymous Clients : Allow unauthenticated users to connect Presence : Show active users in the channel (useful for checking online users) Client Public Messaging : Let all users send and receive messages\nTIP To build secure apps, we highly recommend that you learn more about Xano's realtime channel permissions. To do so, please refer to Xano's user documentation on the topic. The section with common use case permissions examples is particularly helpul to get started.\nWhen you're ready, click on Save to create the channel.\nOur channel is now live and running. Awesome! But how can we use WeWeb to interact with it?\nWe'll leverage WeWeb workflows.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP To build secure apps, we highly recommend that you learn more about Xano's realtime channel permissions. To do so, please refer to Xano's user documentation on the topic. The section with common use case permissions examples is particularly helpul to get started."
                ]
            },
            "https://docs.weweb.io/websockets/xano-realtime/intro-to-xano-realtime.html#leverage-weweb-workflows": {
                "title": "Leverage WeWeb workflows ​",
                "content": "To work with Xano realtime in WeWeb, you can leverage:\n5 workflow actions to trigger a realtime event. 8 workflow triggers to listen for realtime events.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/intro-to-xano-realtime.html#xano-realtime-actions": {
                "title": "Xano realtime actions ​",
                "content": "WeWeb’s Xano Realtime integration comes with 5 workflow actions to help us:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/intro-to-xano-realtime.html#event-triggers": {
                "title": "Event triggers ​",
                "content": "In order to update your UI based on activity in the channel, such as user joins, leaves, connection status changes and new messages, you need to listen for realtime events.\nYou can do this by listening for events at page or app level in WeWeb.\nWeWeb’s Xano Realtime integration comes with 8 workflow triggers to help listen to various realtime events:\nWhen one of these workflows \"hears\" an event, you can access the event's payload from the workflow to get the relevant data:\nIn the example above, you can see the Event object received from Xano when use the On realtime - history trigger to listen to such events.\nHere is a list of realtime event types:\nconnection status : Tells you the status of the connection when you connect to a channel or when you get disconnected involuntarily error : Indicates an issue with the connection or interaction. event : Handles dynamic Realtime data. message : Notifies you of new messages. presence full : Provides a one-time list of all users connected to the channel when you join. It will not return the full list again if other users join. You will need to use the Get presence action to retrieve the latest list of active users. presence update : Alerts you when users join or leave. history : Receives history if it was requested using the Request history action",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/intro-to-xano-realtime.html#support-chat-example": {
                "title": "Support chat example ​",
                "content": "Support chat example Taking the example of a support chat, here's how you could leverage these actions and triggers. At app level, setup a workflow that triggers On realtime - message . When a user clicks on the support icon of your website trigger a workflow with: The Open channel action so they join the chat channel. The Get presence action so they can see that several support team members are online. The Request history action so they can see their chat history in the chat modal. When a user clicks on the \"Send\" button of the chat: trigger the Send message action. The support team members who are in the channel will receive the message instantly.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "Support chat example Taking the example of a support chat, here's how you could leverage these actions and triggers. At app level, setup a workflow that triggers On realtime - message . When a user clicks on the support icon of your website trigger a workflow with: The Open channel action so they join the chat channel. The Get presence action so they can see that several support team members are online. The Request history action so they can see their chat history in the chat modal. When a user clicks on the \"Send\" button of the chat: trigger the Send message action. The support team members who are in the channel will receive the message instantly."
                ]
            },
            "https://docs.weweb.io/websockets/xano-realtime/intro-to-xano-realtime.html#next-steps": {
                "title": "Next steps ​",
                "content": "That's the theory.\nLearn more about how this works:\nOpen and close a channel Send and receive messages Send and receive presence information Send and receive history information",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/auth-systems/token-based-auth.html",
        "page_title": "Token-based authentication | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/auth-systems/token-based-auth.html#add-plugin": {
                "title": "Add plugin ​",
                "content": "To connect your WeWeb app to a token-based authentication system, go to Plugins > Authentication > Token Based Auth :",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/token-based-auth.html#configure-plugin": {
                "title": "Configure plugin ​",
                "content": "When you add the Plugin, you will be invited to choose the authentication type:\nAuth Bearer Token, Auth Basic Token, or Custom Header\nDepending on the authentication type you choose, you will be invited to add further information.\nFor Auth Bearer Token or Auth Basic Token authentication, you will be invited to provide a user endpoint (required) and refresh token endpoint (optional):\nFor Custom Header authentication, you will also be invited to fill out the custom header name:\nTIP If you're unsure how to complete this step, please contact the provider of the authentication system you are attempting to set up.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP If you're unsure how to complete this step, please contact the provider of the authentication system you are attempting to set up."
                ]
            },
            "https://docs.weweb.io/plugins/auth-systems/token-based-auth.html#define-dedirection": {
                "title": "Define dedirection ​",
                "content": "Choose a public page where you want to redirect users when they are not signed in:\nWARNING Choose a public page. If you redirect users to a private page when they are not logged in, you will create an infinite loop in your app and your users' browser will crash.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/token-based-auth.html#user-roles-user-groups": {
                "title": "User roles & user groups ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/token-based-auth.html#in-your-backend": {
                "title": "In your backend ​",
                "content": "In order to gate content in WeWeb based on user roles and permissions, you first need to have information about roles in your backend and that information needs to be accessible to WeWeb via API.\nFor example, you could create a role column in your user table and make it available in the me endpoint so that, when a user logs in to your app, you fetch their role at the same time.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/token-based-auth.html#in-the-weweb-plugin": {
                "title": "In the WeWeb plugin ​",
                "content": "Assuming you have roles defined in your backend, you'll have to tell the Token Based Auth plugin where to find the user role in the backend:\nWARNING The Role key is case sensitive. If the column name in your backend is Roles , you should type this in exactly: roles won't work. The Role type must match the data type where you store user role(s) in your backend. In the example above, it's a single Text in a column named role but other common use cases could be a List of texts named roles or a List of objects named users .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/token-based-auth.html#in-the-weweb-auth-tab": {
                "title": "In the WeWeb Auth tab ​",
                "content": "Once you've told the plugin where it can find the user roles in your backend, you'll need to create the user roles and user groups in WeWeb:\ngo to the Auth tab, add the user roles you have in your backend, and add user groups and decide what role(s) a user needs to be part of a group.\nWARNING The Role name should be exactly the same as in your backend (casing included) because that's how the WeWeb plugin will be able to identify the users that have that role. In addition, when you add several roles to a user group, a user needs to have BOTH these roles to be part of the user group. It's an AND statement, not OR . In the example below, the members of the Premium customer user group must have both the Customer and the Premium roles associated with their user profile:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/private-page3.Bq7upkPc.png"
                ],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/token-based-auth.html#private-pages": {
                "title": "Private pages ​",
                "content": "When you setup the Token Based Auth plugin, an Authenticated users user group will be created by default even if you don't define additional user groups.\nYou can use this user group to restrict access to a page:\nIf you have user roles in your backend, you can add user groups in WeWeb that refer to those user roles and restrict access to pages further:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/token-based-auth.html#signup-and-login-workflows": {
                "title": "Signup and login workflows ​",
                "content": "When you add the Token Based Auth Plugin to a WeWeb project, new elements will appear in the Add menu under the Plugins section:\nsignup forms, login forms, and user profile forms.\nYou can add an authentication form by drag-and-dropping it on the Canvas.\nYou will find a no-code workflow on the Form Container which you can configure to suit your needs.\nIn step 1, we make an API request to POST the user's email and password to our auth provider. The URL endpoint and requested information will depend on your auth provider:\nIn step 2, we store the user token from the result of the previous action:\nIn step 3, we fetch the user before redirecting the user to another page in step 4.\nIn the example above, we are using a Custom Header authentication type but the logic remains the same for signup, login, custom header, auth bearer, and auth basic.\nBased on the information provided by the user in the Form, i.e. the Component Variables in the Form Container, you:\nmake an API call to your auth provider with the API request action, store the user token with the Store token action, fetch the user with the Fetch user action, based on the token stored in action 2, and redirect the user to the appropriate page with the Change page action.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/settings-billing-code-export/hosting-and-code-export.html",
        "page_title": "Hosting & Code Export | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/settings-billing-code-export/hosting-and-code-export.html#export-a-project": {
                "title": "Export a project ​",
                "content": "Once the export project feature has been added to your workspace, go to any published project's Settings > Deployments tab.\nClick on the version of the app for which you'd like to export the code:\nWhat if the download button is disabled? Publish your project at least once to make it clickable.\nOnce downloaded, you'll find a zip file containing all your project's files (HTML, CSS and JS) ready to host anywhere you want.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "What if the download button is disabled? Publish your project at least once to make it clickable."
                ]
            },
            "https://docs.weweb.io/settings-billing-code-export/hosting-and-code-export.html#code-export-example": {
                "title": "Code export example ​",
                "content": "You can download an example project here with both raw and built files.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/hosting-and-code-export.html#self-host-a-project": {
                "title": "Self-host a project ​",
                "content": "You can self-host WeWeb projects anywhere you like!\nSimply download the static files of your app as described above (i.e. the HTML, CSS and JS files of your WeWeb frontend), fire up a server and host the static files of your frontend there.\nAs an example, we've documented how you might self-host a WeWeb project on Cloudflare .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/hosting-and-code-export.html#frequently-asked-questions": {
                "title": "Frequently Asked Questions ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/build-guides/job-board-with-xano.html",
        "page_title": "Build a Job Board with WeWeb and Xano | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#_1-setup-new-projects-in-xano-and-weweb": {
                "title": "1- Setup new projects in Xano and WeWeb ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#in-xano": {
                "title": "In Xano ​",
                "content": "Create a free XANO account and choose the “Careers” template in the Marketplace:\nYou’ll notice 3 tables and 16 API endpoints are created automatically:\njob application category\nThis is where you’ll find your list of jobs, applications, and job categories respectively.\nThe 16 API endpoints are how you’ll be able to fetch data from your Xano tables to display it in WeWeb.\nIf you’re not familiar with APIs, you might want to pause and learn more here .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#in-weweb": {
                "title": "In WeWeb ​",
                "content": "In WeWeb, create a new project and choose the “Job board” template.\nYou’ll notice a page where you can add your list of jobs and a page where you can display the details of a job offer:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#_2-display-a-list-of-jobs-in-weweb": {
                "title": "2- Display a list of jobs in WeWeb ​",
                "content": "In order to display data in WeWeb, we'll need to:\nAdd the Xano data source plugin Get data from a Xano endpoint Bind that data to an element on the page",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#step-1-add-xano-data-source": {
                "title": "Step 1: Add Xano data source ​",
                "content": "Go to Plugins > Data sources > Xano :\nYou will be invited to add your Xano API and choose the instance you want to work with.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#step-2-get-the-data-from-xano": {
                "title": "Step 2: Get the data from Xano ​",
                "content": "Go to Data > Collections > Add collection to create a Jobs collection that will call the API endpoint in Xano that returns the 6 items we have in the job table:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#step-3-bind-the-collection-list-and-collection-list-item-on-the-page": {
                "title": "Step 3: Bind the collection list and collection list item on the page ​",
                "content": "On the “Jobs” page, bind the “Collection List” of jobs to the items in the Jobs collection:\nYou will notice that, once you bind your collection, even if you only have one Job container in the navigator, you’ll have as many repeated items on the page as there are items in your Xano database.\nTIP In WeWeb, you can bind a list to any type of container (e.g. columns, flexbox, table) but it is important to realize that the repeated items of that list will be the first child of the bound container. If you want the repeated item to be a card, you can add a container with text, image, and other elements inside.\nInside the “Job container”, i.e. the first child element of the container where you bound the collection, you can then bind the information from a repeated item.\nIn the example below, we bound the job title and type of contract:",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP In WeWeb, you can bind a list to any type of container (e.g. columns, flexbox, table) but it is important to realize that the repeated items of that list will be the first child of the bound container. If you want the repeated item to be a card, you can add a container with text, image, and other elements inside."
                ]
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#_3-search-sort-filter-a-list-of-jobs-in-weweb": {
                "title": "3- Search, sort & filter a list of jobs in WeWeb ​",
                "content": "When you have a list of items on a page, it is common to let users filter that list by searching for a term or selecting an option for example.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#searching-through-a-list-in-weweb": {
                "title": "Searching through a list in WeWeb ​",
                "content": "There is a search bar element by default on the “Jobs” page of the “Job board” template in WeWeb.\nHowever, if you ever needed to add a search, know that you can find them in the Add menu of the Editor:\nWhenever a search bar element is dragged and dropped onto the page, a new component variable is created in your project.\nBy default, it is named “Search bar - value” but you can change the name in the element’s settings. You can also change the placeholder of the element in its settings:\nIn preview mode, you can type in search terms in the search bar to see the “Search bar - value” variable change in your navigator:\nOnce you’ve set up the search bar element on the page, you’ll need to add a filter to your list of jobs.\nYou could do this several ways.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#backend-filter": {
                "title": "Backend filter ​",
                "content": "If you were working with a large collection of items, say more than 10Mb, the best practice would be to add a search filter to your backend so that the REST API collection in WeWeb only fetched data that matches the search criteria.\nThis takes a little bit more time, usually a couple of seconds, but has two main benefits:\nYou can choose what data you load in your user’s browser (hint: nothing sensitive!) You don’t load as much data in your user’s browser and therefore don’t risk crashing it.\nTIP Filter on the backend when there’s a high volume of data and/or the data is sensitive (health information for example) Filter on the frontend when there’s not that much data and you want your browser to react fast to user interactions. For example, when you need to re-arrange the data that has already been uploaded to the browser.\nFor the purposes of this tutorial, since WeWeb is a frontend builder, we’ll explain how to add a search filter to your frontend but please bear in mind that, if you’re working with large collections, you should spend a little more time learning how to add a search filter in your backend .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Filter on the backend when there’s a high volume of data and/or the data is sensitive (health information for example) Filter on the frontend when there’s not that much data and you want your browser to react fast to user interactions. For example, when you need to re-arrange the data that has already been uploaded to the browser."
                ]
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#frontend-filter": {
                "title": "Frontend filter ​",
                "content": "To search in the frontend in WeWeb:\nAdd a filter to your Collection List, Where the field you want to search “Contains” the “Search bar - value” component variable, and Apply this filter if… the “Search bar - value” component variable is not empty.\nIn the example below, we are filtering the jobs list based on whether the search term is in the title or summary of the job description:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#filtering-a-list-with-a-select-element": {
                "title": "Filtering a list with a select element ​",
                "content": "Now let’s say you also want to filter the job list by job category.\nFirst, you’ll want to create a new collection for job categories in WeWeb, using the API endpoint to query all categories from Xano.\nNot sure how to do that? Might want to revisit how we created the Jobs collection above 😉\nOnce you have your Categories collection setup in WeWeb, you’ll want to drag and drop the “Select” element on the page:\nAs with the search bar element, this will automatically create a component variable in the navigator:\nIn the screenshot below, you can see that:\nOn the select element We bound the “Categories” collection Used the rollup formula to get only the values from the category field\nNow, to filter your list of jobs based on the job category selected, all you need to do is add a filter to your existing Collection List where the category field of the job contains the Input select - value variable:\nWhen the user lands on the page, before they select anything, we don’t want the filter to apply, so we can add a condition to the condition group, i.e. Apply if… the Input select - value variable is empty.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#_4-redirect-a-user-to-a-job-description-page-in-weweb": {
                "title": "4- Redirect a user to a job description page in WeWeb ​",
                "content": "Ok great. We have a page with a list of job offers.\nNow we want to let users access individual job pages.\nThere are several ways we could do this in terms of user interface.\nLet’s do it in the most obvious way by creating a button that users can click on to learn more about a specific job.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#step-1-–-add-a-button": {
                "title": "Step 1 – Add a button ​",
                "content": "In the Add menu, search for the Button element, and drag and drop it in your repeated item container.\nIn the example below, we got rid of the information we didn't need to keep a cleaner design:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#step-2-–-add-a-parameter-to-the-job-template-page": {
                "title": "Step 2 – Add a parameter to the Job template page ​",
                "content": "To change the Job template page into a dynamic page, we will add a parameter to the URL with the id of the job:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#step-3-–-create-a-collection-to-get-the-job-selected": {
                "title": "Step 3 – Create a collection to get the job selected ​",
                "content": "In the Data menu, call the Xano endpoint that gets the job based on the id of the current page:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#step-4-–-create-a-workflow-on-the-button": {
                "title": "Step 4 – Create a workflow on the button ​",
                "content": "Back on the Jobs page, link the button to the Job template page and pass the current item's id as a parameter:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#step-5-–-create-a-workflow-on-page-load": {
                "title": "Step 5 – Create a workflow on page load ​",
                "content": "Now, when a user navigates to the Jobs template page, you'll want to fetch the Job collection:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#step-6-–-display-the-job-data-on-the-template-page": {
                "title": "Step 6 – Display the job data on the template page ​",
                "content": "Once you’re on the template page, you can bind fields as you would on any other page, finding the data you need in the Job collection:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#_5-–-allow-users-to-upload-their-resume-and-apply-to-a-job-through-your-weweb-application": {
                "title": "5 – Allow users to upload their resume and apply to a job through your WeWeb application ​",
                "content": "Our web application wouldn’t be complete without the option for users to create, update, or delete a record.\nFor our use case, we want to let users upload their resume and apply to a job by submitting a form on our WeWeb app.\nBy default, on the “Job template” page of the “Job board” template, there is a Contact form container with 4 component variables:\nUser name User email User location User bio\nYou can see these component variables when you open the Variables sub-menu of the Navigator panel:\nTo allow users to upload a resume, we’ll drag and drop a “File upload” element inside our form container:\nYou’ll notice that, as soon as you drop the element on the page, two new component variables are created by default:\n“File 1 - progress”, and “File 1 - value”\nBoth these variable names will change if you change the file upload element’s name.\nYou can test this in Preview mode by typing in data and uploading a file as if you were a user. You’ll notice the value of the component variables in the navigator are updated in real time:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#_6-–-update-your-xano-database-with-the-user-s-job-application": {
                "title": "6 – Update your Xano database with the user’s job application ​",
                "content": "By default, the “resume” field in Xano’s “application” table is a “file resource.”\nHowever, in WeWeb, when a user uploads a file, we upload it to our CDN and the value of the file is a URL, i.e. a “text” field.\nBefore we show you how to send data from WeWeb to Xano, you therefore need to change the type of the “resume” field in Xano so it’s a “text” type:\nThen, to update your Xano database with the user’s job application, follow these steps:\nCreate a workflow on the form container Name: “Submit application”, or anything you find more descriptive Trigger: On Submit, i.e. when the user submits the form\nTIP It is important to create the workflow on the form container to validate the input fields. If you add the workflow on the button of the form, you will not be able to validate inputs.\nAction 1:\nUpload file Select upload element from this page: select the component variable you setup Test Action 1 before moving on to Action 2\nThis is very important because you will need the result of Action 1 to set up Action 2, where you will send data to Xano using the POST /application endpoint:\nFields: for each column in the Xano application table, bind the corresponding value in WeWeb.\nWhat does this mean?\nIt means that, in Xano, you have 6 columns with data. The keys for these columns are as follows:\njob_id name resume email phone status\nIn WeWeb, you have a corresponding variable for each key except phone . In the walkthrough below, you can see we:\nselect which fields we want to update in Xano, give Xano the id of the job we are applying to in our Job collection, map the form input variables to the fields in Xano, hard code the fact that every application should have the status \"To be reviewed\" get the link from the file we uploaded in the previous action\nOnce that’s done, you can test Action 2, refresh the application table in Xano and jump with joy when the test application comes through 😀",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP It is important to create the workflow on the form container to validate the input fields. If you add the workflow on the button of the form, you will not be able to validate inputs."
                ]
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#_7-–-add-xano-authentication": {
                "title": "7 – Add Xano authentication ​",
                "content": "Let’s say you want to force users to authenticate themselves before they can apply to a job.\nIn order to do that, you’ll need to:\nAdd a user table to your Xano database Add authentication endpoints to Xano Set up Xano authentication plugin in WeWeb Prevent users who are not authenticated from applying to a job (create login page and gate content)",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#step-1-setup-a-user-table-in-your-xano-database": {
                "title": "Step 1 - Setup a User Table in Your Xano Database ​",
                "content": "By default, there is no user table in Xano’s “Careers” template but you can easily add one.\nGot to Database > Add Table in the top right corner.\nYour user table should include at least two fields:\none field where you store the login. For example, an email field type, and one field of type password where you store the encrypted password.\nWARNING It’s important that you choose the field type password when creating your user table in Xano. It will ensure that: you can use Xano’s authentication API points, and that the user input is encrypted when the user first creates an account with your web-app.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/build-guides/job-board-with-xano.html#step-2-create-authentication-api-endpoints-in-xano": {
                "title": "Step 2 - Create Authentication API Endpoints in Xano ​",
                "content": "For Xano authentication to work, you need three API endpoints:\nsignup login me\nIf you’re using Xano’s “Careers” template, you’ll need to create these three endpoints yourself by going to API > Add API Endpoint > Authentication :",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/css-and-styling/conditional-rendering.html",
        "page_title": "Conditional rendering | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/css-and-styling/conditional-rendering.html#difference-with-display-none": {
                "title": "Difference with display:none ​",
                "content": "The Conditional Rendering setting can greatly improve the performances of your web app because, when you hide an element using this advanced setting, that element will not be built on page load by default. It will only be rendered in the DOM if / when the condition to display it is met. As a result, your pages will load faster.\nBy comparison, when you use the standard display CSS property to hide an element on a page, the browser still needs to build that element on page load. If you have a lot of hidden elements on the page, it can significantly slow down your browser.\nYou may wonder why ever use the standard CSS display property anymore? Well, if you need to access input variables of an element that is hidden by the Conditional Rendering setting, you won't be able to because the element won't be in the DOM. In that use case, the standard display property will continue to be very useful.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/css-and-styling/conditional-rendering.html#using-conditional-rendering": {
                "title": "Using Conditional Rendering ​",
                "content": "The Conditional Rendering setting needs you to define a condition. When that condition is met, the element will be made available in the DOM and displayed on the page (provided you haven't used the standard CSS display property to hide it!).\nIn the example below, we are saying that, if the user types in more than 225 characters (from index 0 to 224 in the string of characters that is user_description text), we will display a message warning them they are close to reaching the 280 character limit:\nLike the standard CSS display property, the element will not appear on the page when the condition is not met:\nThe crucial difference with the standard CSS display property is that the element will not appear in the DOM either, the browser will only build it when the condition is met. In the WeWeb Navigator, you will see the little crossed-out eye icon that warns you an element is not displayed.\nIn the example below, you can see that, when we remove some text and fall below the 225 characters limit, the warning text element disappears completely from the DOM in the browser:\nIf we were using the display CSS property, the element would still be visible in the DOM in the browser.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/copy-to-clipboard.html",
        "page_title": "Copy to clipboard | WeWeb Documentation",
        "sections": {}
    },
    {
        "url": "https://docs.weweb.io/plugins/extensions/calendly.html",
        "page_title": "Calendly | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/extensions/calendly.html#add-plugin": {
                "title": "Add plugin ​",
                "content": "Go to Plugins > Extensions , search for the Calendly plugin and add it to your project:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/calendly.html#add-element": {
                "title": "Add element ​",
                "content": "To add a Calendly embed element on a WeWeb page, click on the Add Calendly components button at plugin level:\nOr open the Add panel and click on Calendly in the Plugins section:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/calendly.html#display-calendar": {
                "title": "Display calendar ​",
                "content": "To display a Calendly calendar:\nclick on the Calendly embed element on your page, go to the element's settings tab, and paste the URL of the Calendly calendar you wish to display.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/extensions/calendly.html#pre-fill-options": {
                "title": "Pre-fill options ​",
                "content": "When the Pre-fill options setting is On , you can provide the name and email that will be pre-filled on the details page of your Calendly booking form:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/libraries/share-libraries.html",
        "page_title": "Share libraries | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/libraries/share-libraries.html#share-a-library": {
                "title": "Share a library ​",
                "content": "To share a library with the rest of your workspace, you will need to:\nopen the project where you built the library you want to share go to Libraries and click on Share name your commit",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/share-libraries.html#add-a-shared-library": {
                "title": "Add a shared library ​",
                "content": "Go to Libraries and click on the little book icon to view Available and Marketplace libraries.\nThe Available tab lists:\nall the libraries that have already been added to the current project, including marketplace libraries. all the libraries that have been shared in your workspaces but haven't yet been added to the current project.\nThe Marketplace tab lists all the libraries from the WeWeb marketplace that can be added to the current project.\nTo start using one of these libraries in your project, simply click on Add :\nThis will move the library up to the Added section of the panel in the Available tab, like the \"Habit tracker\" library in the example above.\nWARNING Can't find the library you're looking for? Open the project with the source library you're looking for, go to Libraries and click on Share as described in the \"Share a library\" section above .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/share-libraries.html#remove-a-library": {
                "title": "Remove a library ​",
                "content": "To remove an external library that you added to a project, go to Libraries and open the shared libraries panel.\nIn the Added section, select the library you want to remove, open the three dot options menu, and click on Remove from project :",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/share-libraries.html#update-a-shared-library": {
                "title": "Update a shared library ​",
                "content": "Whether you are sharing a library with others or working with an external library others shared with you, you will want to make changes and updates at some point.\nThere are three steps to updating a shared library:\nmake the changes in the library publish those changes so they are available to other projects in the workspace update the library in the projects that use it",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/share-libraries.html#_1-make-changes-to-a-shared-library": {
                "title": "1. Make changes to a shared library ​",
                "content": "To make changes to a shared library, simply go to that projects and make all the changes you want.\nFor example, you could edit a typography, add or delete spacings, templates, or components.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/share-libraries.html#_2-publish-changes-of-a-shared-library": {
                "title": "2. Publish changes of a shared library ​",
                "content": "Once you are ready to commit those changes to make them available to other projects in the workspace, you can click on Share , fill out the form, and complete the publish :\nTIP Try to be descriptive when adding a commit message to library updates. This will help users of your library understand what's new and how a library update might affect their projects.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Try to be descriptive when adding a commit message to library updates. This will help users of your library understand what's new and how a library update might affect their projects."
                ]
            },
            "https://docs.weweb.io/libraries/share-libraries.html#_3-update-the-library-in-the-projects-that-use-it": {
                "title": "3. Update the library in the projects that use it ​",
                "content": "Once the changes to a library have been shared to the workspace, you will see a notification in the projects that use it.\nWhen you're ready, you can go to Libraries , open the shared libraries panel, and update the relevant library:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/libraries/share-libraries.html#use-library-versions": {
                "title": "Use library versions ​",
                "content": "At times, you may want to rollback or rollforward to different versions of a shared library.\nYou can do this by going to Libraries , opening the shared libraries panel, clicking on the three dot options, and Change version :",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/weweb-ai/intro-to-weweb-ai.html",
        "page_title": "WeWeb AI - Build web apps with AI | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/weweb-ai/intro-to-weweb-ai.html#design-layouts": {
                "title": "Design & layouts ​",
                "content": "WeWeb AI understands your design intentions. Describe the page or component you envision, and the AI will generate responsive layouts that adapt to all screen sizes. Want a hero section with a headline, image, and call-to-action? Or perhaps a pricing grid with tiered options? Just ask. The AI creates these designs while maintaining your brand's visual identity through consistent colors, typography, and spacing.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/intro-to-weweb-ai.html#workflows-logic": {
                "title": "Workflows & logic ​",
                "content": "Building application logic becomes a conversation. Tell WeWeb AI what you want your application to do, and it will create the necessary workflows. From simple data updates to complex multi-step processes, the AI understands logical relationships and user interactions. Need a workflow that validates form submissions, sends confirmation emails, and updates your database? The AI can set this up through natural language prompts.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/intro-to-weweb-ai.html#backend-data": {
                "title": "Backend & data ​",
                "content": "Database configuration and API integration no longer require technical expertise. WeWeb AI helps you structure your data models, set up authentication systems, and create API endpoints through simple conversation. Describe your data relationships and user permissions, and the AI will configure the appropriate backend systems. Whether you need user management, content administration, or complex data queries, the AI understands and implements these requirements.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/intro-to-weweb-ai.html#formulas-calculations": {
                "title": "Formulas & calculations ​",
                "content": "Complex calculations and data transformations become straightforward. WeWeb AI can generate formulas for various scenarios, from basic arithmetic to sophisticated data manipulation. Need to calculate user metrics, format data, or implement business logic? The AI creates these formulas while ensuring accuracy and performance.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/weweb-ai/intro-to-weweb-ai.html#custom-component-generation": {
                "title": "Custom component generation ​",
                "content": "WeWeb AI takes component creation to the next level by generating custom-coded components with the library of your choice.\nThe AI understands the unique capabilities and best practices of different libraries, creating components that leverage their specific features. This means you can get the power of custom-coded components with the ease of no-code development.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/editor/app-settings/app-settings.html",
        "page_title": "App settings | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/editor/app-settings/app-settings.html#mobile-app-pwa": {
                "title": "Mobile App (PWA) ​",
                "content": "In this tab, you can setup options so that your WeWeb app can be installed on a mobile device as a Progressive Web App .\nLearn more about building and publishing a PWA in WeWeb .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#app-workflows": {
                "title": "App workflows ​",
                "content": "Here, you can execute workflows for some specific triggers:\nOn App Load (before fetching collections) : trigger a workflow when the app is loaded by a user for the first time (i.e. at the beginning of a user session), but before collections are fetched from your backend On Page Load (before fetching collections) : trigger a workflow when a page is loaded by a user, but before collections are fetched from your backend On App Load : trigger a workflow when the app is loaded by a user for the first time (i.e. at the beginning of a user session), but after collections are fetched from your backend On Page Load : trigger a workflow when a page is loaded by a user, but after collections are fetched from your backend On App Unload : trigger a workflow when the app is unloaded by a user (i.e. at the end of a user session, when he's closing his/her browser's tab)",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#page-languages": {
                "title": "Page languages ​",
                "content": "Here, you're able to add new languages to your app, in addition to the default one that you selected when you created the app, by clicking the Add language button:\nBy using the toggle icons, you're also able to tell WeWeb which language should be your app's default one. Meaning that if a user lands on your live project and his/her browser's language doesn't match one of your app languages, the app will display in the default one.\nIn this example, if a user's browser isn't set to either English or French, the app will revert to English:\nThe last option tells WeWeb if your app's default language should be in your app's URLs paths.\nBy default, WeWeb creates URLs like this: https://{yourdomain}/{page-path}\nBut to navigate between languages, the lang code (ex: fr, en, es...) is added before the path, like so: https://{yourdomain}/{lang}/{page-path}\nBy setting this option to Yes , the lang code will also appear in the URLs for the default language:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#images": {
                "title": "Images ​",
                "content": "In the Images sub-menu, you can find all the images that were uploaded into the project which are currently used to build the app, and hosted on WeWeb's servers:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#files": {
                "title": "Files ​",
                "content": "The Files sub-menu allows you to upload various types of files to WeWeb's CDN:\nCommon examples include but are not limited to:\na custom sitemap, robots.txt file or PWA manifest, verification files for third-party providers such as Apple Pay, static files (e.g. PDFs and CSVs) to display in or download from the app.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#features-of-the-files-sub-menu": {
                "title": "Features of the Files Sub-Menu ​",
                "content": "Set File Path: Define the file's path on your published app. Copy File Link: Quickly copy the link to any uploaded file. Download Files: Retrieve any file you previously uploaded. Remove Files: Delete any file from the WeWeb CDN.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#set-file-paths": {
                "title": "Set file paths ​",
                "content": "When you set a path for a file, it becomes accessible at that location within your published project.\nFor example, if your WeWeb app is connected to mydomain.com and you upload best-sitemap-in-town.xml , setting its path to /sitemap.xml will make it available at mydomain.com/sitemap.xml . This action will override the default sitemap generated by WeWeb.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#removing-files": {
                "title": "Removing Files ​",
                "content": "To remove a file from the published app's path, simply delete the set path and republish your app. Note that the file will still be available via its direct CDN link and should be manually removed from the CDN if no longer needed.\nUser files vs app files While it is possible to store user files to WeWeb's CDN, it's best practice to store user-related data in a backend system. This approach offers greater flexibility for scaling storage solutions and ensures files can be secured with appropriate user access controls.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "User files vs app files While it is possible to store user files to WeWeb's CDN, it's best practice to store user-related data in a backend system. This approach offers greater flexibility for scaling storage solutions and ensures files can be secured with appropriate user access controls."
                ]
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#fonts": {
                "title": "Fonts ​",
                "content": "In the Fonts sub-menu, you can:\nfind all the fonts currently used in your app, see or choose the default font of your app, and add new fonts to your project.\nTIP When you change the default font of your app, it will be reflected on all the text elements where the Font family is Default .",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/font-family.zhGORPaN.png"
                ],
                "tips": [
                    "TIP When you change the default font of your app, it will be reflected on all the text elements where the Font family is Default ."
                ]
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#icons": {
                "title": "Icons ​",
                "content": "In the Icons sub-menu, you can find the icon sets that are active in your app. By default, you've got access to WeWeb regular icons, Fontawesome and Heroicons icon sets.\nTIP Currently, importing a new icon set in a WeWeb project is a bit cumbersome but possible.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Currently, importing a new icon set in a WeWeb project is a bit cumbersome but possible."
                ]
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#custom-code": {
                "title": "Custom code ​",
                "content": "Here you can add some custom code (HTML, CSS or JavaScript) that will be added to all your project's pages.\nIt's were you typically want to add a global CSS style or scripts from external tools like Google Analytics, Intercom chatbox, or Axeptio, to name a few.\nYou have the availability to add the scripts in the head or the body of the page:\nTIP Add the scripts in the header if you need them to be loaded before the rest of the page by the end user's browser. But add them in the body if they're not critical and to get better pagespeed, hence, better SEO performances.\nWARNING This is an advanced behavior. You can break your app if you don't know what you're doing or adding unknown scripts.\nWARNING When you add custom CSS to a page or project, you should not add any <head> or <body> tags. WeWeb handles those tags for you.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Add the scripts in the header if you need them to be loaded before the rest of the page by the end user's browser. But add them in the body if they're not critical and to get better pagespeed, hence, better SEO performances."
                ]
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#redirections": {
                "title": "Redirections ​",
                "content": "Redirections are used when you want a path on your domain to redirect to another URL (be it on your domain or any other external URL).\nIt's especially useful for SEO, when you're switching from a former app/site to a WeWeb app.\nLet's say that you used to have a page's URL at https://{yourdomain}/hello-world that you want to redirect to your WeWeb project's home page.\nIt would look something like this:\nThe Source is the path you want to redirect (not the full URL but the path after the domain name).\nThe Target status is the HTTP status code you want to trigger on redirect ( you can refer to MDN docs for this ).\nThe Target type is the Page to redirect to a page in your current app or External URL to redirect to any URL on the web.\nThe Target page or Target URL is the page in your WeWeb project or external URL you want to redirect to.\nTIP 90% of the time, when you want to do an SEO redirect, use a 301 redirect to forward Google's page rank and link juice to the new URL.\nOnce you added redirections in a project, they will be displayed in the Redirections tab:",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP 90% of the time, when you want to do an SEO redirect, use a 301 redirect to forward Google's page rank and link juice to the new URL."
                ]
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#headers": {
                "title": "Headers ​",
                "content": "In this section, you can:\nControl if & how your WeWeb app can be embedded in an iframe. Add custom headers to your published project.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#iframe-embedding": {
                "title": "Iframe embedding ​",
                "content": "By default, once published, your WeWeb app can be embedded in an iframe.\nHere, you can:\ndecide if you want to allow iframe embedding for your WeWeb app, allow it only on the same domaine, or block it.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#custom-headers": {
                "title": "Custom headers ​",
                "content": "Here, you can add custom headers to your WeWeb app. In the example above, we started configuring a Content Security Policy.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#base-tag": {
                "title": "Base tag ​",
                "content": "WARNING Changing the base tag is an advanced feature that should be used if you 100% know what you're doing. You can totally break your app by changing it.\nChanging the base tag is useful when you're hosting your WeWeb app yourself, on a specific subpath.\nTo learn more about base tags, please refer to MDN docs .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#project-plans": {
                "title": "Project plans ​",
                "content": "This is will open the Project plans tab where you can choose a different project plan:\nTIP To switch to a different workspace plan, you'll need to go to the Members tab in your workspace dashboard:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/workspace-plans.Cmd3pAbq.png"
                ],
                "tips": [
                    "TIP To switch to a different workspace plan, you'll need to go to the Members tab in your workspace dashboard:"
                ]
            },
            "https://docs.weweb.io/editor/app-settings/app-settings.html#development": {
                "title": "Development ​",
                "content": "This will open the Development panel where you can:\nopen the WeWeb dev editor, view the custom elements, components, and plugins you added to the project, and learn more about developing custom components in WeWeb.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/start-here/welcome.html",
        "page_title": "Welcome | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/start-here/welcome.html#new-to-weweb": {
                "title": "New to WeWeb? ​",
                "content": "🤷 I'm a complete beginner and want to learn about WeWeb and decoupled web-app development . 🔌 I'm comfortable with the design side of things . Teach me how to connect a backend . ⚡ I know what I'm doing . Teach me how to add business logic to my WeWeb app. 🧰 I want to be inspired. Show me how to build things from A to Z.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/start-here/welcome.html#are-you-a-developer": {
                "title": "Are you a Developer? ​",
                "content": "We have a dedicated developer documentation for you 🙂",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/branching.html",
        "page_title": "Branching in workflows | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/branching.html#true-false-split": {
                "title": "True/False split ​",
                "content": "Splits the workflow into two paths based on a condition:\nIf condition is true, executes the \"True\" branch If condition is false, executes the \"False\" branch",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/branching.html#multi-option-split": {
                "title": "Multi-option split ​",
                "content": "The Multi-option split action lets you create multiple conditional paths in your workflow. Each path can handle different scenarios with their own set of actions.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/branching.html#configuration": {
                "title": "Configuration ​",
                "content": "Default branch : optional fallback if no conditions match Branches : add multiple conditions and their corresponding actions",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/workflows/branching.html#example-error-handling": {
                "title": "Example: error handling ​",
                "content": "Here's how you can use it to handle different error types by changing a variable based on the condition:\nplaintext ├── When: invalid email │     └── Then: Set specific error message ├── When: duplicate entry │     └── Then: Set duplicate error message └── Default Case: └── Set generic error message\nTIP Multi-option split is incredibly flexible - you can add as many branches as your logic requires. Use the zoom controls located at the bottom of the editor to manage visibility when building complex workflows with multiple branches. This makes it perfect for creating sophisticated decision trees and handling multiple scenarios in your application.",
                "code_snippets": [
                    {
                        "code": "├── When: invalid email\n│     └── Then: Set specific error message\n├── When: duplicate entry\n│     └── Then: Set duplicate error message\n└── Default Case:\n      └── Set generic error message",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": [
                    "TIP Multi-option split is incredibly flexible - you can add as many branches as your logic requires. Use the zoom controls located at the bottom of the editor to manage visibility when building complex workflows with multiple branches. This makes it perfect for creating sophisticated decision trees and handling multiple scenarios in your application."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/data-sources/smartsuite.html",
        "page_title": "SmartSuite | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/data-sources/smartsuite.html#connect-a-smartsuite-account": {
                "title": "Connect a SmartSuite account ​",
                "content": "In order to get data from SmartSuite, you first need to add SmartSuite as a data source in WeWeb:\nTo find your SmartSuite API key and Workspace ID, follow the in-app \"How to find it\" instructions:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/smartsuite.html#add-a-smartsuite-collection": {
                "title": "Add a SmartSuite collection ​",
                "content": "Once you’ve connected a SmartSuite account to WeWeb, you will be able to create SmartSuite data collections in WeWeb:\nAt this stage, you have fetched the data from SmartSuite. It is available for use in WeWeb.\nYou can add frontend filters and pagination and display the data in your WeWeb project.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/smartsuite.html#update-and-delete-smartsuite-data": {
                "title": "Update and Delete SmartSuite data ​",
                "content": "You can update, and even delete, data in SmartSuite from WeWeb. To do this, you'll need to use the SmartSuite actions in your workflows.\nFor example, let's say that you bound a SmartSuite collection to a Datagrid in WeWeb. Then, you could set up the on row update and on row delete workflows this way:\nFor the delete a record action, you just need to pass the ID of the record to delete.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/smartsuite.html#how-to-update-single-and-multi-select-fields-in-smartsuite": {
                "title": "How to Update Single and Multi-select Fields in SmartSuite? ​",
                "content": "SmartSuite has a specific format for single and multi-select fields. To help you update these fields, we've created a custom action that you can use in your workflows.\nThis action, named get field choices will return all the current available values for such a field. Then, when updating the record, you can pass the ID of the value you want to set using a lookup formula.\nHere's a video on how to use it:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/intro-to-plugins.html",
        "page_title": "Intro to plugins | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/intro-to-plugins.html#how-to-add-a-plugin": {
                "title": "How to add a Plugin ​",
                "content": "To add a plugin, go to Plugins , select a plugin category and the plugin you want to add, then click on the Add button:\nNotice that, when the Plugins panel is open, you will find:\nthe list of installed plugins (which you can click on to configure or remove), the list of all available plugins by category, and when applicable, a help text to learn more about the plugin currently selected",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/intro-to-plugins.html#available-plugins": {
                "title": "Available Plugins ​",
                "content": "Here is a list of all the available plugins inside WeWeb.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/intro-to-plugins.html#data-sources": {
                "title": "Data sources ​",
                "content": "The data sources are the plugins that you can use to connect to third party services, and to fetch data from them. You can find them under the Data sources tab.\nCurrently available data source plugins include:\nSupabase : to connect to a Supabase database. Documentation is available here . REST API : to connect to any REST API . Documentation is available here . Xano : to connect to a Xano database. Documentation is available here . Airtable : to connect to an Airtable base. Documentation is available here . Google Sheets : to connect to a Google Spreadsheet . SQL : to connect to a SQL database . Documentation is available here JavaScript : to connect to APIs using JavaScript and the Axios library. GraphQL : to connect to a GraphQL API . SOAP : to connect to a SOAP API . RSS Feed : to connect to an RSS Feed . Algolia : to connect to an Algolia index. Documentation is available here . Strapi : to connect to a Strapi content management system. Ghost : to connect to a Ghost content management system.\nTIP You can connect multiple data sources to the same WeWeb project",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP You can connect multiple data sources to the same WeWeb project"
                ]
            },
            "https://docs.weweb.io/plugins/intro-to-plugins.html#authentication": {
                "title": "Authentication ​",
                "content": "The authentication plugins are the plugins that you can use to connect to third party services, and to authenticate users in your app. You can find them under the Authentication tab.\nCurrently available authentication plugins include:\nXano Auth : to use Xano as your authentication provider. Documentation is available here . WeWeb Auth : to use WeWeb's own authentication built on top of AWS Cognito . Documentation is available here . Supabase Auth : to use Supabase as your authentication provider. Documentation is available here . Auth0 : to use Auth0 as your authentication provider. Documentation is available here . Token Based Auth : to connect to any API using a token based authentication system . Documentation is available here . OpenID : to use the OpenID protocol to connect to any OpenID provider .\nWARNING You can only have one authentication plugin per app.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/intro-to-plugins.html#extensions": {
                "title": "Extensions ​",
                "content": "The extensions are the plugins that you can use to add custom features to your app. You can find them under the Extensions tab.\nCurrently available extension plugins include:\nDate : to add date-related elements to your app (like a date picker, a date range picker, etc), and formulas to manipulate dates based on the DayJS library. Charts : to add charts to your app. Based on the ChartJS library. Documentation is available here . PWA : to enhance your web applications with Progressive Web App features like device motion sensors, notifications, geolocation, native sharing, and vibration capabilities. Documentation is available here . Stripe : to add Stripe payments to your app. Documentation is available here . Mapbox : to add a Mapbox map to your app. Documentation is available here . WeWeb Email : to send emails from your app using our own email service. CSV : to export data from your app to a CSV file. Google : to add Google-related elements to your app (Google Maps, reCAPTCHAs, etc). Documentation for Google Maps is available here . Youtube : to embed Youtube videos in your app. Calendly : to embed Calendly calendars in your app. Segment : to use Segment as your analytics provider in your app. Vimeo : to embed Vimeo videos in your app. Typeform : to embed Typeform forms in your app. Snipcart : to use Snipcart as your e-commerce provider in your app. Dailymotion : to embed Dailymotion videos in your app. Twitch : to embed Twitch videos in your app.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/intro-to-plugins.html#plugin-configuration": {
                "title": "Plugin configuration ​",
                "content": "To learn how to configure a plugin, please refer to each plugins' documentation (linked in the list above) or to the modal that will appear on the right when you add a plugin:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/websockets/supabase-realtime/presence-state.html",
        "page_title": "Presence state | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/websockets/supabase-realtime/presence-state.html#what-is-presence": {
                "title": "What is presence? ​",
                "content": "When working with realtime, it's often useful to receive and display information about online users. Enter \"presence\".\nPresence is what allows you to see who is present in a realtime channel.\nIf you’re building a collaborative tool, for instance, presence allows you to see who is actively editing or viewing a document:\nIf you are building a message board or a game, it allows users to see who is available to join a game or who is actively participating.\nUltimately, the choice of using presence depends on your specific use case.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/supabase-realtime/presence-state.html#presence-in-supabase": {
                "title": "Presence in Supabase ​",
                "content": "To get information about presence in a Supabase channel, you will need to listen for Supabase presence events via a page or app workflow:\nTIP Depending on your use case, you may choose to listen to only specific type of presence events: sync leave join\nIn the example above, you can see:\nWe are listening to all presence events in the room1 channel. We used the Log action to log a presence message in case we need to debug things. We use branches to update a number variable called supabaseOnlineUsers : If Supabase sends a join event, we add 1 to our active user count. If Supabase sends a leave event, we remove 1 from our active user count.\nOn our UI, we can easily bind the supabaseOnlineUsers value to a text element to display the number of active users:",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Depending on your use case, you may choose to listen to only specific type of presence events: sync leave join"
                ]
            },
            "https://docs.weweb.io/websockets/supabase-realtime/presence-state.html#debugging": {
                "title": "Debugging ​",
                "content": "When working with event listeners, we highly recommend getting into the habit of adding a Log action that's bound to the Event you receive from Supabase:\nThis is helpful because it allows you to see the event as it comes in.\nIn the example above, despite only one user joining the channel, the workflow was triggered twice. That's because, when a user joins a channel, Supabase triggers two presence events : first a join event, followed by a sync event.\nIf we didn't see that information in the logs, we might have been confused and counted two users instead of one.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/supabase/database-update.html",
        "page_title": "Database | Update | WeWeb Documentation",
        "sections": {}
    },
    {
        "url": "https://docs.weweb.io/libraries/intro-to-the-marketplace.html",
        "page_title": "Intro to the marketplace | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/libraries/intro-to-the-marketplace.html#import-a-project": {
                "title": "Import a project ​",
                "content": "To start working with a template or UI kit from the marketplace, simply:\ngo to your WeWeb workspace, click on Create project , select the Marketplace tab, search or browse through available projects, and click on Create project when you want to add it to your workspace.\nOnce you have added the project to your workspace, you can start working with it as you would with any other project from your workspace.\nTIP A library imported from the WeWeb marketplace works like any other library. If you wish to use it in other projects, you will first need to share it with the rest of the workspace. Learn more about working with shared libraries in WeWeb .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP A library imported from the WeWeb marketplace works like any other library. If you wish to use it in other projects, you will first need to share it with the rest of the workspace. Learn more about working with shared libraries in WeWeb ."
                ]
            },
            "https://docs.weweb.io/libraries/intro-to-the-marketplace.html#submit-a-project": {
                "title": "Submit a project ​",
                "content": "To submit a template or UI kit to the WeWeb marletplace:\nvisit marketplace.weweb.io , select the workspace with the teamplate or UI kit you'd like to submit, create a marketplace profile for this workspace (if you haven't already), and fill out the submission form with the required information.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/websockets/xano-realtime/open-close-channel.html",
        "page_title": "Open and close Xano channels | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/websockets/xano-realtime/open-close-channel.html#pre-requisites": {
                "title": "Pre-requisites ​",
                "content": "To leverage Xano realtime actions in WeWeb, you first need to enable and connect Xano realtime.\nIf you haven't already, please do so here .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/open-close-channel.html#why-open-a-channel-matters": {
                "title": "Why open a channel matters ​",
                "content": "If you want users of your app to be able to listen and react to events in a realtime channel, you first need to make them open the channel.\n✈️ Realtime events are like flying objects ☄️ You can picture a user opening a realtime channel as someone who is entering a room where a bunch of objects (events) are flying around. If the user is in the room (channel opened), they can see and intercept these objects. If the user is outside the room (channel closed), they can't see or react to anything.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "✈️ Realtime events are like flying objects ☄️ You can picture a user opening a realtime channel as someone who is entering a room where a bunch of objects (events) are flying around. If the user is in the room (channel opened), they can see and intercept these objects. If the user is outside the room (channel closed), they can't see or react to anything."
                ]
            },
            "https://docs.weweb.io/websockets/xano-realtime/open-close-channel.html#open-channel": {
                "title": "Open channel ​",
                "content": "The Xano Realtime | Open channel action allows you to establish a connection to a Xano channel.\nWARNING Triggering this action is a pre-requisite to leverage Xano realtime. It is a required step to send & receive updates in the channel and communicate with others connected to it.\nIn the example below, you can see we created a workflow that opens a channel called room1 :",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/open-close-channel.html#configuration-options": {
                "title": "Configuration options ​",
                "content": "When you setup an Open channel action, you have the option to enable or disable three Xano realtime features:\nListen to Presence : This feature keeps track of who enters and leaves the channel, helping you see who is currently active or when someone has left.\nGet History on Join : When you join a chatroom, this option lets you view previous messages from other users. To leverage this option, you first need to enable Message History in the settings of your channel in Xano:\nQueue Offline Actions : When a user performs an action, such as sending a message while disconnected, these actions are saved and automatically sent when they reconnect, ensuring nothing is missed.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/open-close-channel.html#three-things-to-keep-in-mind": {
                "title": "Three things to keep in mind ​",
                "content": "1. You can name the channel anything you like.\nJust remember that, later on, when you start sending events to that channel and listening to events from that channel, you'll need to reference the same channel name.\n2. You need to decide when this workflow is triggered.\nExamples include, but are not limited to:\nOn click , to subscribe to a chat channel when a user clicks on a support icon. On page load , to subscribe to a mousemove channel that updates cursor positions in a live collaboration tool. On app load , to subscribe to an update channel that notifies users of new product updates.\n3. The Open channel action does one thing and one thing only : it opens a two way road between the client (the user's browser tab) and the Xano realtime channel.\nSending and receiving events are a seperate topic.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/open-close-channel.html#next-steps": {
                "title": "Next steps ​",
                "content": "Once we have established a connection between WeWeb and a Xano channel, we can:\nSend a message to that channel Listen and react to realtime events from that channel .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/websockets/xano-realtime/open-close-channel.html#close-channel": {
                "title": "Close channel ​",
                "content": "The Close channel action ends an active realtime channel connection, halting all communications and data exchanges through that channel.\nTIP Closing realtime channels is a web development best practice to efficiently manage resources and enhance security by ensuring no unnecessary connections remain open.\nTaking the example of a support chat, you could trigger the Close channel action when the user clicks on a button to close the chat window:\nWARNING Xano does not issue a disconnected event when you close a channel voluntarily. Instead, disconnected events are triggered only if the connection is unexpectedly lost. In the example above, we have a \"Leave room\" button on our page. When the user clicks on it, we trigger a workflow that closes the channel and updates a text variable we named myStatus with the value \"disconnected\" .",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Closing realtime channels is a web development best practice to efficiently manage resources and enhance security by ensuring no unnecessary connections remain open."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/settings-billing-code-export/project-settings/deployments.html",
        "page_title": "Deployments | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/settings-billing-code-export/project-settings/deployments.html#editor": {
                "title": "Editor ​",
                "content": "This is where you can see all the automatic and manual backups of your project's Editor:\nLet's take a look at all the information and functionalities we have on this screen.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/deployments.html#_1-pending-commits": {
                "title": "1. Pending commits ​",
                "content": "In the example above, there are \"7 pending commits\". This means that the Editor was backed-up 7 times without the project being published.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/deployments.html#_2-automatic-commits": {
                "title": "2. Automatic commits ​",
                "content": "WeWeb generates automatic backups of your project Editor:\nevery 24 hours if you're on a Starter plan, every hour if you're on a Scale or Enterprise plan, and every time you publish your app in staging or in production.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/deployments.html#_3-manual-commits": {
                "title": "3. Manual commits ​",
                "content": "You can create a manual commit of the Editor with a custom message to describe the update by going to the Commit button inside the Editor:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/deployments.html#_4-publish": {
                "title": "4. Publish ​",
                "content": "When you click on the Publish to staging or Publish to production button, WeWeb will publish your app in the current version of the Editor.\nAfterwards, there will be \"No pending commits\":",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/deployments.html#_5-preview": {
                "title": "5. Preview ​",
                "content": "If you want to rollback to a previous version of the Editor, you can click on Preview to open the Editor in a read-only mode.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/deployments.html#_6-rollback-editor": {
                "title": "6. Rollback editor ​",
                "content": "Once you are confident you have identified the version of the Editor you want to restore, you can click on Rollback editor .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/deployments.html#staging": {
                "title": "Staging ​",
                "content": "If you're on a Scale or Enterprise plan, this is where you can see the different versions of the application published on the staging environment.\nIn the example below, you can see:\nwe published version 3 of our app, on the staging environment, and have the option to promote it to production.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/settings-billing-code-export/project-settings/deployments.html#production": {
                "title": "Production ​",
                "content": "This is where you can see the different versions of the application published in production.\nIf you're on a Scale or Enterprise plan, you will have the option to rollback to a previous version of the app in production:\nTIP If you're on a yearly plan, you will be able to download project files: Learn more about exporting and self-hosting an app built in WeWeb .",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/deployments6.BLOLiB1o.gif"
                ],
                "tips": [
                    "TIP If you're on a yearly plan, you will be able to download project files: Learn more about exporting and self-hosting an app built in WeWeb ."
                ]
            }
        }
    },
    {
        "url": "https://docs.weweb.io/pages/private-pages.html",
        "page_title": "Private pages | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/pages/private-pages.html#for-authenticated-users": {
                "title": "For authenticated users ​",
                "content": "Assuming you have added and configured an authentication plugin, you will be able to decide if everybody can access a page or only authenticated users:\nIf you choose the Authenticated users option, the page will only be accessible to users that are logged in.\nTIP Inside the WeWeb editor, you will be able to access all pages, including private pages, even if the user is not logged in. This was done to avoid users being stuck when building in WeWeb.\nWARNING When defining redirections in your authentication plugin, make sure you redirect unauthenticated users to a public page. If you redirect unauthenticated users to a page that is only accessible to authenticated users, you'll be creating an infinite loop and your app will crash.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP Inside the WeWeb editor, you will be able to access all pages, including private pages, even if the user is not logged in. This was done to avoid users being stuck when building in WeWeb."
                ]
            },
            "https://docs.weweb.io/pages/private-pages.html#for-user-groups": {
                "title": "For user groups ​",
                "content": "If you have defined user roles in your backend and user groups in your authentication plugin, you will also have the option to restrict access to a specific group or groups:\nTIP Inside the WeWeb editor, you will be able to access all pages, including private pages, even if the user is not part of the required user group. This was done to avoid users being stuck when building in WeWeb.\nWARNING When you add several roles to a user group, a user needs to have BOTH these roles to be part of the user group. It's an AND statement, not OR . In the example below, the members of the Premium customer user group must have both the Customer and the Premium roles associated with their user profile:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/private-page3.Bq7upkPc.png"
                ],
                "tips": [
                    "TIP Inside the WeWeb editor, you will be able to access all pages, including private pages, even if the user is not part of the required user group. This was done to avoid users being stuck when building in WeWeb."
                ]
            },
            "https://docs.weweb.io/pages/private-pages.html#security": {
                "title": "Security ​",
                "content": "It's important to understand that gating content, making a page private, is more of a UX feature than a security measure.\nIt is best practice to gate content because, by making a page private in the frontend, you make it clear to the user that they are not allowed to access the content on that page.\nHowever, in web development, security always happens in the backend. To protect your data, you must secure the API endpoints or tables in your backend, even if the page that triggers those calls is private.\nIn other words, if users need to be authenticated or have a specific role to view or edit data, your backend should have access control checks that ensure that users have the proper authorizations when trying to access or update data.\nLearn more about securing your web-apps here:",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/",
        "page_title": "Welcome | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/#new-to-weweb": {
                "title": "New to WeWeb? ​",
                "content": "🤷 I'm a complete beginner and want to learn about WeWeb and decoupled web-app development . 🔌 I'm comfortable with the design side of things . Teach me how to connect a backend . ⚡ I know what I'm doing . Teach me how to add business logic to my WeWeb app. 🧰 I want to be inspired. Show me how to build things from A to Z.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/#are-you-a-developer": {
                "title": "Are you a Developer? ​",
                "content": "We have a dedicated developer documentation for you 🙂",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/formulas/math.html",
        "page_title": "Math Formulas | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/formulas/math.html#average": {
                "title": "average ​",
                "content": "The average formula takes any number of values, variables of arrays (that are of type Number) and returns the average of all of these values (or the values inside the variables or arrays).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/math.html#example": {
                "title": "Example ​",
                "content": "Here, both examples show the result of the average of the numbers 2, 3, 5 and 3, which is 3.25.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/math.html#rollupsum": {
                "title": "rollupSum ​",
                "content": "This formulas loops over an array of object, and in each object, will take the value for a specific key and sum all of these values.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/math.html#example-1": {
                "title": "Example ​",
                "content": "Here, we use a variable called user orders which equals an array of objects. Let's see its content:\njson [ { \"name\" : \"Quentin\" , \"orders\" : 3 }, { \"name\" : \"Kevin\" , \"orders\" : 2 }, { \"name\" : \"Joyce\" , \"orders\" : 1 }, { \"name\" : \"Damien\" , \"orders\" : 5 } ]\nWe'll tell rollupSum to loop over user orders , take the orders key in each object, and sum all of them. And the sum of 3 + 2 + 1 + 5 is indeed 11.",
                "code_snippets": [
                    {
                        "code": "[\n    {\"name\": \"Quentin\", \"orders\": 3},\n    {\"name\": \"Kevin\", \"orders\": 2},\n    {\"name\": \"Joyce\", \"orders\": 1},\n    {\"name\": \"Damien\", \"orders\": 5}\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/math.html#round": {
                "title": "round ​",
                "content": "This formula will round the value given to it (could be a variable, but it needs to be a number). The precision of this rounding (meaning the number of decimals) can be set as a second parameter, which is zero by default.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/math.html#example-2": {
                "title": "Example ​",
                "content": "In this example, we round the number 3.265 with a precision of zero (meaning to the nearest integer), and then with a precision of 1 (meaning 1 decimal).",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/math.html#sum": {
                "title": "sum ​",
                "content": "This formula will sum all the values given to it (they should be all of type number). These values can be multiple variables or an array of numbers.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/math.html#example-3": {
                "title": "Example ​",
                "content": "Here, we'll sum the numbers 2, 3, 5 and 3 to give 13. In the second example, these values are given through a variables which is an array of these values.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/math.html#tonumber": {
                "title": "toNumber ​",
                "content": "The toNumber formula will convert a string to a number , when possible.\nIt can work with strings containing integer or decimal numbers. The decimal character has to be a dot ( . ) as the function is based on English notation.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/math.html#🔥-pro-tip-🔥": {
                "title": "🔥 Pro tip 🔥 ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/math.html#example-4": {
                "title": "Example ​",
                "content": "In this example, we'll convert a string to a integer and then another string to a decimal. Watch how strings were converted as the result isn't enclosed in \" anymore, meaning it's indeed a number now.",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/workflows/actions/download-file-from-url.html",
        "page_title": "Download file from URL | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/workflows/actions/download-file-from-url.html#file-url-required": {
                "title": "File URL (required) ​",
                "content": "This is a required field and implies that you know where the file is hosted.\nIn the example below, we bound to the file URL returned by our backend:\nTIP Notice in the example above that we bound to the url field, not the vault field of the image object. This is because the vault value is a relative path that is missing the domain where the file is hosted. To check that you are binding to the correct URL, paste the URL in a new tab in your browser. You should be able to see the file as we do here:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/download-file-from-url2.UdzbWbSA.png"
                ],
                "tips": [
                    "TIP Notice in the example above that we bound to the url field, not the vault field of the image object. This is because the vault value is a relative path that is missing the domain where the file is hosted. To check that you are binding to the correct URL, paste the URL in a new tab in your browser. You should be able to see the file as we do here:"
                ]
            },
            "https://docs.weweb.io/workflows/actions/download-file-from-url.html#file-name-optional": {
                "title": "File name (optional) ​",
                "content": "Here you can bind the name of the file that will be downloaded on your user's computer:\nThis field is optional. If you leave it empty, a random name will be generated (e.g. 50700faa-3ba6-4f97-8bc8-a9476711f694.jpeg )\nWARNING You can leave the File name field empty but if you do add a file name, it must include the file extension (e.g. .pdf , .png , .jpg , etc)",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/data-sources/rest-api.html",
        "page_title": "REST API data source | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/data-sources/rest-api.html#add-plugin": {
                "title": "Add plugin ​",
                "content": "To work with external APIs that don't have a native WeWeb integration, you can go to Plugins > Data sources > REST API :\nThere is no configuration required.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/rest-api.html#make-api-calls": {
                "title": "Make API calls ​",
                "content": "Once you have added the REST API plugin to a WeWeb project, you will be able to:\ncreate a data collection that fetches data from a REST API create a workflow that makes an API request\nTIP We recommend using collections when you are fetching data that might need to be filtered and paginated. To make an API call that creates, updates, or deletes a record, you will need to create a workflow.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP We recommend using collections when you are fetching data that might need to be filtered and paginated. To make an API call that creates, updates, or deletes a record, you will need to create a workflow."
                ]
            },
            "https://docs.weweb.io/plugins/data-sources/rest-api.html#security": {
                "title": "Security ​",
                "content": "When you make an API call with the REST API plugin in WeWeb the request is made by your application (i.e. client-side request from the frontend, your browser).\nYou should never use private API keys in REST API calls made through the client.\nLearn more about public and private API keys .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/rest-api.html#create-a-collection": {
                "title": "Create a collection ​",
                "content": "To get and display data sets that might need to be filtered or paginated, you can create a collection in WeWeb.\nIn the example below, we fetched a list of characters from the Rick & Morty API :\nYou can see that:\nin the Data tab, we clicked on New to create a new collection, we gave it a name and chose REST API as a data source, we configured our API calls as we would in tools like Postman we have options to filter and paginate the collection in the frontend, decide when the collection will be fetched, and if we want it to be preserved on navigation\nWARNING WeWeb's REST API plugin only accepts HTTPS requests. If you're trying to follow this tutorial with a public API that uses HTTP requests, WeWeb will return an error message.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/rest-api.html#headers": {
                "title": "Headers ​",
                "content": "If your data can only be accessed by authenticated users, don't forget to add Authorization headers to your API call and login as a user of your WeWeb app. Otherwise, the API will return an error when you try to create the collection.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/rest-api.html#result-key": {
                "title": "Result key ​",
                "content": "Sometimes, APIs will return the data you need in a nested object. When that happens, it can be helpful to use the Result key field to fetch only the information you need.\nFor example, when we get a list of characters from the Rick & Morty API, the API returns two objets:\ninfo , with info that we could use to setup backend pagination, and results , with a list of Rick & Morty characters.\nIf we don't intend to setup backend pagination on that collection, the info object is useless to us and adds uneccessary complexity when working with this data set.\nTo access the information inside the results object directly, we can add results as a value in our Result key field:\nTIP This is not a WeWeb specific practice. In web development, you always want to avoid fetching data you don't need.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP This is not a WeWeb specific practice. In web development, you always want to avoid fetching data you don't need."
                ]
            },
            "https://docs.weweb.io/plugins/data-sources/rest-api.html#api-calls-in-workflows": {
                "title": "API calls in workflows ​",
                "content": "Once you've added the REST API plugin to your project, you will have access to the REST API Request action.\nIn the example below, you can see we:\nchose the REST API Request action type, decided to make a POST request, entered the URL or our endpoint, bound the name of two fields to update with values, and configured authorization headers to tell our API who is making the call",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/rest-api.html#resolving-cors-issues": {
                "title": "Resolving CORS Issues ​",
                "content": "When you make an API call in WeWeb the request is made by your application (i.e. client-side request from the frontend, your browser).\nBut sometimes, APIs only accept requests that come from a server (i.e. server-side requests from the backend) and return CORS errors. This is the case for the Twitter API for example.\nYou can bypass CORS issues by enabling the Proxy the request to bypass CORS issues option on your API call:\nWARNING When you enable the Proxy the request to bypass CORS issues option, WeWeb will proxy the request to bypass CORS errors but the information will still be visible in the client. This option is not meant to keep private tokens private. You should never use private API keys in REST API calls made through the client.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/data-sources/rest-api.html#debugging-api-requests": {
                "title": "Debugging API Requests ​",
                "content": "When you start working with APIs, you'll run into a lot of errors.\nIt's completely normal and nothing to worry about 🙂\nWeWeb will display error messages to help you figure out what went wrong.\nThe top 4 reasons for errors are:\nyou're trying to make an http request when WeWeb only accepts https requests the API you are working doesn't accept client-side requests (see \"Resolving CORS issues\" section above) you are trying to get or udpate data that is protected in your backend but you are not logged in as an authorized user to get or update this data you are sending data to the API in a format it does not recognize. For example, trying to update an integer field but sending a string.\nLearn more about debugging API requests .",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/components/component-instance.html",
        "page_title": "Component instance | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/components/component-instance.html#why-it-matters": {
                "title": "Why it matters: ​",
                "content": "Traversing the entire DOM is expensive. Many third-party libraries require DOM elements to initialize. Using thisInstance in workflows with the onMounted trigger provides these libraries with the correct elements at the right time, ensuring proper setup\nLet’s say we want to add some custom HTML code inside our Selfie component:\nWe can add the code below. This HTML code sets up a simple camera capture and image download interface:\nNow we can access our component workflow 'Init camera' that uses the onMounted trigger. We will use this workflow to initialize the camera:\nTIP onMounted is a lifecycle event that occurs when a component has been inserted into the DOM (Document Object Model). It signifies that the component has been rendered and is now \"mounted\" in the page structure. This is an ideal time to perform certain actions: Initializing third-party libraries Setting up event listeners Making initial API calls Manipulating the DOM directly (when necessary) Starting animations or timers thisInstance is best used onMounted as it ensures that the component's DOM elements are fully rendered and available. thisInstance provides access to these elements, so using it in onMounted guarantees that the elements you're targeting actually exist.\nIn our component’s workflow, we can add a Custom JavaScript action:\nWhen targeting DOM elements, using document.querySelector() forces a search through the entire document tree. The issue lies with the document object, which represents the whole DOM. This global scope can be inefficient, especially in large or complex web applications.\nBinding scripts to the component's scope improves efficiency. Rather than using the global document object, which searches the entire DOM, we use a thisInstance object. This object limits the script's scope to the component's own HTML, ensuring faster and more targeted element selection within the component instance.\nThe code will work even if you have multiple instances within the same page.",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TIP onMounted is a lifecycle event that occurs when a component has been inserted into the DOM (Document Object Model). It signifies that the component has been rendered and is now \"mounted\" in the page structure. This is an ideal time to perform certain actions: Initializing third-party libraries Setting up event listeners Making initial API calls Manipulating the DOM directly (when necessary) Starting animations or timers thisInstance is best used onMounted as it ensures that the component's DOM elements are fully rendered and available. thisInstance provides access to these elements, so using it in onMounted guarantees that the elements you're targeting actually exist."
                ]
            },
            "https://docs.weweb.io/components/component-instance.html#conclusion": {
                "title": "Conclusion ​",
                "content": "When working with custom JavaScript in component workflows, use thisInstance instead of document to target DOM elements. Here's why:\ndocument.querySelector() searches the entire DOM, which is inefficient. thisInstance targets only the current component's HTML. This approach is faster and maintains component isolation. It works seamlessly with multiple component instances on a page",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html",
        "page_title": "Supabase authentication | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html#plugin-configuration": {
                "title": "Plugin configuration ​",
                "content": "Supabase comes with an in-built authentication system which you can use in WeWeb.\nTo add the Supabase Auth Plugin in WeWeb, go to Plugins > Authentication :\nAssuming you have already provided your Supabase project URL and public API key when setting up the Supabase Data source , the only thing left to do will be to add your private API key:\nIn Supabase, you can find your private API key in Settings > API :\nWARNING As the name suggests, you'll want to keep this API key secret. Assuming you copy it properly in the Private API key field of the Supabase Auth Plugin and don't use it anywhere else in your WeWeb project, WeWeb will never make it public.\nYou will then be invited to choose a page to redirect unauthenticated users, i.e. users who are NOT signed-in:\nWARNING Make sure you redirect unauthenticated users to a public page. If you redirect unauthenticated users to a page that is only accessible to authenticated users, you'll be creating an infinite loop and your app will crash.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html#sign-up-and-log-in-flows": {
                "title": "Sign up and log in flows ​",
                "content": "WARNING By default, Supabase restricts auth emails to your organization's members only. To enable sign-up functionality for all users, you must set up a custom SMTP provider in your Supabase project. Without this setup, new users outside your organization will not be able to sign up or receive auth-related emails.\nOnce you have added the Supabase Auth plugin to your WeWeb project, you will get access to:\ndedicated Supabase Auth actions in workflows, and dedicated UI elements in the Add menu.\nIn the example below, you can see we added the Login UI element related to the Supabase Auth plugin:\nThat UI element comes with a predefined workflow using the Login with email action but you have access to many more:\nTIP If you choose to design your own forms, remember to place the workflow on the form container and trigger it On submit if you want to validate the fields of the form when users submit it (as opped to triggering the workflow On click of a button).",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/smtp.DjWJ48gh.png"
                ],
                "tips": [
                    "TIP If you choose to design your own forms, remember to place the workflow on the form container and trigger it On submit if you want to validate the fields of the form when users submit it (as opped to triggering the workflow On click of a button)."
                ]
            },
            "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html#sign-up-workflow": {
                "title": "Sign up workflow ​",
                "content": "In the example below, we added a workflow on a sign up form, chose the On submit trigger, and added the Supabase Sign up action:\nThen, we mapped the email, password, and metadata information in the form to the email, password, and metadata in Supabase before choosing what page the new user should be redirected to:\nIn the example above, we made sure to add the user's name as an item in that user's metadata.\nIn Supabase, you can find the user's metadata in JSON format in a dedicated field of the users table, named raw_user_meta_data :\nThe same logic will apply to any Supabase action you want to trigger.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html#reset-password-flow": {
                "title": "Reset password flow ​",
                "content": "You'll need three things to allow users to reset their passwords:\na WeWeb page where users type in their email address and submit a password reset request the URL of your website and an email template properly configured in Supabase a WeWeb page where users are redirected when they click on the link in the email sent by Supabase",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html#_1-forgot-password-page": {
                "title": "1. Forgot password page ​",
                "content": "In WeWeb, you'll need to create a page where users can make a request to reset their password.\nThat page needs to include:\nan email input field, and a workflow with the Supabase Auth Forgot password action.\nYou can design your own custom page or simply use the Reset password UI element that comes with the Supabase Auth plugin:\nIn the example below, we trigger a Forgot password action on form submit, tell Supabase where it should send the reset password email, and say we want the user to be redirected to the Choose new password page when they click on the link in that email:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html#_2-supabase-configuration-to-send-password-reset-email": {
                "title": "2. Supabase configuration to send password reset email ​",
                "content": "In Supabase, you'll need to add the URL of your live app by going to Authentication > URL Configuration :\nIn the example above, we added the URL of our project in the WeWeb Editor because we are still building the app but we would change it to the URL of our staging website or live website as we progressed through the building and publishing process.\nWARNING The URL should not reference a specific page.\nYou can personalize the email Supabase sends by going to Authentication > Email Templates > Reset password :\nWARNING The {{ .ConfirmationURL }} variable in the email template will automatically refer to the page you chose to redirect users in step 1. Do NOT modify it.\nTROUBLESHOOTING TIPS If you are not receiving the reset password email as expected: check if the the email was sent to your spam folder experiment with and without a / at the end of the URL check that the URL corresponds to the environment you made the reset password request in (e.g. the WeWeb editor, the staging URL ending with staging.weweb-preview.io , or the live app) if testing with the WeWeb Editor URL, make sure to include only the first part of the URL. Do not include the page id after the second /",
                "code_snippets": [],
                "images": [],
                "tips": [
                    "TROUBLESHOOTING TIPS If you are not receiving the reset password email as expected: check if the the email was sent to your spam folder experiment with and without a / at the end of the URL check that the URL corresponds to the environment you made the reset password request in (e.g. the WeWeb editor, the staging URL ending with staging.weweb-preview.io , or the live app) if testing with the WeWeb Editor URL, make sure to include only the first part of the URL. Do not include the page id after the second /"
                ]
            },
            "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html#_3-confirm-password-page": {
                "title": "3. Confirm password page ​",
                "content": "Back in WeWeb, you will need to create a page where users can type in and submit their new password.\nYou can design your own custom page or use the Change password UI element that comes with the Supabase Auth plugin.\nIn the example below, we triggered a workflow on a form submission and:\ncheck if the two password input values are identical if they're not, we display an error message if they are, we use the Confirm password action to send the new password to Supabase",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html#oauth-with-providers": {
                "title": "OAuth with providers ​",
                "content": "When using Supabase for authentication, sign up and login with an email address is enabled by default but you can also enable other methods of authentication, including but not limited to Google OAuth, Azure, GitHub, LinkedIn, and Slack:\nEach provider will have their own configuration steps which you'll need to work out using their documentation.\nBroadly speaking, it will look something like this:\nIn the provider's interface\ncreate the project add authorized domains create OAuth credentials define redirect URLs\nIn Supabase\nsave the OAuth credentials of the provider add the base URL of your website define one or more URLs where users can be redirected after logging in\nIn WeWeb\ntrigger a workflow with the Login with provider action select what provider's consent screen you want to display select which page users should be redirected to after they successfully log in\nWARNING When you use the Login with provider action with the Supabase Auth plugin, it's important to redirect to a public page to read the cookie from the external provider with the user information. This will allow you to then move on to a private page without any errors. This is not WeWeb or Supabase specific, it's part of a standard OAuth flow:",
                "code_snippets": [],
                "images": [
                    "https://docs.weweb.io/assets/oauth-flow.Bar2D9pL.png"
                ],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html#update-user-metadata": {
                "title": "Update user metadata ​",
                "content": "In the default users table of a Supabase project, you can add user metadata in the raw_user_meta_data column which expects a JSON.\nTo pass user metadata from WeWeb to Supabase, you have two options.\n1- select a key in the Metadata dropdown when using the Sign Up or Update User Metadata action in a workflow\n2- bind the Metadata field to update Supabase with custom metadata.\nThis fields expects an array of objects where, for each object, you explicitly say this is my key and this is the corresponding value for this item. For example:\nIn the example above, we used a no-code formula to create the array of objects but, if you're used to the syntax, it can be easier to write in JavaScript:\nHere's a code snippet you might find helpful to avoid typos:\njs return [ { \"key\" : \"favorite_joke\" , \"value\" : \"something about an elephant\" }, { \"key\" : \"favorite_chocolate\" , \"value\" : \"dark\" } ]\nWARNING You will not be able to update the user metadata of users who are logging in through a third-party provider because their metadata is related to the OAuth provider they are authenticated with. If you wish to request further information from these users, we recommend creating a profiles table in the public schema of your Supabase project that is synced to your users table. Learn more about working with user profiles in Supabase .",
                "code_snippets": [
                    {
                        "code": "return [\n    {\"key\":\"favorite_joke\", \"value\":\"something about an elephant\"},\n    {\"key\":\"favorite_chocolate\", \"value\":\"dark\"}\n]",
                        "language": "unknown"
                    }
                ],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html#user-roles-permissions": {
                "title": "User roles & permissions ​",
                "content": "Now let's say we want to gate content and set different permissions based on a user's role. We will need to:\ncreate a roles table in Supabase with the list of available roles create a join table in Supabase that maps the users with a role tell the Supabase Auth plugin in WeWeb where it can find the information",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html#_1-add-roles-in-supabase": {
                "title": "1. Add roles in Supabase ​",
                "content": "In Supabase, we'll need to create a roles table with a list of roles and a join table that links the roles table with our users table.\nFirst, let's create a roles table with three roles and make sure that each role had a UUID and a name :\nWARNING In order for the integration to work with the Users tab in WeWeb, it is crucial that the role title is a text field named name .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html#_2-join-roles-and-users-in-supabase": {
                "title": "2. Join roles and users in Supabase ​",
                "content": "Second, let's create a userRoles join table:\nIn the join table above, you can see we have an id field that is uniquely identifiable thanks to a UUID.\nThis unique id is linked to a userId , which is also a UUID. More specifically, it is the UUID we find in the id field of the users table in the auth schema:\nEach row in our userRoles table is also linked to a roleId which is the UUID we find in the id field of the roles table in the public schema:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html#_3-link-users-in-weweb-to-roles-and-users-in-supabase": {
                "title": "3. Link users in WeWeb to roles and users in Supabase ​",
                "content": "Once we've added our list of roles in Supabase and created an empty join table to link our roles with users, it's time to go to WeWeb.\nIn Plugins > Supabase Auth > 3. Roles table , we'll click refresh and select the relevant Supabase tables we just created:\nOnce you've told WeWeb where to find the roles and the join table in Supabase, you'll be able to easily view and maintain user roles in the Users tab in WeWeb:\nWhen you make a change to a user in WeWeb, it will automatically be updated in Supabase.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html#users-vs-profiles": {
                "title": "Users vs Profiles ​",
                "content": "So far, we've showed you how to work with the default users table that Supabase generates in the auth schema when you create a new project.\nNote that, for security purposes,  the information in that users table is not exposed on the auto-generated API.\nHow does this affect your project in WeWeb?",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html#let-users-update-their-information": {
                "title": "Let users update their information ​",
                "content": "Let's say you want to let authenticated users update their own information, then you don't need to set up anything else in Supabase.\nYou could simply create a user profile page in WeWeb and display their information when they sign in, based on the data you have in the user variable:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/plugins/auth-systems/supabase-auth.html#display-other-users-information": {
                "title": "Display other users' information ​",
                "content": "In some use cases, you might want to display other users' information.\nFor example, if you're building an HR portal in WeWeb, you might want HR employees to have access to a list of applicants and their user profiles.\nYou wouldn't be able to do that with the users table in the auth schema because each user's information is only available to them.\nFor such a use case, Supabase recommends creating a profiles table in the public schema to store user data that you want to access via the API.\nIn WeWeb, you would then be able to create a Collection to get data from the profiles table.\nLearn more about managing user data in Supabase :",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    },
    {
        "url": "https://docs.weweb.io/formulas/conditional.html",
        "page_title": "Conditional Formulas | WeWeb Documentation",
        "sections": {
            "https://docs.weweb.io/formulas/conditional.html#if": {
                "title": "if ​",
                "content": "if takes 3 arguments, in order:\ncondition the variable or comparison to test truthiness on value1 the value to return if the condition is truthy value2 the value to return if the condition is falsy",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/conditional.html#example": {
                "title": "Example ​",
                "content": "Here, we're using the if formula with a variable ( display modal ) as a condition. The formula will test if the varibale is true , and because it's false in this case, it'll return the second value.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/conditional.html#ifempty": {
                "title": "ifEmpty ​",
                "content": "",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/conditional.html#use-case": {
                "title": "Use case ​",
                "content": "The ifEmpty formula is used to check if a given value is empty or not.\nIf the value is empty, it returns a specified fallback value. If the value is not empty, it returns the original value.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/conditional.html#syntax": {
                "title": "Syntax ​",
                "content": "The basic syntax of the ifEmpty formula is: ifEmpty(first_parameter, second_parameter)\nThe first parameter is the value you want to check. The second parameter is the value to return if the first parameter is empty.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/conditional.html#examples": {
                "title": "Examples ​",
                "content": "Let's say you want to check if user_input is empty and return \"Default Value\" if it is, the formula would be: ifEmpty(user_input, \"Default Value\")\nIf user_input has a value, the formula will return that value. If it is empty, it will return \"Default Value\".\nHere's the ifEmpty formula in action to check if a collection has returned items or not:",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/conditional.html#not": {
                "title": "not ​",
                "content": "The not formula takes a variable or camparison, and return the opposite boolean value.\nOk, so what does it means? 😆\nIf a variable or comparison is truthy, it will return false . If a variable or comparison is falsy, it will return true .\nSo, this formula is useful when you need to invert a condition.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/conditional.html#example-1": {
                "title": "Example ​",
                "content": "In this example, we apply not to the display modal from before, which is false . So the return value is true .\nIf we take back the example from the if formula, it will now return the first value as the comparison is now not(false) , so true .",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/conditional.html#switch": {
                "title": "switch ​",
                "content": "The switch formula takes an expression , then checks its equality with each value and return the matching result.",
                "code_snippets": [],
                "images": [],
                "tips": []
            },
            "https://docs.weweb.io/formulas/conditional.html#example-2": {
                "title": "Example ​",
                "content": "Here, switch takes the variable user location as a an expression, which equals to \"USA\" . It'll then loop over values, match the one which equals \"USA\" too, and return the matching value, which is Hello from the US 👋\" .",
                "code_snippets": [],
                "images": [],
                "tips": []
            }
        }
    }
]